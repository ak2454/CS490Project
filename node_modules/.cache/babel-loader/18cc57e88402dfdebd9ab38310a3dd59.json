{"ast":null,"code":"// This file was modified by Oracle on June 1, 2021.\n// The changes involve new logic to handle an additional ERR Packet sent by\n// the MySQL server when the connection is closed unexpectedly.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n// This file was modified by Oracle on June 17, 2021.\n// The changes involve logic to ensure the socket connection is closed when\n// there is a fatal error.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Net = require('net');\n\nvar Tls = require('tls');\n\nvar Timers = require('timers');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Readable = require('stream').Readable;\n\nvar Queue = require('denque');\n\nvar SqlString = require('sqlstring');\n\nvar LRU = require('lru-cache');\n\nvar PacketParser = require('./packet_parser.js');\n\nvar Packets = require('./packets/index.js');\n\nvar Commands = require('./commands/index.js');\n\nvar ConnectionConfig = require('./connection_config.js');\n\nvar CharsetToEncoding = require('./constants/charset_encodings.js');\n\nvar _connectionId = 0;\nvar convertNamedPlaceholders = null;\n\nvar Connection = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Connection, _EventEmitter);\n\n  var _super = _createSuper(Connection);\n\n  function Connection(opts) {\n    var _this;\n\n    _classCallCheck(this, Connection);\n\n    _this = _super.call(this);\n    _this.config = opts.config; // TODO: fill defaults\n    // if no params, connect to /var/lib/mysql/mysql.sock ( /tmp/mysql.sock on OSX )\n    // if host is given, connect to host:3306\n    // TODO: use `/usr/local/mysql/bin/mysql_config --socket` output? as default socketPath\n    // if there is no host/port and no socketPath parameters?\n\n    if (!opts.config.stream) {\n      if (opts.config.socketPath) {\n        _this.stream = Net.connect(opts.config.socketPath);\n      } else {\n        _this.stream = Net.connect(opts.config.port, opts.config.host); // Enable keep-alive on the socket.  It's disabled by default, but the\n        // user can enable it and supply an initial delay.\n\n        _this.stream.setKeepAlive(true, _this.config.keepAliveInitialDelay);\n      } // if stream is a function, treat it as \"stream agent / factory\"\n\n    } else if (typeof opts.config.stream === 'function') {\n      _this.stream = opts.config.stream(opts);\n    } else {\n      _this.stream = opts.config.stream;\n    }\n\n    _this._internalId = _connectionId++;\n    _this._commands = new Queue();\n    _this._command = null;\n    _this._paused = false;\n    _this._paused_packets = new Queue();\n    _this._statements = new LRU({\n      max: _this.config.maxPreparedStatements,\n      dispose: function dispose(key, statement) {\n        statement.close();\n      }\n    });\n    _this.serverCapabilityFlags = 0;\n    _this.authorized = false;\n    _this.sequenceId = 0;\n    _this.compressedSequenceId = 0;\n    _this.threadId = null;\n    _this._handshakePacket = null;\n    _this._fatalError = null;\n    _this._protocolError = null;\n    _this._outOfOrderPackets = [];\n    _this.clientEncoding = CharsetToEncoding[_this.config.charsetNumber];\n\n    _this.stream.on('error', _this._handleNetworkError.bind(_assertThisInitialized(_this))); // see https://gist.github.com/khoomeister/4985691#use-that-instead-of-bind\n\n\n    _this.packetParser = new PacketParser(function (p) {\n      _this.handlePacket(p);\n    });\n\n    _this.stream.on('data', function (data) {\n      if (_this.connectTimeout) {\n        Timers.clearTimeout(_this.connectTimeout);\n        _this.connectTimeout = null;\n      }\n\n      _this.packetParser.execute(data);\n    });\n\n    _this.stream.on('close', function () {\n      // we need to set this flag everywhere where we want connection to close\n      if (_this._closing) {\n        return;\n      }\n\n      if (!_this._protocolError) {\n        // no particular error message before disconnect\n        _this._protocolError = new Error('Connection lost: The server closed the connection.');\n        _this._protocolError.fatal = true;\n        _this._protocolError.code = 'PROTOCOL_CONNECTION_LOST';\n      }\n\n      _this._notifyError(_this._protocolError);\n    });\n\n    var handshakeCommand;\n\n    if (!_this.config.isServer) {\n      handshakeCommand = new Commands.ClientHandshake(_this.config.clientFlags);\n      handshakeCommand.on('end', function () {\n        // this happens when handshake finishes early either because there was\n        // some fatal error or the server sent an error packet instead of\n        // an hello packet (for example, 'Too many connactions' error)\n        if (!handshakeCommand.handshake || _this._fatalError || _this._protocolError) {\n          return;\n        }\n\n        _this._handshakePacket = handshakeCommand.handshake;\n        _this.threadId = handshakeCommand.handshake.connectionId;\n\n        _this.emit('connect', handshakeCommand.handshake);\n      });\n      handshakeCommand.on('error', function (err) {\n        _this._closing = true;\n\n        _this._notifyError(err);\n      });\n\n      _this.addCommand(handshakeCommand);\n    } // in case there was no initiall handshake but we need to read sting, assume it utf-8\n    // most common example: \"Too many connections\" error ( packet is sent immediately on connection attempt, we don't know server encoding yet)\n    // will be overwrittedn with actial encoding value as soon as server handshake packet is received\n\n\n    _this.serverEncoding = 'utf8';\n\n    if (_this.config.connectTimeout) {\n      var timeoutHandler = _this._handleTimeoutError.bind(_assertThisInitialized(_this));\n\n      _this.connectTimeout = Timers.setTimeout(timeoutHandler, _this.config.connectTimeout);\n    }\n\n    return _this;\n  }\n\n  _createClass(Connection, [{\n    key: \"promise\",\n    value: function promise(promiseImpl) {\n      var PromiseConnection = require('../promise').PromiseConnection;\n\n      return new PromiseConnection(this, promiseImpl);\n    }\n  }, {\n    key: \"_addCommandClosedState\",\n    value: function _addCommandClosedState(cmd) {\n      var err = new Error(\"Can't add new command when connection is in closed state\");\n      err.fatal = true;\n\n      if (cmd.onResult) {\n        cmd.onResult(err);\n      } else {\n        this.emit('error', err);\n      }\n    }\n  }, {\n    key: \"_handleFatalError\",\n    value: function _handleFatalError(err) {\n      var _this2 = this;\n\n      err.fatal = true; // stop receiving packets\n\n      this.stream.removeAllListeners('data');\n      this.addCommand = this._addCommandClosedState;\n\n      this.write = function () {\n        _this2.emit('error', new Error(\"Can't write in closed state\"));\n      };\n\n      this._notifyError(err);\n\n      this._fatalError = err;\n    }\n  }, {\n    key: \"_handleNetworkError\",\n    value: function _handleNetworkError(err) {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      } // Do not throw an error when a connection ends with a RST,ACK packet\n\n\n      if (err.errno === 'ECONNRESET' && this._closing) {\n        return;\n      }\n\n      this._handleFatalError(err);\n    }\n  }, {\n    key: \"_handleTimeoutError\",\n    value: function _handleTimeoutError() {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n\n      this.stream.destroy && this.stream.destroy();\n      var err = new Error('connect ETIMEDOUT');\n      err.errorno = 'ETIMEDOUT';\n      err.code = 'ETIMEDOUT';\n      err.syscall = 'connect';\n\n      this._handleNetworkError(err);\n    } // notify all commands in the queue and bubble error as connection \"error\"\n    // called on stream error or unexpected termination\n\n  }, {\n    key: \"_notifyError\",\n    value: function _notifyError(err) {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      } // prevent from emitting 'PROTOCOL_CONNECTION_LOST' after EPIPE or ECONNRESET\n\n\n      if (this._fatalError) {\n        return;\n      }\n\n      var command; // if there is no active command, notify connection\n      // if there are commands and all of them have callbacks, pass error via callback\n\n      var bubbleErrorToConnection = !this._command;\n\n      if (this._command && this._command.onResult) {\n        this._command.onResult(err);\n\n        this._command = null; // connection handshake is special because we allow it to be implicit\n        // if error happened during handshake, but there are others commands in queue\n        // then bubble error to other commands and not to connection\n      } else if (!(this._command && this._command.constructor === Commands.ClientHandshake && this._commands.length > 0)) {\n        bubbleErrorToConnection = true;\n      }\n\n      while (command = this._commands.shift()) {\n        if (command.onResult) {\n          command.onResult(err);\n        } else {\n          bubbleErrorToConnection = true;\n        }\n      } // notify connection if some comands in the queue did not have callbacks\n      // or if this is pool connection ( so it can be removed from pool )\n\n\n      if (bubbleErrorToConnection || this._pool) {\n        this.emit('error', err);\n      } // close connection after emitting the event in case of a fatal error\n\n\n      if (err.fatal) {\n        this.close();\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write(buffer) {\n      var _this3 = this;\n\n      var result = this.stream.write(buffer, function (err) {\n        if (err) {\n          _this3._handleNetworkError(err);\n        }\n      });\n\n      if (!result) {\n        this.stream.emit('pause');\n      }\n    } // http://dev.mysql.com/doc/internals/en/sequence-id.html\n    //\n    // The sequence-id is incremented with each packet and may wrap around.\n    // It starts at 0 and is reset to 0 when a new command\n    // begins in the Command Phase.\n    // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n\n  }, {\n    key: \"_resetSequenceId\",\n    value: function _resetSequenceId() {\n      this.sequenceId = 0;\n      this.compressedSequenceId = 0;\n    }\n  }, {\n    key: \"_bumpCompressedSequenceId\",\n    value: function _bumpCompressedSequenceId(numPackets) {\n      this.compressedSequenceId += numPackets;\n      this.compressedSequenceId %= 256;\n    }\n  }, {\n    key: \"_bumpSequenceId\",\n    value: function _bumpSequenceId(numPackets) {\n      this.sequenceId += numPackets;\n      this.sequenceId %= 256;\n    }\n  }, {\n    key: \"writePacket\",\n    value: function writePacket(packet) {\n      var MAX_PACKET_LENGTH = 16777215;\n      var length = packet.length();\n      var chunk, offset, header;\n\n      if (length < MAX_PACKET_LENGTH) {\n        packet.writeHeader(this.sequenceId);\n\n        if (this.config.debug) {\n          // eslint-disable-next-line no-console\n          console.log(\"\".concat(this._internalId, \" \").concat(this.connectionId, \" <== \").concat(this._command._commandName, \"#\").concat(this._command.stateName(), \"(\").concat([this.sequenceId, packet._name, packet.length()].join(','), \")\")); // eslint-disable-next-line no-console\n\n          console.log(\"\".concat(this._internalId, \" \").concat(this.connectionId, \" <== \").concat(packet.buffer.toString('hex')));\n        }\n\n        this._bumpSequenceId(1);\n\n        this.write(packet.buffer);\n      } else {\n        if (this.config.debug) {\n          // eslint-disable-next-line no-console\n          console.log(\"\".concat(this._internalId, \" \").concat(this.connectionId, \" <== Writing large packet, raw content not written:\")); // eslint-disable-next-line no-console\n\n          console.log(\"\".concat(this._internalId, \" \").concat(this.connectionId, \" <== \").concat(this._command._commandName, \"#\").concat(this._command.stateName(), \"(\").concat([this.sequenceId, packet._name, packet.length()].join(','), \")\"));\n        }\n\n        for (offset = 4; offset < 4 + length; offset += MAX_PACKET_LENGTH) {\n          chunk = packet.buffer.slice(offset, offset + MAX_PACKET_LENGTH);\n\n          if (chunk.length === MAX_PACKET_LENGTH) {\n            header = Buffer.from([0xff, 0xff, 0xff, this.sequenceId]);\n          } else {\n            header = Buffer.from([chunk.length & 0xff, chunk.length >> 8 & 0xff, chunk.length >> 16 & 0xff, this.sequenceId]);\n          }\n\n          this._bumpSequenceId(1);\n\n          this.write(header);\n          this.write(chunk);\n        }\n      }\n    } // 0.11+ environment\n\n  }, {\n    key: \"startTLS\",\n    value: function startTLS(onSecure) {\n      var _this4 = this;\n\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Upgrading connection to TLS');\n      }\n\n      var secureContext = Tls.createSecureContext({\n        ca: this.config.ssl.ca,\n        cert: this.config.ssl.cert,\n        ciphers: this.config.ssl.ciphers,\n        key: this.config.ssl.key,\n        passphrase: this.config.ssl.passphrase,\n        minVersion: this.config.ssl.minVersion\n      });\n      var rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n      var secureEstablished = false;\n      var secureSocket = new Tls.TLSSocket(this.stream, {\n        rejectUnauthorized: rejectUnauthorized,\n        requestCert: true,\n        secureContext: secureContext,\n        isServer: false\n      }); // error handler for secure socket\n\n      secureSocket.on('_tlsError', function (err) {\n        if (secureEstablished) {\n          _this4._handleNetworkError(err);\n        } else {\n          onSecure(err);\n        }\n      });\n      secureSocket.on('secure', function () {\n        secureEstablished = true;\n        onSecure(rejectUnauthorized ? secureSocket.ssl.verifyError() : null);\n      });\n      secureSocket.on('data', function (data) {\n        _this4.packetParser.execute(data);\n      });\n\n      this.write = function (buffer) {\n        secureSocket.write(buffer);\n      }; // start TLS communications\n\n\n      secureSocket._start();\n    }\n  }, {\n    key: \"pipe\",\n    value: function pipe() {\n      var _this5 = this;\n\n      if (this.stream instanceof Net.Stream) {\n        this.stream.ondata = function (data, start, end) {\n          _this5.packetParser.execute(data, start, end);\n        };\n      } else {\n        this.stream.on('data', function (data) {\n          _this5.packetParser.execute(data.parent, data.offset, data.offset + data.length);\n        });\n      }\n    }\n  }, {\n    key: \"protocolError\",\n    value: function protocolError(message, code) {\n      // Starting with MySQL 8.0.24, if the client closes the connection\n      // unexpectedly, the server will send a last ERR Packet, which we can\n      // safely ignore.\n      // https://dev.mysql.com/worklog/task/?id=12999\n      if (this._closing) {\n        return;\n      }\n\n      var err = new Error(message);\n      err.fatal = true;\n      err.code = code || 'PROTOCOL_ERROR';\n      this.emit('error', err);\n    }\n  }, {\n    key: \"handlePacket\",\n    value: function handlePacket(packet) {\n      if (this._paused) {\n        this._paused_packets.push(packet);\n\n        return;\n      }\n\n      if (packet) {\n        if (this.sequenceId !== packet.sequenceId) {\n          var err = new Error(\"Warning: got packets out of order. Expected \".concat(this.sequenceId, \" but received \").concat(packet.sequenceId));\n          err.expected = this.sequenceId;\n          err.received = packet.sequenceId;\n          this.emit('warn', err); // REVIEW\n          // eslint-disable-next-line no-console\n\n          console.error(err.message);\n        }\n\n        this._bumpSequenceId(packet.numPackets);\n      }\n\n      if (this.config.debug) {\n        if (packet) {\n          // eslint-disable-next-line no-console\n          console.log(\" raw: \".concat(packet.buffer.slice(packet.offset, packet.offset + packet.length()).toString('hex'))); // eslint-disable-next-line no-console\n\n          console.trace();\n          var commandName = this._command ? this._command._commandName : '(no command)';\n          var stateName = this._command ? this._command.stateName() : '(no command)'; // eslint-disable-next-line no-console\n\n          console.log(\"\".concat(this._internalId, \" \").concat(this.connectionId, \" ==> \").concat(commandName, \"#\").concat(stateName, \"(\").concat([packet.sequenceId, packet.type(), packet.length()].join(','), \")\"));\n        }\n      }\n\n      if (!this._command) {\n        var marker = packet.peekByte(); // If it's an Err Packet, we should use it.\n\n        if (marker === 0xff) {\n          var error = Packets.Error.fromPacket(packet);\n          this.protocolError(error.message, error.code);\n        } else {\n          // Otherwise, it means it's some other unexpected packet.\n          this.protocolError('Unexpected packet while no commands in the queue', 'PROTOCOL_UNEXPECTED_PACKET');\n        }\n\n        this.close();\n        return;\n      }\n\n      var done = this._command.execute(packet, this);\n\n      if (done) {\n        this._command = this._commands.shift();\n\n        if (this._command) {\n          this.sequenceId = 0;\n          this.compressedSequenceId = 0;\n          this.handlePacket();\n        }\n      }\n    }\n  }, {\n    key: \"addCommand\",\n    value: function addCommand(cmd) {\n      // this.compressedSequenceId = 0;\n      // this.sequenceId = 0;\n      if (this.config.debug) {\n        var commandName = cmd.constructor.name; // eslint-disable-next-line no-console\n\n        console.log(\"Add command: \".concat(commandName));\n        cmd._commandName = commandName;\n      }\n\n      if (!this._command) {\n        this._command = cmd;\n        this.handlePacket();\n      } else {\n        this._commands.push(cmd);\n      }\n\n      return cmd;\n    }\n  }, {\n    key: \"format\",\n    value: function format(sql, values) {\n      if (typeof this.config.queryFormat === 'function') {\n        return this.config.queryFormat.call(this, sql, values, this.config.timezone);\n      }\n\n      var opts = {\n        sql: sql,\n        values: values\n      };\n\n      this._resolveNamedPlaceholders(opts);\n\n      return SqlString.format(opts.sql, opts.values, this.config.stringifyObjects, this.config.timezone);\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(value) {\n      return SqlString.escape(value, false, this.config.timezone);\n    }\n  }, {\n    key: \"escapeId\",\n    value: function escapeId(value) {\n      return SqlString.escapeId(value, false);\n    }\n  }, {\n    key: \"raw\",\n    value: function raw(sql) {\n      return SqlString.raw(sql);\n    }\n  }, {\n    key: \"_resolveNamedPlaceholders\",\n    value: function _resolveNamedPlaceholders(options) {\n      var unnamed;\n\n      if (this.config.namedPlaceholders || options.namedPlaceholders) {\n        if (Array.isArray(options.values)) {\n          // if an array is provided as the values, assume the conversion is not necessary.\n          // this allows the usage of unnamed placeholders even if the namedPlaceholders flag is enabled.\n          return;\n        }\n\n        if (convertNamedPlaceholders === null) {\n          convertNamedPlaceholders = require('named-placeholders')();\n        }\n\n        unnamed = convertNamedPlaceholders(options.sql, options.values);\n        options.sql = unnamed[0];\n        options.values = unnamed[1];\n      }\n    }\n  }, {\n    key: \"query\",\n    value: function query(sql, values, cb) {\n      var cmdQuery;\n\n      if (sql.constructor === Commands.Query) {\n        cmdQuery = sql;\n      } else {\n        cmdQuery = Connection.createQuery(sql, values, cb, this.config);\n      }\n\n      this._resolveNamedPlaceholders(cmdQuery);\n\n      var rawSql = this.format(cmdQuery.sql, cmdQuery.values !== undefined ? cmdQuery.values : []);\n      cmdQuery.sql = rawSql;\n      return this.addCommand(cmdQuery);\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this._paused = true;\n      this.stream.pause();\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      var packet;\n      this._paused = false;\n\n      while (packet = this._paused_packets.shift()) {\n        this.handlePacket(packet); // don't resume if packet hander paused connection\n\n        if (this._paused) {\n          return;\n        }\n      }\n\n      this.stream.resume();\n    } // TODO: named placeholders support\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(options, cb) {\n      if (typeof options === 'string') {\n        options = {\n          sql: options\n        };\n      }\n\n      return this.addCommand(new Commands.Prepare(options, cb));\n    }\n  }, {\n    key: \"unprepare\",\n    value: function unprepare(sql) {\n      var options = {};\n\n      if (typeof sql === 'object') {\n        options = sql;\n      } else {\n        options.sql = sql;\n      }\n\n      var key = Connection.statementKey(options);\n\n      var stmt = this._statements.get(key);\n\n      if (stmt) {\n        this._statements.del(key);\n\n        stmt.close();\n      }\n\n      return stmt;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(sql, values, cb) {\n      var options = {};\n\n      if (typeof sql === 'object') {\n        // execute(options, cb)\n        options = sql;\n\n        if (typeof values === 'function') {\n          cb = values;\n        } else {\n          options.values = options.values || values;\n        }\n      } else if (typeof values === 'function') {\n        // execute(sql, cb)\n        cb = values;\n        options.sql = sql;\n        options.values = undefined;\n      } else {\n        // execute(sql, values, cb)\n        options.sql = sql;\n        options.values = values;\n      }\n\n      this._resolveNamedPlaceholders(options); // check for values containing undefined\n\n\n      if (options.values) {\n        //If namedPlaceholder is not enabled and object is passed as bind parameters\n        if (!Array.isArray(options.values)) {\n          throw new TypeError('Bind parameters must be array if namedPlaceholders parameter is not enabled');\n        }\n\n        options.values.forEach(function (val) {\n          //If namedPlaceholder is not enabled and object is passed as bind parameters\n          if (!Array.isArray(options.values)) {\n            throw new TypeError('Bind parameters must be array if namedPlaceholders parameter is not enabled');\n          }\n\n          if (val === undefined) {\n            throw new TypeError('Bind parameters must not contain undefined. To pass SQL NULL specify JS null');\n          }\n\n          if (typeof val === 'function') {\n            throw new TypeError('Bind parameters must not contain function(s). To pass the body of a function as a string call .toString() first');\n          }\n        });\n      }\n\n      var executeCommand = new Commands.Execute(options, cb);\n      var prepareCommand = new Commands.Prepare(options, function (err, stmt) {\n        if (err) {\n          // skip execute command if prepare failed, we have main\n          // combined callback here\n          executeCommand.start = function () {\n            return null;\n          };\n\n          if (cb) {\n            cb(err);\n          } else {\n            executeCommand.emit('error', err);\n          }\n\n          executeCommand.emit('end');\n          return;\n        }\n\n        executeCommand.statement = stmt;\n      });\n      this.addCommand(prepareCommand);\n      this.addCommand(executeCommand);\n      return executeCommand;\n    }\n  }, {\n    key: \"changeUser\",\n    value: function changeUser(options, callback) {\n      if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      var charsetNumber = options.charset ? ConnectionConfig.getCharsetNumber(options.charset) : this.config.charsetNumber;\n      return this.addCommand(new Commands.ChangeUser({\n        user: options.user || this.config.user,\n        password: options.password || this.config.password,\n        passwordSha1: options.passwordSha1 || this.config.passwordSha1,\n        database: options.database || this.config.database,\n        timeout: options.timeout,\n        charsetNumber: charsetNumber,\n        currentConfig: this.config\n      }, function (err) {\n        if (err) {\n          err.fatal = true;\n        }\n\n        if (callback) {\n          callback(err);\n        }\n      }));\n    } // transaction helpers\n\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction(cb) {\n      return this.query('START TRANSACTION', cb);\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(cb) {\n      return this.query('COMMIT', cb);\n    }\n  }, {\n    key: \"rollback\",\n    value: function rollback(cb) {\n      return this.query('ROLLBACK', cb);\n    }\n  }, {\n    key: \"ping\",\n    value: function ping(cb) {\n      return this.addCommand(new Commands.Ping(cb));\n    }\n  }, {\n    key: \"_registerSlave\",\n    value: function _registerSlave(opts, cb) {\n      return this.addCommand(new Commands.RegisterSlave(opts, cb));\n    }\n  }, {\n    key: \"_binlogDump\",\n    value: function _binlogDump(opts, cb) {\n      return this.addCommand(new Commands.BinlogDump(opts, cb));\n    } // currently just alias to close\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.close();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n\n      this._closing = true;\n      this.stream.end();\n      this.addCommand = this._addCommandClosedState;\n    }\n  }, {\n    key: \"createBinlogStream\",\n    value: function createBinlogStream(opts) {\n      var _this6 = this;\n\n      // TODO: create proper stream class\n      // TODO: use through2\n      var test = 1;\n      var stream = new Readable({\n        objectMode: true\n      });\n\n      stream._read = function () {\n        return {\n          data: test++\n        };\n      };\n\n      this._registerSlave(opts, function () {\n        var dumpCmd = _this6._binlogDump(opts);\n\n        dumpCmd.on('event', function (ev) {\n          stream.push(ev);\n        });\n        dumpCmd.on('eof', function () {\n          stream.push(null); // if non-blocking, then close stream to prevent errors\n\n          if (opts.flags && opts.flags & 0x01) {\n            _this6.close();\n          }\n        }); // TODO: pipe errors as well\n      });\n\n      return stream;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(cb) {\n      if (!cb) {\n        return;\n      }\n\n      if (this._fatalError || this._protocolError) {\n        return cb(this._fatalError || this._protocolError);\n      }\n\n      if (this._handshakePacket) {\n        return cb(null, this);\n      }\n\n      var connectCalled = 0;\n\n      function callbackOnce(isErrorHandler) {\n        return function (param) {\n          if (!connectCalled) {\n            if (isErrorHandler) {\n              cb(param);\n            } else {\n              cb(null, param);\n            }\n          }\n\n          connectCalled = 1;\n        };\n      }\n\n      this.once('error', callbackOnce(true));\n      this.once('connect', callbackOnce(false));\n    } // ===================================\n    // outgoing server connection methods\n    // ===================================\n\n  }, {\n    key: \"writeColumns\",\n    value: function writeColumns(columns) {\n      var _this7 = this;\n\n      this.writePacket(Packets.ResultSetHeader.toPacket(columns.length));\n      columns.forEach(function (column) {\n        _this7.writePacket(Packets.ColumnDefinition.toPacket(column, _this7.serverConfig.encoding));\n      });\n      this.writeEof();\n    } // row is array of columns, not hash\n\n  }, {\n    key: \"writeTextRow\",\n    value: function writeTextRow(column) {\n      this.writePacket(Packets.TextRow.toPacket(column, this.serverConfig.encoding));\n    }\n  }, {\n    key: \"writeTextResult\",\n    value: function writeTextResult(rows, columns) {\n      var _this8 = this;\n\n      this.writeColumns(columns);\n      rows.forEach(function (row) {\n        var arrayRow = new Array(columns.length);\n        columns.forEach(function (column) {\n          arrayRow.push(row[column.name]);\n        });\n\n        _this8.writeTextRow(arrayRow);\n      });\n      this.writeEof();\n    }\n  }, {\n    key: \"writeEof\",\n    value: function writeEof(warnings, statusFlags) {\n      this.writePacket(Packets.EOF.toPacket(warnings, statusFlags));\n    }\n  }, {\n    key: \"writeOk\",\n    value: function writeOk(args) {\n      if (!args) {\n        args = {\n          affectedRows: 0\n        };\n      }\n\n      this.writePacket(Packets.OK.toPacket(args, this.serverConfig.encoding));\n    }\n  }, {\n    key: \"writeError\",\n    value: function writeError(args) {\n      // if we want to send error before initial hello was sent, use default encoding\n      var encoding = this.serverConfig ? this.serverConfig.encoding : 'cesu8';\n      this.writePacket(Packets.Error.toPacket(args, encoding));\n    }\n  }, {\n    key: \"serverHandshake\",\n    value: function serverHandshake(args) {\n      this.serverConfig = args;\n      this.serverConfig.encoding = CharsetToEncoding[this.serverConfig.characterSet];\n      return this.addCommand(new Commands.ServerHandshake(args));\n    } // ===============================================================\n\n  }, {\n    key: \"end\",\n    value: function end(callback) {\n      var _this9 = this;\n\n      if (this.config.isServer) {\n        this._closing = true;\n\n        var _quitCmd = new EventEmitter();\n\n        setImmediate(function () {\n          _this9.stream.end();\n\n          _quitCmd.emit('end');\n        });\n        return _quitCmd;\n      } // trigger error if more commands enqueued after end command\n\n\n      var quitCmd = this.addCommand(new Commands.Quit(callback));\n      this.addCommand = this._addCommandClosedState;\n      return quitCmd;\n    }\n  }], [{\n    key: \"createQuery\",\n    value: function createQuery(sql, values, cb, config) {\n      var options = {\n        rowsAsArray: config.rowsAsArray\n      };\n\n      if (typeof sql === 'object') {\n        // query(options, cb)\n        options = sql;\n\n        if (typeof values === 'function') {\n          cb = values;\n        } else if (values !== undefined) {\n          options.values = values;\n        }\n      } else if (typeof values === 'function') {\n        // query(sql, cb)\n        cb = values;\n        options.sql = sql;\n        options.values = undefined;\n      } else {\n        // query(sql, values, cb)\n        options.sql = sql;\n        options.values = values;\n      }\n\n      return new Commands.Query(options, cb);\n    }\n  }, {\n    key: \"statementKey\",\n    value: function statementKey(options) {\n      return \"\".concat(typeof options.nestTables, \"/\").concat(options.nestTables, \"/\").concat(options.rowsAsArray).concat(options.sql);\n    }\n  }]);\n\n  return Connection;\n}(EventEmitter);\n\nif (Tls.TLSSocket) {// not supported\n} else {\n  Connection.prototype.startTLS = function _startTLS(onSecure) {\n    var _this10 = this;\n\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n\n    var crypto = require('crypto');\n\n    var config = this.config;\n    var stream = this.stream;\n    var rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    var credentials = crypto.createCredentials({\n      key: config.ssl.key,\n      cert: config.ssl.cert,\n      passphrase: config.ssl.passphrase,\n      ca: config.ssl.ca,\n      ciphers: config.ssl.ciphers\n    });\n    var securePair = Tls.createSecurePair(credentials, false, true, rejectUnauthorized);\n\n    if (stream.ondata) {\n      stream.ondata = null;\n    }\n\n    stream.removeAllListeners('data');\n    stream.pipe(securePair.encrypted);\n    securePair.encrypted.pipe(stream);\n    securePair.cleartext.on('data', function (data) {\n      _this10.packetParser.execute(data);\n    });\n\n    this.write = function (buffer) {\n      securePair.cleartext.write(buffer);\n    };\n\n    securePair.on('secure', function () {\n      onSecure(rejectUnauthorized ? securePair.ssl.verifyError() : null);\n    });\n  };\n}\n\nmodule.exports = Connection;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/connection.js"],"names":["Net","require","Tls","Timers","EventEmitter","Readable","Queue","SqlString","LRU","PacketParser","Packets","Commands","ConnectionConfig","CharsetToEncoding","_connectionId","convertNamedPlaceholders","Connection","opts","config","stream","socketPath","connect","port","host","setKeepAlive","keepAliveInitialDelay","_internalId","_commands","_command","_paused","_paused_packets","_statements","max","maxPreparedStatements","dispose","key","statement","close","serverCapabilityFlags","authorized","sequenceId","compressedSequenceId","threadId","_handshakePacket","_fatalError","_protocolError","_outOfOrderPackets","clientEncoding","charsetNumber","on","_handleNetworkError","bind","packetParser","p","handlePacket","data","connectTimeout","clearTimeout","execute","_closing","Error","fatal","code","_notifyError","handshakeCommand","isServer","ClientHandshake","clientFlags","handshake","connectionId","emit","err","addCommand","serverEncoding","timeoutHandler","_handleTimeoutError","setTimeout","promiseImpl","PromiseConnection","cmd","onResult","removeAllListeners","_addCommandClosedState","write","errno","_handleFatalError","destroy","errorno","syscall","command","bubbleErrorToConnection","constructor","length","shift","_pool","buffer","result","numPackets","packet","MAX_PACKET_LENGTH","chunk","offset","header","writeHeader","debug","console","log","_commandName","stateName","_name","join","toString","_bumpSequenceId","slice","Buffer","from","onSecure","secureContext","createSecureContext","ca","ssl","cert","ciphers","passphrase","minVersion","rejectUnauthorized","secureEstablished","secureSocket","TLSSocket","requestCert","verifyError","_start","Stream","ondata","start","end","parent","message","push","expected","received","error","trace","commandName","type","marker","peekByte","fromPacket","protocolError","done","name","sql","values","queryFormat","call","timezone","_resolveNamedPlaceholders","format","stringifyObjects","value","escape","escapeId","raw","options","unnamed","namedPlaceholders","Array","isArray","cb","cmdQuery","Query","createQuery","rawSql","undefined","pause","resume","Prepare","statementKey","stmt","get","del","TypeError","forEach","val","executeCommand","Execute","prepareCommand","callback","charset","getCharsetNumber","ChangeUser","user","password","passwordSha1","database","timeout","currentConfig","query","Ping","RegisterSlave","BinlogDump","test","objectMode","_read","_registerSlave","dumpCmd","_binlogDump","ev","flags","connectCalled","callbackOnce","isErrorHandler","param","once","columns","writePacket","ResultSetHeader","toPacket","column","ColumnDefinition","serverConfig","encoding","writeEof","TextRow","rows","writeColumns","row","arrayRow","writeTextRow","warnings","statusFlags","EOF","args","affectedRows","OK","characterSet","ServerHandshake","quitCmd","setImmediate","Quit","rowsAsArray","nestTables","prototype","startTLS","_startTLS","crypto","credentials","createCredentials","securePair","createSecurePair","pipe","encrypted","cleartext","module","exports"],"mappings":"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","sourcesContent":["// This file was modified by Oracle on June 1, 2021.\n// The changes involve new logic to handle an additional ERR Packet sent by\n// the MySQL server when the connection is closed unexpectedly.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n// This file was modified by Oracle on June 17, 2021.\n// The changes involve logic to ensure the socket connection is closed when\n// there is a fatal error.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst Net = require('net');\nconst Tls = require('tls');\nconst Timers = require('timers');\nconst EventEmitter = require('events').EventEmitter;\nconst Readable = require('stream').Readable;\nconst Queue = require('denque');\nconst SqlString = require('sqlstring');\nconst LRU = require('lru-cache');\n\nconst PacketParser = require('./packet_parser.js');\nconst Packets = require('./packets/index.js');\nconst Commands = require('./commands/index.js');\nconst ConnectionConfig = require('./connection_config.js');\nconst CharsetToEncoding = require('./constants/charset_encodings.js');\n\nlet _connectionId = 0;\n\nlet convertNamedPlaceholders = null;\n\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.config = opts.config;\n    // TODO: fill defaults\n    // if no params, connect to /var/lib/mysql/mysql.sock ( /tmp/mysql.sock on OSX )\n    // if host is given, connect to host:3306\n    // TODO: use `/usr/local/mysql/bin/mysql_config --socket` output? as default socketPath\n    // if there is no host/port and no socketPath parameters?\n    if (!opts.config.stream) {\n      if (opts.config.socketPath) {\n        this.stream = Net.connect(opts.config.socketPath);\n      } else {\n        this.stream = Net.connect(\n          opts.config.port,\n          opts.config.host\n        );\n\n        // Enable keep-alive on the socket.  It's disabled by default, but the\n        // user can enable it and supply an initial delay.\n        this.stream.setKeepAlive(true, this.config.keepAliveInitialDelay);\n      }\n      // if stream is a function, treat it as \"stream agent / factory\"\n    } else if (typeof opts.config.stream === 'function')  {\n      this.stream = opts.config.stream(opts);\n    } else {\n      this.stream = opts.config.stream;\n    }\n\n    this._internalId = _connectionId++;\n    this._commands = new Queue();\n    this._command = null;\n    this._paused = false;\n    this._paused_packets = new Queue();\n    this._statements = new LRU({\n      max: this.config.maxPreparedStatements,\n      dispose: function(key, statement) {\n        statement.close();\n      }\n    });\n    this.serverCapabilityFlags = 0;\n    this.authorized = false;\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n    this.threadId = null;\n    this._handshakePacket = null;\n    this._fatalError = null;\n    this._protocolError = null;\n    this._outOfOrderPackets = [];\n    this.clientEncoding = CharsetToEncoding[this.config.charsetNumber];\n    this.stream.on('error', this._handleNetworkError.bind(this));\n    // see https://gist.github.com/khoomeister/4985691#use-that-instead-of-bind\n    this.packetParser = new PacketParser(p => {\n      this.handlePacket(p);\n    });\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n      this.packetParser.execute(data);\n    });\n    this.stream.on('close', () => {\n      // we need to set this flag everywhere where we want connection to close\n      if (this._closing) {\n        return;\n      }\n      if (!this._protocolError) {\n        // no particular error message before disconnect\n        this._protocolError = new Error(\n          'Connection lost: The server closed the connection.'\n        );\n        this._protocolError.fatal = true;\n        this._protocolError.code = 'PROTOCOL_CONNECTION_LOST';\n      }\n      this._notifyError(this._protocolError);\n    });\n    let handshakeCommand;\n    if (!this.config.isServer) {\n      handshakeCommand = new Commands.ClientHandshake(this.config.clientFlags);\n      handshakeCommand.on('end', () => {\n        // this happens when handshake finishes early either because there was\n        // some fatal error or the server sent an error packet instead of\n        // an hello packet (for example, 'Too many connactions' error)\n        if (!handshakeCommand.handshake || this._fatalError || this._protocolError) {\n          return;\n        }\n        this._handshakePacket = handshakeCommand.handshake;\n        this.threadId = handshakeCommand.handshake.connectionId;\n        this.emit('connect', handshakeCommand.handshake);\n      });\n      handshakeCommand.on('error', err => {\n        this._closing = true;\n        this._notifyError(err);\n      });\n      this.addCommand(handshakeCommand);\n    }\n    // in case there was no initiall handshake but we need to read sting, assume it utf-8\n    // most common example: \"Too many connections\" error ( packet is sent immediately on connection attempt, we don't know server encoding yet)\n    // will be overwrittedn with actial encoding value as soon as server handshake packet is received\n    this.serverEncoding = 'utf8';\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.connectTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.config.connectTimeout\n      );\n    }\n  }\n\n  promise(promiseImpl) {\n    const PromiseConnection = require('../promise').PromiseConnection;\n    return new PromiseConnection(this, promiseImpl);\n  }\n\n  _addCommandClosedState(cmd) {\n    const err = new Error(\n      \"Can't add new command when connection is in closed state\"\n    );\n    err.fatal = true;\n    if (cmd.onResult) {\n      cmd.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n\n  _handleFatalError(err) {\n    err.fatal = true;\n    // stop receiving packets\n    this.stream.removeAllListeners('data');\n    this.addCommand = this._addCommandClosedState;\n    this.write = () => {\n      this.emit('error', new Error(\"Can't write in closed state\"));\n    };\n    this._notifyError(err);\n    this._fatalError = err;\n  }\n\n  _handleNetworkError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    // Do not throw an error when a connection ends with a RST,ACK packet\n    if (err.errno === 'ECONNRESET' && this._closing) {\n      return;\n    }\n    this._handleFatalError(err);\n  }\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n    this._handleNetworkError(err);\n  }\n\n  // notify all commands in the queue and bubble error as connection \"error\"\n  // called on stream error or unexpected termination\n  _notifyError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    // prevent from emitting 'PROTOCOL_CONNECTION_LOST' after EPIPE or ECONNRESET\n    if (this._fatalError) {\n      return;\n    }\n    let command;\n    // if there is no active command, notify connection\n    // if there are commands and all of them have callbacks, pass error via callback\n    let bubbleErrorToConnection = !this._command;\n    if (this._command && this._command.onResult) {\n      this._command.onResult(err);\n      this._command = null;\n      // connection handshake is special because we allow it to be implicit\n      // if error happened during handshake, but there are others commands in queue\n      // then bubble error to other commands and not to connection\n    } else if (\n      !(\n        this._command &&\n        this._command.constructor === Commands.ClientHandshake &&\n        this._commands.length > 0\n      )\n    ) {\n      bubbleErrorToConnection = true;\n    }\n    while ((command = this._commands.shift())) {\n      if (command.onResult) {\n        command.onResult(err);\n      } else {\n        bubbleErrorToConnection = true;\n      }\n    }\n    // notify connection if some comands in the queue did not have callbacks\n    // or if this is pool connection ( so it can be removed from pool )\n    if (bubbleErrorToConnection || this._pool) {\n      this.emit('error', err);\n    }\n    // close connection after emitting the event in case of a fatal error\n    if (err.fatal) {\n      this.close();\n    }\n  }\n\n  write(buffer) {\n    const result = this.stream.write(buffer, err => {\n      if (err) {\n        this._handleNetworkError(err);\n      }\n    });\n\n    if (!result) {\n      this.stream.emit('pause');\n    }\n  }\n\n  // http://dev.mysql.com/doc/internals/en/sequence-id.html\n  //\n  // The sequence-id is incremented with each packet and may wrap around.\n  // It starts at 0 and is reset to 0 when a new command\n  // begins in the Command Phase.\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n  _resetSequenceId() {\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n  }\n\n  _bumpCompressedSequenceId(numPackets) {\n    this.compressedSequenceId += numPackets;\n    this.compressedSequenceId %= 256;\n  }\n\n  _bumpSequenceId(numPackets) {\n    this.sequenceId += numPackets;\n    this.sequenceId %= 256;\n  }\n\n  writePacket(packet) {\n    const MAX_PACKET_LENGTH = 16777215;\n    const length = packet.length();\n    let chunk, offset, header;\n    if (length < MAX_PACKET_LENGTH) {\n      packet.writeHeader(this.sequenceId);\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`\n        );\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${packet.buffer.toString('hex')}`\n        );\n      }\n      this._bumpSequenceId(1);\n      this.write(packet.buffer);\n    } else {\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== Writing large packet, raw content not written:`\n        );\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`\n        );\n      }\n      for (offset = 4; offset < 4 + length; offset += MAX_PACKET_LENGTH) {\n        chunk = packet.buffer.slice(offset, offset + MAX_PACKET_LENGTH);\n        if (chunk.length === MAX_PACKET_LENGTH) {\n          header = Buffer.from([0xff, 0xff, 0xff, this.sequenceId]);\n        } else {\n          header = Buffer.from([\n            chunk.length & 0xff,\n            (chunk.length >> 8) & 0xff,\n            (chunk.length >> 16) & 0xff,\n            this.sequenceId\n          ]);\n        }\n        this._bumpSequenceId(1);\n        this.write(header);\n        this.write(chunk);\n      }\n    }\n  }\n\n  // 0.11+ environment\n  startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n    const secureContext = Tls.createSecureContext({\n      ca: this.config.ssl.ca,\n      cert: this.config.ssl.cert,\n      ciphers: this.config.ssl.ciphers,\n      key: this.config.ssl.key,\n      passphrase: this.config.ssl.passphrase,\n      minVersion: this.config.ssl.minVersion\n    });\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    let secureEstablished = false;\n    const secureSocket = new Tls.TLSSocket(this.stream, {\n      rejectUnauthorized: rejectUnauthorized,\n      requestCert: true,\n      secureContext: secureContext,\n      isServer: false\n    });\n    // error handler for secure socket\n    secureSocket.on('_tlsError', err => {\n      if (secureEstablished) {\n        this._handleNetworkError(err);\n      } else {\n        onSecure(err);\n      }\n    });\n    secureSocket.on('secure', () => {\n      secureEstablished = true;\n      onSecure(rejectUnauthorized ? secureSocket.ssl.verifyError() : null);\n    });\n    secureSocket.on('data', data => {\n      this.packetParser.execute(data);\n    });\n    this.write = buffer => {\n      secureSocket.write(buffer);\n    };\n    // start TLS communications\n    secureSocket._start();\n  }\n\n  pipe() {\n    if (this.stream instanceof Net.Stream) {\n      this.stream.ondata = (data, start, end) => {\n        this.packetParser.execute(data, start, end);\n      };\n    } else {\n      this.stream.on('data', data => {\n        this.packetParser.execute(\n          data.parent,\n          data.offset,\n          data.offset + data.length\n        );\n      });\n    }\n  }\n\n  protocolError(message, code) {\n    // Starting with MySQL 8.0.24, if the client closes the connection\n    // unexpectedly, the server will send a last ERR Packet, which we can\n    // safely ignore.\n    // https://dev.mysql.com/worklog/task/?id=12999\n    if (this._closing) {\n      return;\n    }\n\n    const err = new Error(message);\n    err.fatal = true;\n    err.code = code || 'PROTOCOL_ERROR';\n    this.emit('error', err);\n  }\n\n  handlePacket(packet) {\n    if (this._paused) {\n      this._paused_packets.push(packet);\n      return;\n    }\n    if (packet) {\n      if (this.sequenceId !== packet.sequenceId) {\n        const err = new Error(\n          `Warning: got packets out of order. Expected ${this.sequenceId} but received ${packet.sequenceId}`\n        );\n        err.expected = this.sequenceId;\n        err.received = packet.sequenceId;\n        this.emit('warn', err); // REVIEW\n        // eslint-disable-next-line no-console\n        console.error(err.message);\n      }\n      this._bumpSequenceId(packet.numPackets);\n    }\n    if (this.config.debug) {\n      if (packet) {\n        // eslint-disable-next-line no-console\n        console.log(\n          ` raw: ${packet.buffer\n            .slice(packet.offset, packet.offset + packet.length())\n            .toString('hex')}`\n        );\n        // eslint-disable-next-line no-console\n        console.trace();\n        const commandName = this._command\n          ? this._command._commandName\n          : '(no command)';\n        const stateName = this._command\n          ? this._command.stateName()\n          : '(no command)';\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} ==> ${commandName}#${stateName}(${[packet.sequenceId, packet.type(), packet.length()].join(',')})`\n        );\n      }\n    }\n    if (!this._command) {\n      const marker = packet.peekByte();\n      // If it's an Err Packet, we should use it.\n      if (marker === 0xff) {\n        const error = Packets.Error.fromPacket(packet);\n        this.protocolError(error.message, error.code);\n      } else {\n        // Otherwise, it means it's some other unexpected packet.\n        this.protocolError(\n          'Unexpected packet while no commands in the queue',\n          'PROTOCOL_UNEXPECTED_PACKET'\n        );\n      }\n      this.close();\n      return;\n    }\n    const done = this._command.execute(packet, this);\n    if (done) {\n      this._command = this._commands.shift();\n      if (this._command) {\n        this.sequenceId = 0;\n        this.compressedSequenceId = 0;\n        this.handlePacket();\n      }\n    }\n  }\n\n  addCommand(cmd) {\n    // this.compressedSequenceId = 0;\n    // this.sequenceId = 0;\n    if (this.config.debug) {\n      const commandName = cmd.constructor.name;\n      // eslint-disable-next-line no-console\n      console.log(`Add command: ${commandName}`);\n      cmd._commandName = commandName;\n    }\n    if (!this._command) {\n      this._command = cmd;\n      this.handlePacket();\n    } else {\n      this._commands.push(cmd);\n    }\n    return cmd;\n  }\n\n  format(sql, values) {\n    if (typeof this.config.queryFormat === 'function') {\n      return this.config.queryFormat.call(\n        this,\n        sql,\n        values,\n        this.config.timezone\n      );\n    }\n    const opts = {\n      sql: sql,\n      values: values\n    };\n    this._resolveNamedPlaceholders(opts);\n    return SqlString.format(\n      opts.sql,\n      opts.values,\n      this.config.stringifyObjects,\n      this.config.timezone\n    );\n  }\n\n  escape(value) {\n    return SqlString.escape(value, false, this.config.timezone);\n  }\n\n  escapeId(value) {\n    return SqlString.escapeId(value, false);\n  }\n\n  raw(sql) {\n    return SqlString.raw(sql);\n  }\n\n  _resolveNamedPlaceholders(options) {\n    let unnamed;\n    if (this.config.namedPlaceholders || options.namedPlaceholders) {\n      if (Array.isArray(options.values)) {\n        // if an array is provided as the values, assume the conversion is not necessary.\n        // this allows the usage of unnamed placeholders even if the namedPlaceholders flag is enabled.\n        return\n      }\n      if (convertNamedPlaceholders === null) {\n        convertNamedPlaceholders = require('named-placeholders')();\n      }\n      unnamed = convertNamedPlaceholders(options.sql, options.values);\n      options.sql = unnamed[0];\n      options.values = unnamed[1];\n    }\n  }\n\n  query(sql, values, cb) {\n    let cmdQuery;\n    if (sql.constructor === Commands.Query) {\n      cmdQuery = sql;\n    } else {\n      cmdQuery = Connection.createQuery(sql, values, cb, this.config);\n    }\n    this._resolveNamedPlaceholders(cmdQuery);\n    const rawSql = this.format(cmdQuery.sql, cmdQuery.values !== undefined ? cmdQuery.values : []);\n    cmdQuery.sql = rawSql;\n    return this.addCommand(cmdQuery);\n  }\n\n  pause() {\n    this._paused = true;\n    this.stream.pause();\n  }\n\n  resume() {\n    let packet;\n    this._paused = false;\n    while ((packet = this._paused_packets.shift())) {\n      this.handlePacket(packet);\n      // don't resume if packet hander paused connection\n      if (this._paused) {\n        return;\n      }\n    }\n    this.stream.resume();\n  }\n\n  // TODO: named placeholders support\n  prepare(options, cb) {\n    if (typeof options === 'string') {\n      options = { sql: options };\n    }\n    return this.addCommand(new Commands.Prepare(options, cb));\n  }\n\n  unprepare(sql) {\n    let options = {};\n    if (typeof sql === 'object') {\n      options = sql;\n    } else {\n      options.sql = sql;\n    }\n    const key = Connection.statementKey(options);\n    const stmt = this._statements.get(key);\n    if (stmt) {\n      this._statements.del(key);\n      stmt.close();\n    }\n    return stmt;\n  }\n\n  execute(sql, values, cb) {\n    let options = {};\n    if (typeof sql === 'object') {\n      // execute(options, cb)\n      options = sql;\n      if (typeof values === 'function') {\n        cb = values;\n      } else {\n        options.values = options.values || values;\n      }\n    } else if (typeof values === 'function') {\n      // execute(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // execute(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    this._resolveNamedPlaceholders(options);\n    // check for values containing undefined\n    if (options.values) {\n      //If namedPlaceholder is not enabled and object is passed as bind parameters\n      if (!Array.isArray(options.values)) {\n        throw new TypeError(\n          'Bind parameters must be array if namedPlaceholders parameter is not enabled'\n        );\n      }\n      options.values.forEach(val => {\n        //If namedPlaceholder is not enabled and object is passed as bind parameters\n        if (!Array.isArray(options.values)) {\n          throw new TypeError(\n            'Bind parameters must be array if namedPlaceholders parameter is not enabled'\n          );\n        }\n        if (val === undefined) {\n          throw new TypeError(\n            'Bind parameters must not contain undefined. To pass SQL NULL specify JS null'\n          );\n        }\n        if (typeof val === 'function') {\n          throw new TypeError(\n            'Bind parameters must not contain function(s). To pass the body of a function as a string call .toString() first'\n          );\n        }\n      });\n    }\n    const executeCommand = new Commands.Execute(options, cb);\n    const prepareCommand = new Commands.Prepare(options, (err, stmt) => {\n      if (err) {\n        // skip execute command if prepare failed, we have main\n        // combined callback here\n        executeCommand.start = function() {\n          return null;\n        };\n        if (cb) {\n          cb(err);\n        } else {\n          executeCommand.emit('error', err);\n        }\n        executeCommand.emit('end');\n        return;\n      }\n      executeCommand.statement = stmt;\n    });\n    this.addCommand(prepareCommand);\n    this.addCommand(executeCommand);\n    return executeCommand;\n  }\n\n  changeUser(options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    const charsetNumber = options.charset\n      ? ConnectionConfig.getCharsetNumber(options.charset)\n      : this.config.charsetNumber;\n    return this.addCommand(\n      new Commands.ChangeUser(\n        {\n          user: options.user || this.config.user,\n          password: options.password || this.config.password,\n          passwordSha1: options.passwordSha1 || this.config.passwordSha1,\n          database: options.database || this.config.database,\n          timeout: options.timeout,\n          charsetNumber: charsetNumber,\n          currentConfig: this.config\n        },\n        err => {\n          if (err) {\n            err.fatal = true;\n          }\n          if (callback) {\n            callback(err);\n          }\n        }\n      )\n    );\n  }\n\n  // transaction helpers\n  beginTransaction(cb) {\n    return this.query('START TRANSACTION', cb);\n  }\n\n  commit(cb) {\n    return this.query('COMMIT', cb);\n  }\n\n  rollback(cb) {\n    return this.query('ROLLBACK', cb);\n  }\n\n  ping(cb) {\n    return this.addCommand(new Commands.Ping(cb));\n  }\n\n  _registerSlave(opts, cb) {\n    return this.addCommand(new Commands.RegisterSlave(opts, cb));\n  }\n\n  _binlogDump(opts, cb) {\n    return this.addCommand(new Commands.BinlogDump(opts, cb));\n  }\n\n  // currently just alias to close\n  destroy() {\n    this.close();\n  }\n\n  close() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this._closing = true;\n    this.stream.end();\n    this.addCommand = this._addCommandClosedState;\n  }\n\n  createBinlogStream(opts) {\n    // TODO: create proper stream class\n    // TODO: use through2\n    let test = 1;\n    const stream = new Readable({ objectMode: true });\n    stream._read = function() {\n      return {\n        data: test++\n      };\n    };\n    this._registerSlave(opts, () => {\n      const dumpCmd = this._binlogDump(opts);\n      dumpCmd.on('event', ev => {\n        stream.push(ev);\n      });\n      dumpCmd.on('eof', () => {\n        stream.push(null);\n        // if non-blocking, then close stream to prevent errors\n        if (opts.flags && opts.flags & 0x01) {\n          this.close();\n        }\n      });\n      // TODO: pipe errors as well\n    });\n    return stream;\n  }\n\n  connect(cb) {\n    if (!cb) {\n      return;\n    }\n    if (this._fatalError || this._protocolError) {\n      return cb(this._fatalError || this._protocolError);\n    }\n    if (this._handshakePacket) {\n      return cb(null, this);\n    }\n    let connectCalled = 0;\n    function callbackOnce(isErrorHandler) {\n      return function(param) {\n        if (!connectCalled) {\n          if (isErrorHandler) {\n            cb(param);\n          } else {\n            cb(null, param);\n          }\n        }\n        connectCalled = 1;\n      };\n    }\n    this.once('error', callbackOnce(true));\n    this.once('connect', callbackOnce(false));\n  }\n\n  // ===================================\n  // outgoing server connection methods\n  // ===================================\n  writeColumns(columns) {\n    this.writePacket(Packets.ResultSetHeader.toPacket(columns.length));\n    columns.forEach(column => {\n      this.writePacket(\n        Packets.ColumnDefinition.toPacket(column, this.serverConfig.encoding)\n      );\n    });\n    this.writeEof();\n  }\n\n  // row is array of columns, not hash\n  writeTextRow(column) {\n    this.writePacket(\n      Packets.TextRow.toPacket(column, this.serverConfig.encoding)\n    );\n  }\n\n  writeTextResult(rows, columns) {\n    this.writeColumns(columns);\n    rows.forEach(row => {\n      const arrayRow = new Array(columns.length);\n      columns.forEach(column => {\n        arrayRow.push(row[column.name]);\n      });\n      this.writeTextRow(arrayRow);\n    });\n    this.writeEof();\n  }\n\n  writeEof(warnings, statusFlags) {\n    this.writePacket(Packets.EOF.toPacket(warnings, statusFlags));\n  }\n\n  writeOk(args) {\n    if (!args) {\n      args = { affectedRows: 0 };\n    }\n    this.writePacket(Packets.OK.toPacket(args, this.serverConfig.encoding));\n  }\n\n  writeError(args) {\n    // if we want to send error before initial hello was sent, use default encoding\n    const encoding = this.serverConfig ? this.serverConfig.encoding : 'cesu8';\n    this.writePacket(Packets.Error.toPacket(args, encoding));\n  }\n\n  serverHandshake(args) {\n    this.serverConfig = args;\n    this.serverConfig.encoding =\n      CharsetToEncoding[this.serverConfig.characterSet];\n    return this.addCommand(new Commands.ServerHandshake(args));\n  }\n\n  // ===============================================================\n  end(callback) {\n    if (this.config.isServer) {\n      this._closing = true;\n      const quitCmd = new EventEmitter();\n      setImmediate(() => {\n        this.stream.end();\n        quitCmd.emit('end');\n      });\n      return quitCmd;\n    }\n    // trigger error if more commands enqueued after end command\n    const quitCmd = this.addCommand(new Commands.Quit(callback));\n    this.addCommand = this._addCommandClosedState;\n    return quitCmd;\n  }\n\n  static createQuery(sql, values, cb, config) {\n    let options = {\n      rowsAsArray: config.rowsAsArray\n    };\n    if (typeof sql === 'object') {\n      // query(options, cb)\n      options = sql;\n      if (typeof values === 'function') {\n        cb = values;\n      } else if (values !== undefined) {\n        options.values = values;\n      }\n    } else if (typeof values === 'function') {\n      // query(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // query(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    return new Commands.Query(options, cb);\n  }\n\n  static statementKey(options) {\n    return (\n      `${typeof options.nestTables}/${options.nestTables}/${options.rowsAsArray}${options.sql}`\n    );\n  }\n}\n\nif (Tls.TLSSocket) {\n  // not supported\n} else {\n  Connection.prototype.startTLS = function _startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n    const crypto = require('crypto');\n    const config = this.config;\n    const stream = this.stream;\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    const credentials = crypto.createCredentials({\n      key: config.ssl.key,\n      cert: config.ssl.cert,\n      passphrase: config.ssl.passphrase,\n      ca: config.ssl.ca,\n      ciphers: config.ssl.ciphers\n    });\n    const securePair = Tls.createSecurePair(\n      credentials,\n      false,\n      true,\n      rejectUnauthorized\n    );\n\n    if (stream.ondata) {\n      stream.ondata = null;\n    }\n    stream.removeAllListeners('data');\n    stream.pipe(securePair.encrypted);\n    securePair.encrypted.pipe(stream);\n    securePair.cleartext.on('data', data => {\n      this.packetParser.execute(data);\n    });\n    this.write = function(buffer) {\n      securePair.cleartext.write(buffer);\n    };\n    securePair.on('secure', () => {\n      onSecure(rejectUnauthorized ? securePair.ssl.verifyError() : null);\n    });\n  };\n}\n\nmodule.exports = Connection;\n"]},"metadata":{},"sourceType":"script"}