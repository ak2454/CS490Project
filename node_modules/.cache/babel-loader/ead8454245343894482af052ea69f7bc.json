{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar process = require('process');\n\nvar mysql = require('../index.js');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar PoolConnection = require('./pool_connection.js');\n\nvar Queue = require('denque');\n\nvar Connection = require('./connection.js');\n\nfunction spliceConnection(queue, connection) {\n  var len = queue.length;\n\n  for (var i = 0; i < len; i++) {\n    if (queue.get(i) === connection) {\n      queue.removeOne(i);\n      break;\n    }\n  }\n}\n\nvar Pool = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Pool, _EventEmitter);\n\n  var _super = _createSuper(Pool);\n\n  function Pool(options) {\n    var _this;\n\n    _classCallCheck(this, Pool);\n\n    _this = _super.call(this);\n    _this.config = options.config;\n    _this.config.connectionConfig.pool = _assertThisInitialized(_this);\n    _this._allConnections = new Queue();\n    _this._freeConnections = new Queue();\n    _this._connectionQueue = new Queue();\n    _this._closed = false;\n    return _this;\n  }\n\n  _createClass(Pool, [{\n    key: \"promise\",\n    value: function promise(promiseImpl) {\n      var PromisePool = require('../promise').PromisePool;\n\n      return new PromisePool(this, promiseImpl);\n    }\n  }, {\n    key: \"getConnection\",\n    value: function getConnection(cb) {\n      var _this2 = this;\n\n      if (this._closed) {\n        return process.nextTick(function () {\n          return cb(new Error('Pool is closed.'));\n        });\n      }\n\n      var connection;\n\n      if (this._freeConnections.length > 0) {\n        connection = this._freeConnections.shift();\n        this.emit('acquire', connection);\n        return process.nextTick(function () {\n          return cb(null, connection);\n        });\n      }\n\n      if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n        connection = new PoolConnection(this, {\n          config: this.config.connectionConfig\n        });\n\n        this._allConnections.push(connection);\n\n        return connection.connect(function (err) {\n          if (_this2._closed) {\n            return cb(new Error('Pool is closed.'));\n          }\n\n          if (err) {\n            return cb(err);\n          }\n\n          _this2.emit('connection', connection);\n\n          _this2.emit('acquire', connection);\n\n          return cb(null, connection);\n        });\n      }\n\n      if (!this.config.waitForConnections) {\n        return process.nextTick(function () {\n          return cb(new Error('No connections available.'));\n        });\n      }\n\n      if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n        return cb(new Error('Queue limit reached.'));\n      }\n\n      this.emit('enqueue');\n      return this._connectionQueue.push(cb);\n    }\n  }, {\n    key: \"releaseConnection\",\n    value: function releaseConnection(connection) {\n      var cb;\n\n      if (!connection._pool) {\n        // The connection has been removed from the pool and is no longer good.\n        if (this._connectionQueue.length) {\n          cb = this._connectionQueue.shift();\n          process.nextTick(this.getConnection.bind(this, cb));\n        }\n      } else if (this._connectionQueue.length) {\n        cb = this._connectionQueue.shift();\n        process.nextTick(cb.bind(null, null, connection));\n      } else {\n        this._freeConnections.push(connection);\n\n        this.emit('release', connection);\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end(cb) {\n      this._closed = true;\n\n      if (typeof cb !== 'function') {\n        cb = function cb(err) {\n          if (err) {\n            throw err;\n          }\n        };\n      }\n\n      var calledBack = false;\n      var closedConnections = 0;\n      var connection;\n\n      var endCB = function (err) {\n        if (calledBack) {\n          return;\n        }\n\n        if (err || ++closedConnections >= this._allConnections.length) {\n          calledBack = true;\n          cb(err);\n          return;\n        }\n      }.bind(this);\n\n      if (this._allConnections.length === 0) {\n        endCB();\n        return;\n      }\n\n      for (var i = 0; i < this._allConnections.length; i++) {\n        connection = this._allConnections.get(i);\n\n        connection._realEnd(endCB);\n      }\n    }\n  }, {\n    key: \"query\",\n    value: function query(sql, values, cb) {\n      var cmdQuery = Connection.createQuery(sql, values, cb, this.config.connectionConfig);\n\n      if (typeof cmdQuery.namedPlaceholders === 'undefined') {\n        cmdQuery.namedPlaceholders = this.config.connectionConfig.namedPlaceholders;\n      }\n\n      this.getConnection(function (err, conn) {\n        if (err) {\n          if (typeof cmdQuery.onResult === 'function') {\n            cmdQuery.onResult(err);\n          } else {\n            cmdQuery.emit('error', err);\n          }\n\n          return;\n        }\n\n        try {\n          conn.query(cmdQuery).once('end', function () {\n            conn.release();\n          });\n        } catch (e) {\n          conn.release();\n          throw e;\n        }\n      });\n      return cmdQuery;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(sql, values, cb) {\n      // TODO construct execute command first here and pass it to connection.execute\n      // so that polymorphic arguments logic is there in one place\n      if (typeof values === 'function') {\n        cb = values;\n        values = [];\n      }\n\n      this.getConnection(function (err, conn) {\n        if (err) {\n          return cb(err);\n        }\n\n        try {\n          conn.execute(sql, values, cb).once('end', function () {\n            conn.release();\n          });\n        } catch (e) {\n          conn.release();\n          throw e;\n        }\n      });\n    }\n  }, {\n    key: \"_removeConnection\",\n    value: function _removeConnection(connection) {\n      // Remove connection from all connections\n      spliceConnection(this._allConnections, connection); // Remove connection from free connections\n\n      spliceConnection(this._freeConnections, connection);\n      this.releaseConnection(connection);\n    }\n  }, {\n    key: \"format\",\n    value: function format(sql, values) {\n      return mysql.format(sql, values, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(value) {\n      return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n    }\n  }, {\n    key: \"escapeId\",\n    value: function escapeId(value) {\n      return mysql.escapeId(value, false);\n    }\n  }]);\n\n  return Pool;\n}(EventEmitter);\n\nmodule.exports = Pool;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/pool.js"],"names":["process","require","mysql","EventEmitter","PoolConnection","Queue","Connection","spliceConnection","queue","connection","len","length","i","get","removeOne","Pool","options","config","connectionConfig","pool","_allConnections","_freeConnections","_connectionQueue","_closed","promiseImpl","PromisePool","cb","nextTick","Error","shift","emit","connectionLimit","push","connect","err","waitForConnections","queueLimit","_pool","getConnection","bind","calledBack","closedConnections","endCB","_realEnd","sql","values","cmdQuery","createQuery","namedPlaceholders","conn","onResult","query","once","release","e","execute","releaseConnection","format","stringifyObjects","timezone","value","escape","escapeId","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst process = require('process');\nconst mysql = require('../index.js');\n\nconst EventEmitter = require('events').EventEmitter;\nconst PoolConnection = require('./pool_connection.js');\nconst Queue = require('denque');\nconst Connection = require('./connection.js');\n\nfunction spliceConnection(queue, connection) {\n  const len = queue.length;\n  for (let i = 0; i < len; i++) {\n    if (queue.get(i) === connection) {\n      queue.removeOne(i);\n      break;\n    }\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options) {\n    super();\n    this.config = options.config;\n    this.config.connectionConfig.pool = this;\n    this._allConnections = new Queue();\n    this._freeConnections = new Queue();\n    this._connectionQueue = new Queue();\n    this._closed = false;\n  }\n\n  promise(promiseImpl) {\n    const PromisePool = require('../promise').PromisePool;\n    return new PromisePool(this, promiseImpl);\n  }\n\n  getConnection(cb) {\n    if (this._closed) {\n      return process.nextTick(() => cb(new Error('Pool is closed.')));\n    }\n    let connection;\n    if (this._freeConnections.length > 0) {\n      connection = this._freeConnections.shift();\n      this.emit('acquire', connection);\n      return process.nextTick(() => cb(null, connection));\n    }\n    if (\n      this.config.connectionLimit === 0 ||\n      this._allConnections.length < this.config.connectionLimit\n    ) {\n      connection = new PoolConnection(this, {\n        config: this.config.connectionConfig\n      });\n      this._allConnections.push(connection);\n      return connection.connect(err => {\n        if (this._closed) {\n          return cb(new Error('Pool is closed.'));\n        }\n        if (err) {\n          return cb(err);\n        }\n        this.emit('connection', connection);\n        this.emit('acquire', connection);\n        return cb(null, connection);\n      });\n    }\n    if (!this.config.waitForConnections) {\n      return process.nextTick(() => cb(new Error('No connections available.')));\n    }\n    if (\n      this.config.queueLimit &&\n      this._connectionQueue.length >= this.config.queueLimit\n    ) {\n      return cb(new Error('Queue limit reached.'));\n    }\n    this.emit('enqueue');\n    return this._connectionQueue.push(cb);\n  }\n\n  releaseConnection(connection) {\n    let cb;\n    if (!connection._pool) {\n      // The connection has been removed from the pool and is no longer good.\n      if (this._connectionQueue.length) {\n        cb = this._connectionQueue.shift();\n        process.nextTick(this.getConnection.bind(this, cb));\n      }\n    } else if (this._connectionQueue.length) {\n      cb = this._connectionQueue.shift();\n      process.nextTick(cb.bind(null, null, connection));\n    } else {\n      this._freeConnections.push(connection);\n      this.emit('release', connection);\n    }\n  }\n\n  end(cb) {\n    this._closed = true;\n    if (typeof cb !== 'function') {\n      cb = function(err) {\n        if (err) {\n          throw err;\n        }\n      };\n    }\n    let calledBack = false;\n    let closedConnections = 0;\n    let connection;\n    const endCB = function(err) {\n      if (calledBack) {\n        return;\n      }\n      if (err || ++closedConnections >= this._allConnections.length) {\n        calledBack = true;\n        cb(err);\n        return;\n      }\n    }.bind(this);\n    if (this._allConnections.length === 0) {\n      endCB();\n      return;\n    }\n    for (let i = 0; i < this._allConnections.length; i++) {\n      connection = this._allConnections.get(i);\n      connection._realEnd(endCB);\n    }\n  }\n\n  query(sql, values, cb) {\n    const cmdQuery = Connection.createQuery(\n      sql,\n      values,\n      cb,\n      this.config.connectionConfig\n    );\n    if (typeof cmdQuery.namedPlaceholders === 'undefined') {\n      cmdQuery.namedPlaceholders = this.config.connectionConfig.namedPlaceholders;\n    }\n    this.getConnection((err, conn) => {\n      if (err) {\n        if (typeof cmdQuery.onResult === 'function') {\n          cmdQuery.onResult(err);\n        } else {\n          cmdQuery.emit('error', err);\n        }\n        return;\n      }\n      try {\n        conn.query(cmdQuery).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n    return cmdQuery;\n  }\n\n  execute(sql, values, cb) {\n    // TODO construct execute command first here and pass it to connection.execute\n    // so that polymorphic arguments logic is there in one place\n    if (typeof values === 'function') {\n      cb = values;\n      values = [];\n    }\n    this.getConnection((err, conn) => {\n      if (err) {\n        return cb(err);\n      }\n      try {\n        conn.execute(sql, values, cb).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n  }\n\n  _removeConnection(connection) {\n    // Remove connection from all connections\n    spliceConnection(this._allConnections, connection);\n    // Remove connection from free connections\n    spliceConnection(this._freeConnections, connection);\n    this.releaseConnection(connection);\n  }\n\n  format(sql, values) {\n    return mysql.format(\n      sql,\n      values,\n      this.config.connectionConfig.stringifyObjects,\n      this.config.connectionConfig.timezone\n    );\n  }\n\n  escape(value) {\n    return mysql.escape(\n      value,\n      this.config.connectionConfig.stringifyObjects,\n      this.config.connectionConfig.timezone\n    );\n  }\n\n  escapeId(value) {\n    return mysql.escapeId(value, false);\n  }\n}\n\nmodule.exports = Pool;\n"]},"metadata":{},"sourceType":"script"}