{"ast":null,"code":"// This file was modified by Oracle on June 17, 2021.\n// Handshake errors are now maked as fatal and the corresponding events are\n// emitted in the command instance itself.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Command = require('./command.js');\n\nvar Packets = require('../packets/index.js');\n\nvar ClientConstants = require('../constants/client.js');\n\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nvar auth41 = require('../auth_41.js');\n\nfunction flagNames(flags) {\n  var res = [];\n\n  for (var c in ClientConstants) {\n    if (flags & ClientConstants[c]) {\n      res.push(c.replace(/_/g, ' ').toLowerCase());\n    }\n  }\n\n  return res;\n}\n\nvar ClientHandshake = /*#__PURE__*/function (_Command) {\n  _inherits(ClientHandshake, _Command);\n\n  var _super = _createSuper(ClientHandshake);\n\n  function ClientHandshake(clientFlags) {\n    var _this;\n\n    _classCallCheck(this, ClientHandshake);\n\n    _this = _super.call(this);\n    _this.handshake = null;\n    _this.clientFlags = clientFlags;\n    return _this;\n  }\n\n  _createClass(ClientHandshake, [{\n    key: \"start\",\n    value: function start() {\n      return ClientHandshake.prototype.handshakeInit;\n    }\n  }, {\n    key: \"sendSSLRequest\",\n    value: function sendSSLRequest(connection) {\n      var sslRequest = new Packets.SSLRequest(this.clientFlags, connection.config.charsetNumber);\n      connection.writePacket(sslRequest.toPacket());\n    }\n  }, {\n    key: \"sendCredentials\",\n    value: function sendCredentials(connection) {\n      if (connection.config.debug) {\n        // eslint-disable-next-line\n        console.log('Sending handshake packet: flags:%d=(%s)', this.clientFlags, flagNames(this.clientFlags).join(', '));\n      }\n\n      this.user = connection.config.user;\n      this.password = connection.config.password;\n      this.passwordSha1 = connection.config.passwordSha1;\n      this.database = connection.config.database;\n      this.autPluginName = this.handshake.autPluginName;\n      var handshakeResponse = new Packets.HandshakeResponse({\n        flags: this.clientFlags,\n        user: this.user,\n        database: this.database,\n        password: this.password,\n        passwordSha1: this.passwordSha1,\n        charsetNumber: connection.config.charsetNumber,\n        authPluginData1: this.handshake.authPluginData1,\n        authPluginData2: this.handshake.authPluginData2,\n        compress: connection.config.compress,\n        connectAttributes: connection.config.connectAttributes\n      });\n      connection.writePacket(handshakeResponse.toPacket());\n    }\n  }, {\n    key: \"calculateNativePasswordAuthToken\",\n    value: function calculateNativePasswordAuthToken(authPluginData) {\n      // TODO: dont split into authPluginData1 and authPluginData2, instead join when 1 & 2 received\n      var authPluginData1 = authPluginData.slice(0, 8);\n      var authPluginData2 = authPluginData.slice(8, 20);\n      var authToken;\n\n      if (this.passwordSha1) {\n        authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, authPluginData1, authPluginData2);\n      } else {\n        authToken = auth41.calculateToken(this.password, authPluginData1, authPluginData2);\n      }\n\n      return authToken;\n    }\n  }, {\n    key: \"handshakeInit\",\n    value: function handshakeInit(helloPacket, connection) {\n      var _this2 = this;\n\n      this.on('error', function (e) {\n        connection._fatalError = e;\n        connection._protocolError = e;\n      });\n      this.handshake = Packets.Handshake.fromPacket(helloPacket);\n\n      if (connection.config.debug) {\n        // eslint-disable-next-line\n        console.log('Server hello packet: capability flags:%d=(%s)', this.handshake.capabilityFlags, flagNames(this.handshake.capabilityFlags).join(', '));\n      }\n\n      connection.serverCapabilityFlags = this.handshake.capabilityFlags;\n      connection.serverEncoding = CharsetToEncoding[this.handshake.characterSet];\n      connection.connectionId = this.handshake.connectionId;\n      var serverSSLSupport = this.handshake.capabilityFlags & ClientConstants.SSL; // use compression only if requested by client and supported by server\n\n      connection.config.compress = connection.config.compress && this.handshake.capabilityFlags & ClientConstants.COMPRESS;\n      this.clientFlags = this.clientFlags | connection.config.compress;\n\n      if (connection.config.ssl) {\n        // client requires SSL but server does not support it\n        if (!serverSSLSupport) {\n          var err = new Error('Server does not support secure connnection');\n          err.code = 'HANDSHAKE_NO_SSL_SUPPORT';\n          err.fatal = true;\n          this.emit('error', err);\n          return false;\n        } // send ssl upgrade request and immediately upgrade connection to secure\n\n\n        this.clientFlags |= ClientConstants.SSL;\n        this.sendSSLRequest(connection);\n        connection.startTLS(function (err) {\n          // after connection is secure\n          if (err) {\n            // SSL negotiation error are fatal\n            err.code = 'HANDSHAKE_SSL_ERROR';\n            err.fatal = true;\n\n            _this2.emit('error', err);\n\n            return;\n          } // rest of communication is encrypted\n\n\n          _this2.sendCredentials(connection);\n        });\n      } else {\n        this.sendCredentials(connection);\n      }\n\n      return ClientHandshake.prototype.handshakeResult;\n    }\n  }, {\n    key: \"handshakeResult\",\n    value: function handshakeResult(packet, connection) {\n      var marker = packet.peekByte();\n\n      if (marker === 0xfe || marker === 1) {\n        var authSwitch = require('./auth_switch');\n\n        try {\n          if (marker === 1) {\n            authSwitch.authSwitchRequestMoreData(packet, connection, this);\n          } else {\n            authSwitch.authSwitchRequest(packet, connection, this);\n          }\n\n          return ClientHandshake.prototype.handshakeResult;\n        } catch (err) {\n          // Authentication errors are fatal\n          err.code = 'AUTH_SWITCH_PLUGIN_ERROR';\n          err.fatal = true;\n\n          if (this.onResult) {\n            this.onResult(err);\n          } else {\n            this.emit('error', err);\n          }\n\n          return null;\n        }\n      }\n\n      if (marker !== 0) {\n        var err = new Error('Unexpected packet during handshake phase'); // Unknown handshake errors are fatal\n\n        err.code = 'HANDSHAKE_UNKNOWN_ERROR';\n        err.fatal = true;\n\n        if (this.onResult) {\n          this.onResult(err);\n        } else {\n          this.emit('error', err);\n        }\n\n        return null;\n      } // this should be called from ClientHandshake command only\n      // and skipped when called from ChangeUser command\n\n\n      if (!connection.authorized) {\n        connection.authorized = true;\n\n        if (connection.config.compress) {\n          var enableCompression = require('../compressed_protocol.js').enableCompression;\n\n          enableCompression(connection);\n        }\n      }\n\n      if (this.onResult) {\n        this.onResult(null);\n      }\n\n      return null;\n    }\n  }]);\n\n  return ClientHandshake;\n}(Command);\n\nmodule.exports = ClientHandshake;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/commands/client_handshake.js"],"names":["Command","require","Packets","ClientConstants","CharsetToEncoding","auth41","flagNames","flags","res","c","push","replace","toLowerCase","ClientHandshake","clientFlags","handshake","prototype","handshakeInit","connection","sslRequest","SSLRequest","config","charsetNumber","writePacket","toPacket","debug","console","log","join","user","password","passwordSha1","database","autPluginName","handshakeResponse","HandshakeResponse","authPluginData1","authPluginData2","compress","connectAttributes","authPluginData","slice","authToken","calculateTokenFromPasswordSha","calculateToken","helloPacket","on","e","_fatalError","_protocolError","Handshake","fromPacket","capabilityFlags","serverCapabilityFlags","serverEncoding","characterSet","connectionId","serverSSLSupport","SSL","COMPRESS","ssl","err","Error","code","fatal","emit","sendSSLRequest","startTLS","sendCredentials","handshakeResult","packet","marker","peekByte","authSwitch","authSwitchRequestMoreData","authSwitchRequest","onResult","authorized","enableCompression","module","exports"],"mappings":"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","sourcesContent":["// This file was modified by Oracle on June 17, 2021.\n// Handshake errors are now maked as fatal and the corresponding events are\n// emitted in the command instance itself.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\nconst ClientConstants = require('../constants/client.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\nconst auth41 = require('../auth_41.js');\n\nfunction flagNames(flags) {\n  const res = [];\n  for (const c in ClientConstants) {\n    if (flags & ClientConstants[c]) {\n      res.push(c.replace(/_/g, ' ').toLowerCase());\n    }\n  }\n  return res;\n}\n\nclass ClientHandshake extends Command {\n  constructor(clientFlags) {\n    super();\n    this.handshake = null;\n    this.clientFlags = clientFlags;\n  }\n\n  start() {\n    return ClientHandshake.prototype.handshakeInit;\n  }\n\n  sendSSLRequest(connection) {\n    const sslRequest = new Packets.SSLRequest(\n      this.clientFlags,\n      connection.config.charsetNumber\n    );\n    connection.writePacket(sslRequest.toPacket());\n  }\n\n  sendCredentials(connection) {\n    if (connection.config.debug) {\n      // eslint-disable-next-line\n      console.log(\n        'Sending handshake packet: flags:%d=(%s)',\n        this.clientFlags,\n        flagNames(this.clientFlags).join(', ')\n      );\n    }\n    this.user = connection.config.user;\n    this.password = connection.config.password;\n    this.passwordSha1 = connection.config.passwordSha1;\n    this.database = connection.config.database;\n    this.autPluginName = this.handshake.autPluginName;\n    const handshakeResponse = new Packets.HandshakeResponse({\n      flags: this.clientFlags,\n      user: this.user,\n      database: this.database,\n      password: this.password,\n      passwordSha1: this.passwordSha1,\n      charsetNumber: connection.config.charsetNumber,\n      authPluginData1: this.handshake.authPluginData1,\n      authPluginData2: this.handshake.authPluginData2,\n      compress: connection.config.compress,\n      connectAttributes: connection.config.connectAttributes\n    });\n    connection.writePacket(handshakeResponse.toPacket());\n  }\n\n  calculateNativePasswordAuthToken(authPluginData) {\n    // TODO: dont split into authPluginData1 and authPluginData2, instead join when 1 & 2 received\n    const authPluginData1 = authPluginData.slice(0, 8);\n    const authPluginData2 = authPluginData.slice(8, 20);\n    let authToken;\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(\n        this.passwordSha1,\n        authPluginData1,\n        authPluginData2\n      );\n    } else {\n      authToken = auth41.calculateToken(\n        this.password,\n        authPluginData1,\n        authPluginData2\n      );\n    }\n    return authToken;\n  }\n\n  handshakeInit(helloPacket, connection) {\n    this.on('error', e => {\n      connection._fatalError = e;\n      connection._protocolError = e;\n    });\n    this.handshake = Packets.Handshake.fromPacket(helloPacket);\n    if (connection.config.debug) {\n      // eslint-disable-next-line\n      console.log(\n        'Server hello packet: capability flags:%d=(%s)',\n        this.handshake.capabilityFlags,\n        flagNames(this.handshake.capabilityFlags).join(', ')\n      );\n    }\n    connection.serverCapabilityFlags = this.handshake.capabilityFlags;\n    connection.serverEncoding = CharsetToEncoding[this.handshake.characterSet];\n    connection.connectionId = this.handshake.connectionId;\n    const serverSSLSupport =\n      this.handshake.capabilityFlags & ClientConstants.SSL;\n    // use compression only if requested by client and supported by server\n    connection.config.compress =\n      connection.config.compress &&\n      this.handshake.capabilityFlags & ClientConstants.COMPRESS;\n    this.clientFlags = this.clientFlags | connection.config.compress;\n    if (connection.config.ssl) {\n      // client requires SSL but server does not support it\n      if (!serverSSLSupport) {\n        const err = new Error('Server does not support secure connnection');\n        err.code = 'HANDSHAKE_NO_SSL_SUPPORT';\n        err.fatal = true;\n        this.emit('error', err);\n        return false;\n      }\n      // send ssl upgrade request and immediately upgrade connection to secure\n      this.clientFlags |= ClientConstants.SSL;\n      this.sendSSLRequest(connection);\n      connection.startTLS(err => {\n        // after connection is secure\n        if (err) {\n          // SSL negotiation error are fatal\n          err.code = 'HANDSHAKE_SSL_ERROR';\n          err.fatal = true;\n          this.emit('error', err);\n          return;\n        }\n        // rest of communication is encrypted\n        this.sendCredentials(connection);\n      });\n    } else {\n      this.sendCredentials(connection);\n    }\n    return ClientHandshake.prototype.handshakeResult;\n  }\n\n  handshakeResult(packet, connection) {\n    const marker = packet.peekByte();\n    if (marker === 0xfe || marker === 1) {\n      const authSwitch = require('./auth_switch');\n      try {\n        if (marker === 1) {\n          authSwitch.authSwitchRequestMoreData(packet, connection, this);\n        } else {\n          authSwitch.authSwitchRequest(packet, connection, this);\n        }\n        return ClientHandshake.prototype.handshakeResult;\n      } catch (err) {\n        // Authentication errors are fatal\n        err.code = 'AUTH_SWITCH_PLUGIN_ERROR';\n        err.fatal = true;\n\n        if (this.onResult) {\n          this.onResult(err);\n        } else {\n          this.emit('error', err);\n        }\n        return null;\n      }\n    }\n    if (marker !== 0) {\n      const err = new Error('Unexpected packet during handshake phase');\n      // Unknown handshake errors are fatal\n      err.code = 'HANDSHAKE_UNKNOWN_ERROR';\n      err.fatal = true;\n\n      if (this.onResult) {\n        this.onResult(err);\n      } else {\n        this.emit('error', err);\n      }\n      return null;\n    }\n    // this should be called from ClientHandshake command only\n    // and skipped when called from ChangeUser command\n    if (!connection.authorized) {\n      connection.authorized = true;\n      if (connection.config.compress) {\n        const enableCompression = require('../compressed_protocol.js')\n          .enableCompression;\n        enableCompression(connection);\n      }\n    }\n    if (this.onResult) {\n      this.onResult(null);\n    }\n    return null;\n  }\n}\nmodule.exports = ClientHandshake;\n"]},"metadata":{},"sourceType":"script"}