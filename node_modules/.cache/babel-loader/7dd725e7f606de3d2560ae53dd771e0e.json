{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar net = require('net');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Connection = require('./connection');\n\nvar ConnectionConfig = require('./connection_config'); // TODO: inherit Server from net.Server\n\n\nvar Server = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Server, _EventEmitter);\n\n  var _super = _createSuper(Server);\n\n  function Server() {\n    var _this;\n\n    _classCallCheck(this, Server);\n\n    _this = _super.call(this);\n    _this.connections = [];\n    _this._server = net.createServer(_this._handleConnection.bind(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Server, [{\n    key: \"_handleConnection\",\n    value: function _handleConnection(socket) {\n      var connectionConfig = new ConnectionConfig({\n        stream: socket,\n        isServer: true\n      });\n      var connection = new Connection({\n        config: connectionConfig\n      });\n      this.emit('connection', connection);\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(port) {\n      this._port = port;\n\n      this._server.listen.apply(this._server, arguments);\n\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close(cb) {\n      this._server.close(cb);\n    }\n  }]);\n\n  return Server;\n}(EventEmitter);\n\nmodule.exports = Server;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/server.js"],"names":["net","require","EventEmitter","Connection","ConnectionConfig","Server","connections","_server","createServer","_handleConnection","bind","socket","connectionConfig","stream","isServer","connection","config","emit","port","_port","listen","apply","arguments","cb","close","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YAAvC;;AAEA,IAAMC,UAAU,GAAGF,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,qBAAD,CAAhC,C,CAEA;;;IACMI,M;;;;;AACJ,oBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,WAAL,GAAmB,EAAnB;AACA,UAAKC,OAAL,GAAeP,GAAG,CAACQ,YAAJ,CAAiB,MAAKC,iBAAL,CAAuBC,IAAvB,+BAAjB,CAAf;AAHY;AAIb;;;;WAED,2BAAkBC,MAAlB,EAA0B;AACxB,UAAMC,gBAAgB,GAAG,IAAIR,gBAAJ,CAAqB;AAC5CS,QAAAA,MAAM,EAAEF,MADoC;AAE5CG,QAAAA,QAAQ,EAAE;AAFkC,OAArB,CAAzB;AAIA,UAAMC,UAAU,GAAG,IAAIZ,UAAJ,CAAe;AAAEa,QAAAA,MAAM,EAAEJ;AAAV,OAAf,CAAnB;AACA,WAAKK,IAAL,CAAU,YAAV,EAAwBF,UAAxB;AACD;;;WAED,gBAAOG,IAAP,EAAa;AACX,WAAKC,KAAL,GAAaD,IAAb;;AACA,WAAKX,OAAL,CAAaa,MAAb,CAAoBC,KAApB,CAA0B,KAAKd,OAA/B,EAAwCe,SAAxC;;AACA,aAAO,IAAP;AACD;;;WAED,eAAMC,EAAN,EAAU;AACR,WAAKhB,OAAL,CAAaiB,KAAb,CAAmBD,EAAnB;AACD;;;;EAxBkBrB,Y;;AA2BrBuB,MAAM,CAACC,OAAP,GAAiBrB,MAAjB","sourcesContent":["'use strict';\n\nconst net = require('net');\nconst EventEmitter = require('events').EventEmitter;\n\nconst Connection = require('./connection');\nconst ConnectionConfig = require('./connection_config');\n\n// TODO: inherit Server from net.Server\nclass Server extends EventEmitter {\n  constructor() {\n    super();\n    this.connections = [];\n    this._server = net.createServer(this._handleConnection.bind(this));\n  }\n\n  _handleConnection(socket) {\n    const connectionConfig = new ConnectionConfig({\n      stream: socket,\n      isServer: true\n    });\n    const connection = new Connection({ config: connectionConfig });\n    this.emit('connection', connection);\n  }\n\n  listen(port) {\n    this._port = port;\n    this._server.listen.apply(this._server, arguments);\n    return this;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n}\n\nmodule.exports = Server;\n"]},"metadata":{},"sourceType":"script"}