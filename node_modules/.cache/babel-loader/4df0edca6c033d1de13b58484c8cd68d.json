{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar process = require('process');\n\nvar Timers = require('timers');\n\nvar Readable = require('stream').Readable;\n\nvar Command = require('./command.js');\n\nvar Packets = require('../packets/index.js');\n\nvar getTextParser = require('../parsers/text_parser.js');\n\nvar ServerStatus = require('../constants/server_status.js');\n\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nvar EmptyPacket = new Packets.Packet(0, Buffer.allocUnsafe(4), 0, 4); // http://dev.mysql.com/doc/internals/en/com-query.html\n\nvar Query = /*#__PURE__*/function (_Command) {\n  _inherits(Query, _Command);\n\n  var _super = _createSuper(Query);\n\n  function Query(options, callback) {\n    var _this;\n\n    _classCallCheck(this, Query);\n\n    _this = _super.call(this);\n    _this.sql = options.sql;\n    _this.values = options.values;\n    _this._queryOptions = options;\n    _this.namedPlaceholders = options.namedPlaceholders || false;\n    _this.onResult = callback;\n    _this.timeout = options.timeout;\n    _this.queryTimeout = null;\n    _this._fieldCount = 0;\n    _this._rowParser = null;\n    _this._fields = [];\n    _this._rows = [];\n    _this._receivedFieldsCount = 0;\n    _this._resultIndex = 0;\n    _this._localStream = null;\n\n    _this._unpipeStream = function () {};\n\n    _this._streamFactory = options.infileStreamFactory;\n    _this._connection = null;\n    return _this;\n  }\n\n  _createClass(Query, [{\n    key: \"then\",\n    value: function then() {\n      var err = \"You have tried to call .then(), .catch(), or invoked await on the result of query that is not a promise, which is a programming error. Try calling con.promise().query(), or require('mysql2/promise') instead of 'mysql2' for a promise-compatible version of the query interface. To learn how to use async/await or Promises check out documentation at https://www.npmjs.com/package/mysql2#using-promise-wrapper, or the mysql2 documentation at https://github.com/sidorares/node-mysql2/tree/master/documentation/Promise-Wrapper.md\"; // eslint-disable-next-line\n\n      console.log(err);\n      throw new Error(err);\n    }\n  }, {\n    key: \"start\",\n    value: function start(packet, connection) {\n      if (connection.config.debug) {\n        // eslint-disable-next-line\n        console.log('        Sending query command: %s', this.sql);\n      }\n\n      this._connection = connection;\n      this.options = Object.assign({}, connection.config, this._queryOptions);\n\n      this._setTimeout();\n\n      var cmdPacket = new Packets.Query(this.sql, connection.config.charsetNumber);\n      connection.writePacket(cmdPacket.toPacket(1));\n      return Query.prototype.resultsetHeader;\n    }\n  }, {\n    key: \"done\",\n    value: function done() {\n      var _this2 = this;\n\n      this._unpipeStream(); // if all ready timeout, return null directly\n\n\n      if (this.timeout && !this.queryTimeout) {\n        return null;\n      } // else clear timer\n\n\n      if (this.queryTimeout) {\n        Timers.clearTimeout(this.queryTimeout);\n        this.queryTimeout = null;\n      }\n\n      if (this.onResult) {\n        var rows, fields;\n\n        if (this._resultIndex === 0) {\n          rows = this._rows[0];\n          fields = this._fields[0];\n        } else {\n          rows = this._rows;\n          fields = this._fields;\n        }\n\n        if (fields) {\n          process.nextTick(function () {\n            _this2.onResult(null, rows, fields);\n          });\n        } else {\n          process.nextTick(function () {\n            _this2.onResult(null, rows);\n          });\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"doneInsert\",\n    value: function doneInsert(rs) {\n      if (this._localStreamError) {\n        if (this.onResult) {\n          this.onResult(this._localStreamError, rs);\n        } else {\n          this.emit('error', this._localStreamError);\n        }\n\n        return null;\n      }\n\n      this._rows.push(rs);\n\n      this._fields.push(void 0);\n\n      this.emit('fields', void 0);\n      this.emit('result', rs);\n\n      if (rs.serverStatus & ServerStatus.SERVER_MORE_RESULTS_EXISTS) {\n        this._resultIndex++;\n        return this.resultsetHeader;\n      }\n\n      return this.done();\n    }\n  }, {\n    key: \"resultsetHeader\",\n    value: function resultsetHeader(packet, connection) {\n      var rs = new Packets.ResultSetHeader(packet, connection);\n      this._fieldCount = rs.fieldCount;\n\n      if (connection.config.debug) {\n        // eslint-disable-next-line\n        console.log(\"        Resultset header received, expecting \".concat(rs.fieldCount, \" column definition packets\"));\n      }\n\n      if (this._fieldCount === 0) {\n        return this.doneInsert(rs);\n      }\n\n      if (this._fieldCount === null) {\n        return this._streamLocalInfile(connection, rs.infileName);\n      }\n\n      this._receivedFieldsCount = 0;\n\n      this._rows.push([]);\n\n      this._fields.push([]);\n\n      return this.readField;\n    }\n  }, {\n    key: \"_streamLocalInfile\",\n    value: function _streamLocalInfile(connection, path) {\n      var _this3 = this;\n\n      if (this._streamFactory) {\n        this._localStream = this._streamFactory(path);\n      } else {\n        this._localStreamError = new Error(\"As a result of LOCAL INFILE command server wants to read \".concat(path, \" file, but as of v2.0 you must provide streamFactory option returning ReadStream.\"));\n        connection.writePacket(EmptyPacket);\n        return this.infileOk;\n      }\n\n      var onConnectionError = function onConnectionError() {\n        _this3._unpipeStream();\n      };\n\n      var onDrain = function onDrain() {\n        _this3._localStream.resume();\n      };\n\n      var onPause = function onPause() {\n        _this3._localStream.pause();\n      };\n\n      var onData = function onData(data) {\n        var dataWithHeader = Buffer.allocUnsafe(data.length + 4);\n        data.copy(dataWithHeader, 4);\n        connection.writePacket(new Packets.Packet(0, dataWithHeader, 0, dataWithHeader.length));\n      };\n\n      var onEnd = function onEnd() {\n        connection.removeListener('error', onConnectionError);\n        connection.writePacket(EmptyPacket);\n      };\n\n      var onError = function onError(err) {\n        _this3._localStreamError = err;\n        connection.removeListener('error', onConnectionError);\n        connection.writePacket(EmptyPacket);\n      };\n\n      this._unpipeStream = function () {\n        connection.stream.removeListener('pause', onPause);\n        connection.stream.removeListener('drain', onDrain);\n\n        _this3._localStream.removeListener('data', onData);\n\n        _this3._localStream.removeListener('end', onEnd);\n\n        _this3._localStream.removeListener('error', onError);\n      };\n\n      connection.stream.on('pause', onPause);\n      connection.stream.on('drain', onDrain);\n\n      this._localStream.on('data', onData);\n\n      this._localStream.on('end', onEnd);\n\n      this._localStream.on('error', onError);\n\n      connection.once('error', onConnectionError);\n      return this.infileOk;\n    }\n  }, {\n    key: \"readField\",\n    value: function readField(packet, connection) {\n      this._receivedFieldsCount++; // Often there is much more data in the column definition than in the row itself\n      // If you set manually _fields[0] to array of ColumnDefinition's (from previous call)\n      // you can 'cache' result of parsing. Field packets still received, but ignored in that case\n      // this is the reason _receivedFieldsCount exist (otherwise we could just use current length of fields array)\n\n      if (this._fields[this._resultIndex].length !== this._fieldCount) {\n        var field = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n\n        this._fields[this._resultIndex].push(field);\n\n        if (connection.config.debug) {\n          /* eslint-disable no-console */\n          console.log('        Column definition:');\n          console.log(\"          name: \".concat(field.name));\n          console.log(\"          type: \".concat(field.columnType));\n          console.log(\"         flags: \".concat(field.flags));\n          /* eslint-enable no-console */\n        }\n      } // last field received\n\n\n      if (this._receivedFieldsCount === this._fieldCount) {\n        var fields = this._fields[this._resultIndex];\n        this.emit('fields', fields);\n        this._rowParser = getTextParser(fields, this.options, connection.config);\n        return Query.prototype.fieldsEOF;\n      }\n\n      return Query.prototype.readField;\n    }\n  }, {\n    key: \"fieldsEOF\",\n    value: function fieldsEOF(packet, connection) {\n      // check EOF\n      if (!packet.isEOF()) {\n        return connection.protocolError('Expected EOF packet');\n      }\n\n      return this.row;\n    }\n  }, {\n    key: \"row\",\n    value: function row(packet) {\n      if (packet.isEOF()) {\n        var status = packet.eofStatusFlags();\n        var moreResults = status & ServerStatus.SERVER_MORE_RESULTS_EXISTS;\n\n        if (moreResults) {\n          this._resultIndex++;\n          return Query.prototype.resultsetHeader;\n        }\n\n        return this.done();\n      }\n\n      var row;\n\n      try {\n        row = new this._rowParser(packet, this._fields[this._resultIndex], this.options, CharsetToEncoding);\n      } catch (err) {\n        this._localStreamError = err;\n        return this.doneInsert(null);\n      }\n\n      if (this.onResult) {\n        this._rows[this._resultIndex].push(row);\n      } else {\n        this.emit('result', row);\n      }\n\n      return Query.prototype.row;\n    }\n  }, {\n    key: \"infileOk\",\n    value: function infileOk(packet, connection) {\n      var rs = new Packets.ResultSetHeader(packet, connection);\n      return this.doneInsert(rs);\n    }\n  }, {\n    key: \"stream\",\n    value: function stream(options) {\n      var _this4 = this;\n\n      options = options || {};\n      options.objectMode = true;\n      var stream = new Readable(options);\n\n      stream._read = function () {\n        _this4._connection && _this4._connection.resume();\n      };\n\n      this.on('result', function (row) {\n        if (!stream.push(row)) {\n          _this4._connection.pause();\n        }\n\n        stream.emit('result', row); // replicate old emitter\n      });\n      this.on('error', function (err) {\n        stream.emit('error', err); // Pass on any errors\n      });\n      this.on('end', function () {\n        stream.push(null); // pushing null, indicating EOF\n\n        stream.emit('close'); // notify readers that query has completed\n      });\n      this.on('fields', function (fields) {\n        stream.emit('fields', fields); // replicate old emitter\n      });\n      return stream;\n    }\n  }, {\n    key: \"_setTimeout\",\n    value: function _setTimeout() {\n      if (this.timeout) {\n        var timeoutHandler = this._handleTimeoutError.bind(this);\n\n        this.queryTimeout = Timers.setTimeout(timeoutHandler, this.timeout);\n      }\n    }\n  }, {\n    key: \"_handleTimeoutError\",\n    value: function _handleTimeoutError() {\n      if (this.queryTimeout) {\n        Timers.clearTimeout(this.queryTimeout);\n        this.queryTimeout = null;\n      }\n\n      var err = new Error('Query inactivity timeout');\n      err.errorno = 'PROTOCOL_SEQUENCE_TIMEOUT';\n      err.code = 'PROTOCOL_SEQUENCE_TIMEOUT';\n      err.syscall = 'query';\n\n      if (this.onResult) {\n        this.onResult(err);\n      } else {\n        this.emit('error', err);\n      }\n    }\n  }]);\n\n  return Query;\n}(Command);\n\nQuery.prototype.catch = Query.prototype.then;\nmodule.exports = Query;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/commands/query.js"],"names":["process","require","Timers","Readable","Command","Packets","getTextParser","ServerStatus","CharsetToEncoding","EmptyPacket","Packet","Buffer","allocUnsafe","Query","options","callback","sql","values","_queryOptions","namedPlaceholders","onResult","timeout","queryTimeout","_fieldCount","_rowParser","_fields","_rows","_receivedFieldsCount","_resultIndex","_localStream","_unpipeStream","_streamFactory","infileStreamFactory","_connection","err","console","log","Error","packet","connection","config","debug","Object","assign","_setTimeout","cmdPacket","charsetNumber","writePacket","toPacket","prototype","resultsetHeader","clearTimeout","rows","fields","nextTick","rs","_localStreamError","emit","push","serverStatus","SERVER_MORE_RESULTS_EXISTS","done","ResultSetHeader","fieldCount","doneInsert","_streamLocalInfile","infileName","readField","path","infileOk","onConnectionError","onDrain","resume","onPause","pause","onData","data","dataWithHeader","length","copy","onEnd","removeListener","onError","stream","on","once","field","ColumnDefinition","clientEncoding","name","columnType","flags","fieldsEOF","isEOF","protocolError","row","status","eofStatusFlags","moreResults","objectMode","_read","timeoutHandler","_handleTimeoutError","bind","setTimeout","errorno","code","syscall","catch","then","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst process = require('process');\nconst Timers = require('timers');\n\nconst Readable = require('stream').Readable;\n\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\nconst getTextParser = require('../parsers/text_parser.js');\nconst ServerStatus = require('../constants/server_status.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nconst EmptyPacket = new Packets.Packet(0, Buffer.allocUnsafe(4), 0, 4);\n\n// http://dev.mysql.com/doc/internals/en/com-query.html\nclass Query extends Command {\n  constructor(options, callback) {\n    super();\n    this.sql = options.sql;\n    this.values = options.values;\n    this._queryOptions = options;\n    this.namedPlaceholders = options.namedPlaceholders || false;\n    this.onResult = callback;\n    this.timeout = options.timeout;\n    this.queryTimeout = null;\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._fields = [];\n    this._rows = [];\n    this._receivedFieldsCount = 0;\n    this._resultIndex = 0;\n    this._localStream = null;\n    this._unpipeStream = function() {};\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n\n  then() {\n    const err =\n      \"You have tried to call .then(), .catch(), or invoked await on the result of query that is not a promise, which is a programming error. Try calling con.promise().query(), or require('mysql2/promise') instead of 'mysql2' for a promise-compatible version of the query interface. To learn how to use async/await or Promises check out documentation at https://www.npmjs.com/package/mysql2#using-promise-wrapper, or the mysql2 documentation at https://github.com/sidorares/node-mysql2/tree/master/documentation/Promise-Wrapper.md\";\n    // eslint-disable-next-line\n    console.log(err);\n    throw new Error(err);\n  }\n\n  start(packet, connection) {\n    if (connection.config.debug) {\n      // eslint-disable-next-line\n      console.log('        Sending query command: %s', this.sql);\n    }\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._queryOptions);\n    this._setTimeout();\n\n    const cmdPacket = new Packets.Query(\n      this.sql,\n      connection.config.charsetNumber\n    );\n    connection.writePacket(cmdPacket.toPacket(1));\n    return Query.prototype.resultsetHeader;\n  }\n\n  done() {\n    this._unpipeStream();\n    // if all ready timeout, return null directly\n    if (this.timeout && !this.queryTimeout) {\n      return null;\n    }\n    // else clear timer\n    if (this.queryTimeout) {\n      Timers.clearTimeout(this.queryTimeout);\n      this.queryTimeout = null;\n    }\n    if (this.onResult) {\n      let rows, fields;\n      if (this._resultIndex === 0) {\n        rows = this._rows[0];\n        fields = this._fields[0];\n      } else {\n        rows = this._rows;\n        fields = this._fields;\n      }\n      if (fields) {\n        process.nextTick(() => {\n          this.onResult(null, rows, fields);\n        });\n      } else {\n        process.nextTick(() => {\n          this.onResult(null, rows);\n        });\n      }\n    }\n    return null;\n  }\n\n  doneInsert(rs) {\n    if (this._localStreamError) {\n      if (this.onResult) {\n        this.onResult(this._localStreamError, rs);\n      } else {\n        this.emit('error', this._localStreamError);\n      }\n      return null;\n    }\n    this._rows.push(rs);\n    this._fields.push(void 0);\n    this.emit('fields', void 0);\n    this.emit('result', rs);\n    if (rs.serverStatus & ServerStatus.SERVER_MORE_RESULTS_EXISTS) {\n      this._resultIndex++;\n      return this.resultsetHeader;\n    }\n    return this.done();\n  }\n\n  resultsetHeader(packet, connection) {\n    const rs = new Packets.ResultSetHeader(packet, connection);\n    this._fieldCount = rs.fieldCount;\n    if (connection.config.debug) {\n      // eslint-disable-next-line\n      console.log(\n        `        Resultset header received, expecting ${rs.fieldCount} column definition packets`\n      );\n    }\n    if (this._fieldCount === 0) {\n      return this.doneInsert(rs);\n    }\n    if (this._fieldCount === null) {\n      return this._streamLocalInfile(connection, rs.infileName);\n    }\n    this._receivedFieldsCount = 0;\n    this._rows.push([]);\n    this._fields.push([]);\n    return this.readField;\n  }\n\n  _streamLocalInfile(connection, path) {\n    if (this._streamFactory) {\n      this._localStream = this._streamFactory(path);\n    } else {\n      this._localStreamError = new Error(\n        `As a result of LOCAL INFILE command server wants to read ${path} file, but as of v2.0 you must provide streamFactory option returning ReadStream.`\n      );\n      connection.writePacket(EmptyPacket);\n      return this.infileOk;\n    }\n\n    const onConnectionError = () => {\n      this._unpipeStream();\n    };\n    const onDrain = () => {\n      this._localStream.resume();\n    };\n    const onPause = () => {\n      this._localStream.pause();\n    };\n    const onData = function(data) {\n      const dataWithHeader = Buffer.allocUnsafe(data.length + 4);\n      data.copy(dataWithHeader, 4);\n      connection.writePacket(\n        new Packets.Packet(0, dataWithHeader, 0, dataWithHeader.length)\n      );\n    };\n    const onEnd = () => {\n      connection.removeListener('error', onConnectionError);\n      connection.writePacket(EmptyPacket);\n    };\n    const onError = err => {\n      this._localStreamError = err;\n      connection.removeListener('error', onConnectionError);\n      connection.writePacket(EmptyPacket);\n    };\n    this._unpipeStream = () => {\n      connection.stream.removeListener('pause', onPause);\n      connection.stream.removeListener('drain', onDrain);\n      this._localStream.removeListener('data', onData);\n      this._localStream.removeListener('end', onEnd);\n      this._localStream.removeListener('error', onError);\n    };\n    connection.stream.on('pause', onPause);\n    connection.stream.on('drain', onDrain);\n    this._localStream.on('data', onData);\n    this._localStream.on('end', onEnd);\n    this._localStream.on('error', onError);\n    connection.once('error', onConnectionError);\n    return this.infileOk;\n  }\n\n  readField(packet, connection) {\n    this._receivedFieldsCount++;\n    // Often there is much more data in the column definition than in the row itself\n    // If you set manually _fields[0] to array of ColumnDefinition's (from previous call)\n    // you can 'cache' result of parsing. Field packets still received, but ignored in that case\n    // this is the reason _receivedFieldsCount exist (otherwise we could just use current length of fields array)\n    if (this._fields[this._resultIndex].length !== this._fieldCount) {\n      const field = new Packets.ColumnDefinition(\n        packet,\n        connection.clientEncoding\n      );\n      this._fields[this._resultIndex].push(field);\n      if (connection.config.debug) {\n        /* eslint-disable no-console */\n        console.log('        Column definition:');\n        console.log(`          name: ${field.name}`);\n        console.log(`          type: ${field.columnType}`);\n        console.log(`         flags: ${field.flags}`);\n        /* eslint-enable no-console */\n      }\n    }\n    // last field received\n    if (this._receivedFieldsCount === this._fieldCount) {\n      const fields = this._fields[this._resultIndex];\n      this.emit('fields', fields);\n      this._rowParser = getTextParser(fields, this.options, connection.config);\n      return Query.prototype.fieldsEOF;\n    }\n    return Query.prototype.readField;\n  }\n\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n    return this.row;\n  }\n\n  row(packet) {\n    if (packet.isEOF()) {\n      const status = packet.eofStatusFlags();\n      const moreResults = status & ServerStatus.SERVER_MORE_RESULTS_EXISTS;\n      if (moreResults) {\n        this._resultIndex++;\n        return Query.prototype.resultsetHeader;\n      }\n      return this.done();\n    }\n    let row;\n    try {\n      row = new this._rowParser(\n        packet,\n        this._fields[this._resultIndex],\n        this.options,\n        CharsetToEncoding\n      );\n    } catch (err) {\n      this._localStreamError = err;\n      return this.doneInsert(null);\n    }\n    if (this.onResult) {\n      this._rows[this._resultIndex].push(row);\n    } else {\n      this.emit('result', row);\n    }\n    return Query.prototype.row;\n  }\n\n  infileOk(packet, connection) {\n    const rs = new Packets.ResultSetHeader(packet, connection);\n    return this.doneInsert(rs);\n  }\n\n  stream(options) {\n    options = options || {};\n    options.objectMode = true;\n    const stream = new Readable(options);\n    stream._read = () => {\n      this._connection && this._connection.resume();\n    };\n    this.on('result', row => {\n      if (!stream.push(row)) {\n        this._connection.pause();\n      }\n      stream.emit('result', row); // replicate old emitter\n    });\n    this.on('error', err => {\n      stream.emit('error', err); // Pass on any errors\n    });\n    this.on('end', () => {\n      stream.push(null); // pushing null, indicating EOF\n      stream.emit('close'); // notify readers that query has completed\n    });\n    this.on('fields', fields => {\n      stream.emit('fields', fields); // replicate old emitter\n    });\n    return stream;\n  }\n\n  _setTimeout() {\n    if (this.timeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.queryTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.timeout\n      );\n    }\n  }\n\n  _handleTimeoutError() {\n    if (this.queryTimeout) {\n      Timers.clearTimeout(this.queryTimeout);\n      this.queryTimeout = null;\n    }\n    \n    const err = new Error('Query inactivity timeout');\n    err.errorno = 'PROTOCOL_SEQUENCE_TIMEOUT';\n    err.code = 'PROTOCOL_SEQUENCE_TIMEOUT';\n    err.syscall = 'query';\n\n    if (this.onResult) {\n      this.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n}\n\nQuery.prototype.catch = Query.prototype.then;\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script"}