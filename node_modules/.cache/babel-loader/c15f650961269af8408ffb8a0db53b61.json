{"ast":null,"code":"'use strict';\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar process = require('process');\n\nvar Pool = require('./pool.js');\n\nvar PoolConfig = require('./pool_config.js');\n\nvar Connection = require('./connection.js');\n\nvar EventEmitter = require('events').EventEmitter;\n/**\n * Selector\n */\n\n\nvar makeSelector = {\n  RR: function RR() {\n    var index = 0;\n    return function (clusterIds) {\n      return clusterIds[index++ % clusterIds.length];\n    };\n  },\n  RANDOM: function RANDOM() {\n    return function (clusterIds) {\n      return clusterIds[Math.floor(Math.random() * clusterIds.length)];\n    };\n  },\n  ORDER: function ORDER() {\n    return function (clusterIds) {\n      return clusterIds[0];\n    };\n  }\n};\n\nvar PoolNamespace = /*#__PURE__*/function () {\n  function PoolNamespace(cluster, pattern, selector) {\n    _classCallCheck(this, PoolNamespace);\n\n    this._cluster = cluster;\n    this._pattern = pattern;\n    this._selector = makeSelector[selector]();\n  }\n\n  _createClass(PoolNamespace, [{\n    key: \"getConnection\",\n    value: function getConnection(cb) {\n      var _this = this;\n\n      var clusterNode = this._getClusterNode();\n\n      if (clusterNode === null) {\n        return cb(new Error('Pool does Not exists.'));\n      }\n\n      return this._cluster._getConnection(clusterNode, function (err, connection) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (connection === 'retry') {\n          return _this.getConnection(cb);\n        }\n\n        return cb(null, connection);\n      });\n    }\n    /**\n     * pool cluster query\n     * @param {*} sql\n     * @param {*} values\n     * @param {*} cb\n     * @returns query\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(sql, values, cb) {\n      var query = Connection.createQuery(sql, values, cb, {});\n      this.getConnection(function (err, conn) {\n        if (err) {\n          if (typeof query.onResult === 'function') {\n            query.onResult(err);\n          } else {\n            query.emit('error', err);\n          }\n\n          return;\n        }\n\n        try {\n          conn.query(query).once('end', function () {\n            conn.release();\n          });\n        } catch (e) {\n          conn.release();\n          throw e;\n        }\n      });\n      return query;\n    }\n    /**\n     * pool cluster execute\n     * @param {*} sql \n     * @param {*} values \n     * @param {*} cb \n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(sql, values, cb) {\n      if (typeof values === 'function') {\n        cb = values;\n        values = [];\n      }\n\n      this.getConnection(function (err, conn) {\n        if (err) {\n          return cb(err);\n        }\n\n        try {\n          conn.execute(sql, values, cb).once('end', function () {\n            conn.release();\n          });\n        } catch (e) {\n          conn.release();\n          throw e;\n        }\n      });\n    }\n  }, {\n    key: \"_getClusterNode\",\n    value: function _getClusterNode() {\n      var foundNodeIds = this._cluster._findNodeIds(this._pattern);\n\n      if (foundNodeIds.length === 0) {\n        return null;\n      }\n\n      var nodeId = foundNodeIds.length === 1 ? foundNodeIds[0] : this._selector(foundNodeIds);\n      return this._cluster._getNode(nodeId);\n    }\n  }]);\n\n  return PoolNamespace;\n}();\n\nvar PoolCluster = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(PoolCluster, _EventEmitter);\n\n  var _super = _createSuper(PoolCluster);\n\n  function PoolCluster(config) {\n    var _this2;\n\n    _classCallCheck(this, PoolCluster);\n\n    _this2 = _super.call(this);\n    config = config || {};\n    _this2._canRetry = typeof config.canRetry === 'undefined' ? true : config.canRetry;\n    _this2._removeNodeErrorCount = config.removeNodeErrorCount || 5;\n    _this2._defaultSelector = config.defaultSelector || 'RR';\n    _this2._closed = false;\n    _this2._lastId = 0;\n    _this2._nodes = {};\n    _this2._serviceableNodeIds = [];\n    _this2._namespaces = {};\n    _this2._findCaches = {};\n    return _this2;\n  }\n\n  _createClass(PoolCluster, [{\n    key: \"of\",\n    value: function of(pattern, selector) {\n      pattern = pattern || '*';\n      selector = selector || this._defaultSelector;\n      selector = selector.toUpperCase();\n\n      if (!makeSelector[selector] === 'undefined') {\n        selector = this._defaultSelector;\n      }\n\n      var key = pattern + selector;\n\n      if (typeof this._namespaces[key] === 'undefined') {\n        this._namespaces[key] = new PoolNamespace(this, pattern, selector);\n      }\n\n      return this._namespaces[key];\n    }\n  }, {\n    key: \"add\",\n    value: function add(id, config) {\n      if (typeof id === 'object') {\n        config = id;\n        id = \"CLUSTER::\".concat(++this._lastId);\n      }\n\n      if (typeof this._nodes[id] === 'undefined') {\n        this._nodes[id] = {\n          id: id,\n          errorCount: 0,\n          pool: new Pool({\n            config: new PoolConfig(config)\n          })\n        };\n\n        this._serviceableNodeIds.push(id);\n\n        this._clearFindCaches();\n      }\n    }\n  }, {\n    key: \"getConnection\",\n    value: function getConnection(pattern, selector, cb) {\n      var namespace;\n\n      if (typeof pattern === 'function') {\n        cb = pattern;\n        namespace = this.of();\n      } else {\n        if (typeof selector === 'function') {\n          cb = selector;\n          selector = this._defaultSelector;\n        }\n\n        namespace = this.of(pattern, selector);\n      }\n\n      namespace.getConnection(cb);\n    }\n  }, {\n    key: \"end\",\n    value: function end(callback) {\n      var cb = callback !== undefined ? callback : function (err) {\n        if (err) {\n          throw err;\n        }\n      };\n\n      if (this._closed) {\n        process.nextTick(cb);\n        return;\n      }\n\n      this._closed = true;\n      var calledBack = false;\n      var waitingClose = 0;\n\n      var onEnd = function onEnd(err) {\n        if (!calledBack && (err || --waitingClose <= 0)) {\n          calledBack = true;\n          return cb(err);\n        }\n      };\n\n      for (var id in this._nodes) {\n        waitingClose++;\n\n        this._nodes[id].pool.end(onEnd);\n      }\n\n      if (waitingClose === 0) {\n        process.nextTick(onEnd);\n      }\n    }\n  }, {\n    key: \"_findNodeIds\",\n    value: function _findNodeIds(pattern) {\n      if (typeof this._findCaches[pattern] !== 'undefined') {\n        return this._findCaches[pattern];\n      }\n\n      var foundNodeIds;\n\n      if (pattern === '*') {\n        // all\n        foundNodeIds = this._serviceableNodeIds;\n      } else if (this._serviceableNodeIds.indexOf(pattern) !== -1) {\n        // one\n        foundNodeIds = [pattern];\n      } else {\n        // wild matching\n        var keyword = pattern.substring(pattern.length - 1, 0);\n        foundNodeIds = this._serviceableNodeIds.filter(function (id) {\n          return id.startsWith(keyword);\n        });\n      }\n\n      this._findCaches[pattern] = foundNodeIds;\n      return foundNodeIds;\n    }\n  }, {\n    key: \"_getNode\",\n    value: function _getNode(id) {\n      return this._nodes[id] || null;\n    }\n  }, {\n    key: \"_increaseErrorCount\",\n    value: function _increaseErrorCount(node) {\n      if (++node.errorCount >= this._removeNodeErrorCount) {\n        var index = this._serviceableNodeIds.indexOf(node.id);\n\n        if (index !== -1) {\n          this._serviceableNodeIds.splice(index, 1);\n\n          delete this._nodes[node.id];\n\n          this._clearFindCaches();\n\n          node.pool.end();\n          this.emit('remove', node.id);\n        }\n      }\n    }\n  }, {\n    key: \"_decreaseErrorCount\",\n    value: function _decreaseErrorCount(node) {\n      if (node.errorCount > 0) {\n        --node.errorCount;\n      }\n    }\n  }, {\n    key: \"_getConnection\",\n    value: function _getConnection(node, cb) {\n      var _this3 = this;\n\n      node.pool.getConnection(function (err, connection) {\n        if (err) {\n          _this3._increaseErrorCount(node);\n\n          if (_this3._canRetry) {\n            // REVIEW: this seems wrong?\n            _this3.emit('warn', err); // eslint-disable-next-line no-console\n\n\n            console.warn(\"[Error] PoolCluster : \".concat(err));\n            return cb(null, 'retry');\n          }\n\n          return cb(err);\n        }\n\n        _this3._decreaseErrorCount(node);\n\n        connection._clusterId = node.id;\n        return cb(null, connection);\n      });\n    }\n  }, {\n    key: \"_clearFindCaches\",\n    value: function _clearFindCaches() {\n      this._findCaches = {};\n    }\n  }]);\n\n  return PoolCluster;\n}(EventEmitter);\n\nmodule.exports = PoolCluster;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/pool_cluster.js"],"names":["process","require","Pool","PoolConfig","Connection","EventEmitter","makeSelector","RR","index","clusterIds","length","RANDOM","Math","floor","random","ORDER","PoolNamespace","cluster","pattern","selector","_cluster","_pattern","_selector","cb","clusterNode","_getClusterNode","Error","_getConnection","err","connection","getConnection","sql","values","query","createQuery","conn","onResult","emit","once","release","e","execute","foundNodeIds","_findNodeIds","nodeId","_getNode","PoolCluster","config","_canRetry","canRetry","_removeNodeErrorCount","removeNodeErrorCount","_defaultSelector","defaultSelector","_closed","_lastId","_nodes","_serviceableNodeIds","_namespaces","_findCaches","toUpperCase","key","id","errorCount","pool","push","_clearFindCaches","namespace","of","callback","undefined","nextTick","calledBack","waitingClose","onEnd","end","indexOf","keyword","substring","filter","startsWith","node","splice","_increaseErrorCount","console","warn","_decreaseErrorCount","_clusterId","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst process = require('process');\n\nconst Pool = require('./pool.js');\nconst PoolConfig = require('./pool_config.js');\nconst Connection = require('./connection.js');\nconst EventEmitter = require('events').EventEmitter;\n\n/**\n * Selector\n */\nconst makeSelector = {\n  RR() {\n    let index = 0;\n    return clusterIds => clusterIds[index++ % clusterIds.length];\n  },\n  RANDOM() {\n    return clusterIds =>\n      clusterIds[Math.floor(Math.random() * clusterIds.length)];\n  },\n  ORDER() {\n    return clusterIds => clusterIds[0];\n  }\n};\n\nclass PoolNamespace {\n  constructor(cluster, pattern, selector) {\n    this._cluster = cluster;\n    this._pattern = pattern;\n    this._selector = makeSelector[selector]();\n  }\n\n  getConnection(cb) {\n    const clusterNode = this._getClusterNode();\n    if (clusterNode === null) {\n      return cb(new Error('Pool does Not exists.'));\n    }\n    return this._cluster._getConnection(clusterNode, (err, connection) => {\n      if (err) {\n        return cb(err);\n      }\n      if (connection === 'retry') {\n        return this.getConnection(cb);\n      }\n      return cb(null, connection);\n    });\n  }\n\n  /**\n   * pool cluster query\n   * @param {*} sql\n   * @param {*} values\n   * @param {*} cb\n   * @returns query\n   */\n  query(sql, values, cb) {\n    const query = Connection.createQuery(sql, values, cb, {});\n    this.getConnection((err, conn) => {\n      if (err) {\n        if (typeof query.onResult === 'function') {\n          query.onResult(err);\n        } else {\n          query.emit('error', err);\n        }\n        return;\n      }\n      try {\n        conn.query(query).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n    return query;\n  }\n\n  /**\n   * pool cluster execute\n   * @param {*} sql \n   * @param {*} values \n   * @param {*} cb \n   */\n  execute(sql, values, cb) {\n    if (typeof values === 'function') {\n      cb = values;\n      values = [];\n    }\n    this.getConnection((err, conn) => {\n      if (err) {\n        return cb(err);\n      }\n      try {\n        conn.execute(sql, values, cb).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n  }\n\n  _getClusterNode() {\n    const foundNodeIds = this._cluster._findNodeIds(this._pattern);\n    if (foundNodeIds.length === 0) {\n      return null;\n    }\n    const nodeId =\n      foundNodeIds.length === 1\n        ? foundNodeIds[0]\n        : this._selector(foundNodeIds);\n    return this._cluster._getNode(nodeId);\n  }\n}\n\nclass PoolCluster extends EventEmitter {\n  constructor(config) {\n    super();\n    config = config || {};\n    this._canRetry =\n      typeof config.canRetry === 'undefined' ? true : config.canRetry;\n    this._removeNodeErrorCount = config.removeNodeErrorCount || 5;\n    this._defaultSelector = config.defaultSelector || 'RR';\n    this._closed = false;\n    this._lastId = 0;\n    this._nodes = {};\n    this._serviceableNodeIds = [];\n    this._namespaces = {};\n    this._findCaches = {};\n  }\n\n  of(pattern, selector) {\n    pattern = pattern || '*';\n    selector = selector || this._defaultSelector;\n    selector = selector.toUpperCase();\n    if (!makeSelector[selector] === 'undefined') {\n      selector = this._defaultSelector;\n    }\n    const key = pattern + selector;\n    if (typeof this._namespaces[key] === 'undefined') {\n      this._namespaces[key] = new PoolNamespace(this, pattern, selector);\n    }\n    return this._namespaces[key];\n  }\n\n  add(id, config) {\n    if (typeof id === 'object') {\n      config = id;\n      id = `CLUSTER::${++this._lastId}`;\n    }\n    if (typeof this._nodes[id] === 'undefined') {\n      this._nodes[id] = {\n        id: id,\n        errorCount: 0,\n        pool: new Pool({ config: new PoolConfig(config) })\n      };\n      this._serviceableNodeIds.push(id);\n      this._clearFindCaches();\n    }\n  }\n\n  getConnection(pattern, selector, cb) {\n    let namespace;\n    if (typeof pattern === 'function') {\n      cb = pattern;\n      namespace = this.of();\n    } else {\n      if (typeof selector === 'function') {\n        cb = selector;\n        selector = this._defaultSelector;\n      }\n      namespace = this.of(pattern, selector);\n    }\n    namespace.getConnection(cb);\n  }\n\n  end(callback) {\n    const cb =\n      callback !== undefined\n        ? callback\n        : err => {\n          if (err) {\n            throw err;\n          }\n        };\n    if (this._closed) {\n      process.nextTick(cb);\n      return;\n    }\n    this._closed = true;\n\n    let calledBack = false;\n    let waitingClose = 0;\n    const onEnd = err => {\n      if (!calledBack && (err || --waitingClose <= 0)) {\n        calledBack = true;\n        return cb(err);\n      }\n    };\n\n    for (const id in this._nodes) {\n      waitingClose++;\n      this._nodes[id].pool.end(onEnd);\n    }\n    if (waitingClose === 0) {\n      process.nextTick(onEnd);\n    }\n  }\n\n  _findNodeIds(pattern) {\n    if (typeof this._findCaches[pattern] !== 'undefined') {\n      return this._findCaches[pattern];\n    }\n    let foundNodeIds;\n    if (pattern === '*') {\n      // all\n      foundNodeIds = this._serviceableNodeIds;\n    } else if (this._serviceableNodeIds.indexOf(pattern) !== -1) {\n      // one\n      foundNodeIds = [pattern];\n    } else {\n      // wild matching\n      const keyword = pattern.substring(pattern.length - 1, 0);\n      foundNodeIds = this._serviceableNodeIds.filter(id =>\n        id.startsWith(keyword)\n      );\n    }\n    this._findCaches[pattern] = foundNodeIds;\n    return foundNodeIds;\n  }\n\n  _getNode(id) {\n    return this._nodes[id] || null;\n  }\n\n  _increaseErrorCount(node) {\n    if (++node.errorCount >= this._removeNodeErrorCount) {\n      const index = this._serviceableNodeIds.indexOf(node.id);\n      if (index !== -1) {\n        this._serviceableNodeIds.splice(index, 1);\n        delete this._nodes[node.id];\n        this._clearFindCaches();\n        node.pool.end();\n        this.emit('remove', node.id);\n      }\n    }\n  }\n\n  _decreaseErrorCount(node) {\n    if (node.errorCount > 0) {\n      --node.errorCount;\n    }\n  }\n\n  _getConnection(node, cb) {\n    node.pool.getConnection((err, connection) => {\n      if (err) {\n        this._increaseErrorCount(node);\n        if (this._canRetry) {\n          // REVIEW: this seems wrong?\n          this.emit('warn', err);\n          // eslint-disable-next-line no-console\n          console.warn(`[Error] PoolCluster : ${err}`);\n          return cb(null, 'retry');\n        }\n        return cb(err);\n      }\n      this._decreaseErrorCount(node);\n\n      connection._clusterId = node.id;\n      return cb(null, connection);\n    });\n  }\n\n  _clearFindCaches() {\n    this._findCaches = {};\n  }\n}\n\nmodule.exports = PoolCluster;\n"]},"metadata":{},"sourceType":"script"}