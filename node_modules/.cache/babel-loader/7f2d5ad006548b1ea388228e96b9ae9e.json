{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Connection = require('../index.js').Connection;\n\nvar PoolConnection = /*#__PURE__*/function (_Connection) {\n  _inherits(PoolConnection, _Connection);\n\n  var _super = _createSuper(PoolConnection);\n\n  function PoolConnection(pool, options) {\n    var _this;\n\n    _classCallCheck(this, PoolConnection);\n\n    _this = _super.call(this, options);\n    _this._pool = pool; // When a fatal error occurs the connection's protocol ends, which will cause\n    // the connection to end as well, thus we only need to watch for the end event\n    // and we will be notified of disconnects.\n    // REVIEW: Moved to `once`\n\n    _this.once('end', function () {\n      _this._removeFromPool();\n    });\n\n    _this.once('error', function () {\n      _this._removeFromPool();\n    });\n\n    return _this;\n  }\n\n  _createClass(PoolConnection, [{\n    key: \"release\",\n    value: function release() {\n      if (!this._pool || this._pool._closed) {\n        return;\n      }\n\n      this._pool.releaseConnection(this);\n    }\n  }, {\n    key: \"promise\",\n    value: function promise(promiseImpl) {\n      var PromisePoolConnection = require('../promise').PromisePoolConnection;\n\n      return new PromisePoolConnection(this, promiseImpl);\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      var err = new Error('Calling conn.end() to release a pooled connection is ' + 'deprecated. In next version calling conn.end() will be ' + 'restored to default conn.end() behavior. Use ' + 'conn.release() instead.');\n      this.emit('warn', err); // eslint-disable-next-line no-console\n\n      console.warn(err.message);\n      this.release();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._removeFromPool();\n\n      _get(_getPrototypeOf(PoolConnection.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"_removeFromPool\",\n    value: function _removeFromPool() {\n      if (!this._pool || this._pool._closed) {\n        return;\n      }\n\n      var pool = this._pool;\n      this._pool = null;\n\n      pool._removeConnection(this);\n    }\n  }]);\n\n  return PoolConnection;\n}(Connection);\n\nPoolConnection.statementKey = Connection.statementKey;\nmodule.exports = PoolConnection; // TODO: Remove this when we are removing PoolConnection#end\n\nPoolConnection.prototype._realEnd = Connection.prototype.end;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/pool_connection.js"],"names":["Connection","require","PoolConnection","pool","options","_pool","once","_removeFromPool","_closed","releaseConnection","promiseImpl","PromisePoolConnection","err","Error","emit","console","warn","message","release","_removeConnection","statementKey","module","exports","prototype","_realEnd","end"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,UAA1C;;IAEME,c;;;;;AACJ,0BAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AAAA;;AACzB,8BAAMA,OAAN;AACA,UAAKC,KAAL,GAAaF,IAAb,CAFyB,CAGzB;AACA;AACA;AACA;;AACA,UAAKG,IAAL,CAAU,KAAV,EAAiB,YAAM;AACrB,YAAKC,eAAL;AACD,KAFD;;AAGA,UAAKD,IAAL,CAAU,OAAV,EAAmB,YAAM;AACvB,YAAKC,eAAL;AACD,KAFD;;AAVyB;AAa1B;;;;WAED,mBAAU;AACR,UAAI,CAAC,KAAKF,KAAN,IAAe,KAAKA,KAAL,CAAWG,OAA9B,EAAuC;AACrC;AACD;;AACD,WAAKH,KAAL,CAAWI,iBAAX,CAA6B,IAA7B;AACD;;;WAED,iBAAQC,WAAR,EAAqB;AACnB,UAAMC,qBAAqB,GAAGV,OAAO,CAAC,YAAD,CAAP,CAAsBU,qBAApD;;AACA,aAAO,IAAIA,qBAAJ,CAA0B,IAA1B,EAAgCD,WAAhC,CAAP;AACD;;;WAED,eAAM;AACJ,UAAME,GAAG,GAAG,IAAIC,KAAJ,CACV,0DACE,yDADF,GAEE,+CAFF,GAGE,yBAJQ,CAAZ;AAMA,WAAKC,IAAL,CAAU,MAAV,EAAkBF,GAAlB,EAPI,CAQJ;;AACAG,MAAAA,OAAO,CAACC,IAAR,CAAaJ,GAAG,CAACK,OAAjB;AACA,WAAKC,OAAL;AACD;;;WAED,mBAAU;AACR,WAAKX,eAAL;;AACA;AACD;;;WAED,2BAAkB;AAChB,UAAI,CAAC,KAAKF,KAAN,IAAe,KAAKA,KAAL,CAAWG,OAA9B,EAAuC;AACrC;AACD;;AACD,UAAML,IAAI,GAAG,KAAKE,KAAlB;AACA,WAAKA,KAAL,GAAa,IAAb;;AACAF,MAAAA,IAAI,CAACgB,iBAAL,CAAuB,IAAvB;AACD;;;;EArD0BnB,U;;AAwD7BE,cAAc,CAACkB,YAAf,GAA8BpB,UAAU,CAACoB,YAAzC;AACAC,MAAM,CAACC,OAAP,GAAiBpB,cAAjB,C,CAEA;;AACAA,cAAc,CAACqB,SAAf,CAAyBC,QAAzB,GAAoCxB,UAAU,CAACuB,SAAX,CAAqBE,GAAzD","sourcesContent":["'use strict';\n\nconst Connection = require('../index.js').Connection;\n\nclass PoolConnection extends Connection {\n  constructor(pool, options) {\n    super(options);\n    this._pool = pool;\n    // When a fatal error occurs the connection's protocol ends, which will cause\n    // the connection to end as well, thus we only need to watch for the end event\n    // and we will be notified of disconnects.\n    // REVIEW: Moved to `once`\n    this.once('end', () => {\n      this._removeFromPool();\n    });\n    this.once('error', () => {\n      this._removeFromPool();\n    });\n  }\n\n  release() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n    this._pool.releaseConnection(this);\n  }\n\n  promise(promiseImpl) {\n    const PromisePoolConnection = require('../promise').PromisePoolConnection;\n    return new PromisePoolConnection(this, promiseImpl);\n  }\n\n  end() {\n    const err = new Error(\n      'Calling conn.end() to release a pooled connection is ' +\n        'deprecated. In next version calling conn.end() will be ' +\n        'restored to default conn.end() behavior. Use ' +\n        'conn.release() instead.'\n    );\n    this.emit('warn', err);\n    // eslint-disable-next-line no-console\n    console.warn(err.message);\n    this.release();\n  }\n\n  destroy() {\n    this._removeFromPool();\n    super.destroy();\n  }\n\n  _removeFromPool() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n    const pool = this._pool;\n    this._pool = null;\n    pool._removeConnection(this);\n  }\n}\n\nPoolConnection.statementKey = Connection.statementKey;\nmodule.exports = PoolConnection;\n\n// TODO: Remove this when we are removing PoolConnection#end\nPoolConnection.prototype._realEnd = Connection.prototype.end;\n"]},"metadata":{},"sourceType":"script"}