{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Types = require('../constants/types');\n\nvar Packet = require('../packets/packet');\n\nvar binaryReader = new Array(256);\n\nvar BinaryRow = /*#__PURE__*/function () {\n  function BinaryRow(columns) {\n    _classCallCheck(this, BinaryRow);\n\n    this.columns = columns || [];\n  }\n\n  _createClass(BinaryRow, [{\n    key: \"toPacket\",\n    value: function toPacket() {\n      throw new Error('Not implemented');\n    } // TODO: complete list of types...\n\n  }], [{\n    key: \"fromPacket\",\n    value: function fromPacket(fields, packet) {\n      var columns = new Array(fields.length);\n      packet.readInt8(); // TODO check it's 0\n\n      var nullBitmapLength = Math.floor((fields.length + 7 + 2) / 8); // TODO: read and interpret null bitmap\n\n      packet.skip(nullBitmapLength);\n\n      for (var i = 0; i < columns.length; ++i) {\n        columns[i] = binaryReader[fields[i].columnType].apply(packet);\n      }\n\n      return new BinaryRow(columns);\n    }\n  }]);\n\n  return BinaryRow;\n}(); // TODO: replace with constants.MYSQL_TYPE_*\n\n\nbinaryReader[Types.DECIMAL] = Packet.prototype.readLengthCodedString;\nbinaryReader[1] = Packet.prototype.readInt8; // tiny\n\nbinaryReader[2] = Packet.prototype.readInt16; // short\n\nbinaryReader[3] = Packet.prototype.readInt32; // long\n\nbinaryReader[4] = Packet.prototype.readFloat; // float\n\nbinaryReader[5] = Packet.prototype.readDouble; // double\n\nbinaryReader[6] = Packet.prototype.assertInvalid; // null, should be skipped vie null bitmap\n\nbinaryReader[7] = Packet.prototype.readTimestamp; // timestamp, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIMESTAMP\n\nbinaryReader[8] = Packet.prototype.readInt64; // long long\n\nbinaryReader[9] = Packet.prototype.readInt32; // int24\n\nbinaryReader[10] = Packet.prototype.readTimestamp; // date\n\nbinaryReader[11] = Packet.prototype.readTime; // time, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIME\n\nbinaryReader[12] = Packet.prototype.readDateTime; // datetime, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_DATETIME\n\nbinaryReader[13] = Packet.prototype.readInt16; // year\n\nbinaryReader[Types.VAR_STRING] = Packet.prototype.readLengthCodedString; // var string\n\nmodule.exports = BinaryRow;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/packets/binary_row.js"],"names":["Types","require","Packet","binaryReader","Array","BinaryRow","columns","Error","fields","packet","length","readInt8","nullBitmapLength","Math","floor","skip","i","columnType","apply","DECIMAL","prototype","readLengthCodedString","readInt16","readInt32","readFloat","readDouble","assertInvalid","readTimestamp","readInt64","readTime","readDateTime","VAR_STRING","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAME,YAAY,GAAG,IAAIC,KAAJ,CAAU,GAAV,CAArB;;IAEMC,S;AACJ,qBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACD;;;;WAED,oBAAW;AACT,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD,K,CAED;;;;WACA,oBAAkBC,MAAlB,EAA0BC,MAA1B,EAAkC;AAChC,UAAMH,OAAO,GAAG,IAAIF,KAAJ,CAAUI,MAAM,CAACE,MAAjB,CAAhB;AACAD,MAAAA,MAAM,CAACE,QAAP,GAFgC,CAEb;;AACnB,UAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACN,MAAM,CAACE,MAAP,GAAgB,CAAhB,GAAoB,CAArB,IAA0B,CAArC,CAAzB,CAHgC,CAIhC;;AACAD,MAAAA,MAAM,CAACM,IAAP,CAAYH,gBAAZ;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,OAAO,CAACI,MAA5B,EAAoC,EAAEM,CAAtC,EAAyC;AACvCV,QAAAA,OAAO,CAACU,CAAD,CAAP,GAAab,YAAY,CAACK,MAAM,CAACQ,CAAD,CAAN,CAAUC,UAAX,CAAZ,CAAmCC,KAAnC,CAAyCT,MAAzC,CAAb;AACD;;AACD,aAAO,IAAIJ,SAAJ,CAAcC,OAAd,CAAP;AACD;;;;KAGH;;;AACAH,YAAY,CAACH,KAAK,CAACmB,OAAP,CAAZ,GAA8BjB,MAAM,CAACkB,SAAP,CAAiBC,qBAA/C;AACAlB,YAAY,CAAC,CAAD,CAAZ,GAAkBD,MAAM,CAACkB,SAAP,CAAiBT,QAAnC,C,CAA6C;;AAC7CR,YAAY,CAAC,CAAD,CAAZ,GAAkBD,MAAM,CAACkB,SAAP,CAAiBE,SAAnC,C,CAA8C;;AAC9CnB,YAAY,CAAC,CAAD,CAAZ,GAAkBD,MAAM,CAACkB,SAAP,CAAiBG,SAAnC,C,CAA8C;;AAC9CpB,YAAY,CAAC,CAAD,CAAZ,GAAkBD,MAAM,CAACkB,SAAP,CAAiBI,SAAnC,C,CAA8C;;AAC9CrB,YAAY,CAAC,CAAD,CAAZ,GAAkBD,MAAM,CAACkB,SAAP,CAAiBK,UAAnC,C,CAA+C;;AAC/CtB,YAAY,CAAC,CAAD,CAAZ,GAAkBD,MAAM,CAACkB,SAAP,CAAiBM,aAAnC,C,CAAkD;;AAClDvB,YAAY,CAAC,CAAD,CAAZ,GAAkBD,MAAM,CAACkB,SAAP,CAAiBO,aAAnC,C,CAAkD;;AAClDxB,YAAY,CAAC,CAAD,CAAZ,GAAkBD,MAAM,CAACkB,SAAP,CAAiBQ,SAAnC,C,CAA8C;;AAC9CzB,YAAY,CAAC,CAAD,CAAZ,GAAkBD,MAAM,CAACkB,SAAP,CAAiBG,SAAnC,C,CAA8C;;AAC9CpB,YAAY,CAAC,EAAD,CAAZ,GAAmBD,MAAM,CAACkB,SAAP,CAAiBO,aAApC,C,CAAmD;;AACnDxB,YAAY,CAAC,EAAD,CAAZ,GAAmBD,MAAM,CAACkB,SAAP,CAAiBS,QAApC,C,CAA8C;;AAC9C1B,YAAY,CAAC,EAAD,CAAZ,GAAmBD,MAAM,CAACkB,SAAP,CAAiBU,YAApC,C,CAAkD;;AAClD3B,YAAY,CAAC,EAAD,CAAZ,GAAmBD,MAAM,CAACkB,SAAP,CAAiBE,SAApC,C,CAA+C;;AAC/CnB,YAAY,CAACH,KAAK,CAAC+B,UAAP,CAAZ,GAAiC7B,MAAM,CAACkB,SAAP,CAAiBC,qBAAlD,C,CAAyE;;AAEzEW,MAAM,CAACC,OAAP,GAAiB5B,SAAjB","sourcesContent":["'use strict';\n\nconst Types = require('../constants/types');\nconst Packet = require('../packets/packet');\n\nconst binaryReader = new Array(256);\n\nclass BinaryRow {\n  constructor(columns) {\n    this.columns = columns || [];\n  }\n\n  toPacket() {\n    throw new Error('Not implemented');\n  }\n\n  // TODO: complete list of types...\n  static fromPacket(fields, packet) {\n    const columns = new Array(fields.length);\n    packet.readInt8(); // TODO check it's 0\n    const nullBitmapLength = Math.floor((fields.length + 7 + 2) / 8);\n    // TODO: read and interpret null bitmap\n    packet.skip(nullBitmapLength);\n    for (let i = 0; i < columns.length; ++i) {\n      columns[i] = binaryReader[fields[i].columnType].apply(packet);\n    }\n    return new BinaryRow(columns);\n  }\n}\n\n// TODO: replace with constants.MYSQL_TYPE_*\nbinaryReader[Types.DECIMAL] = Packet.prototype.readLengthCodedString;\nbinaryReader[1] = Packet.prototype.readInt8; // tiny\nbinaryReader[2] = Packet.prototype.readInt16; // short\nbinaryReader[3] = Packet.prototype.readInt32; // long\nbinaryReader[4] = Packet.prototype.readFloat; // float\nbinaryReader[5] = Packet.prototype.readDouble; // double\nbinaryReader[6] = Packet.prototype.assertInvalid; // null, should be skipped vie null bitmap\nbinaryReader[7] = Packet.prototype.readTimestamp; // timestamp, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIMESTAMP\nbinaryReader[8] = Packet.prototype.readInt64; // long long\nbinaryReader[9] = Packet.prototype.readInt32; // int24\nbinaryReader[10] = Packet.prototype.readTimestamp; // date\nbinaryReader[11] = Packet.prototype.readTime; // time, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIME\nbinaryReader[12] = Packet.prototype.readDateTime; // datetime, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_DATETIME\nbinaryReader[13] = Packet.prototype.readInt16; // year\nbinaryReader[Types.VAR_STRING] = Packet.prototype.readLengthCodedString; // var string\n\nmodule.exports = BinaryRow;\n"]},"metadata":{},"sourceType":"script"}