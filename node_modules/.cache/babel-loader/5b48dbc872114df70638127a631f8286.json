{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Command = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Command, _EventEmitter);\n\n  var _super = _createSuper(Command);\n\n  function Command() {\n    var _this;\n\n    _classCallCheck(this, Command);\n\n    _this = _super.call(this);\n    _this.next = null;\n    return _this;\n  } // slow. debug only\n\n\n  _createClass(Command, [{\n    key: \"stateName\",\n    value: function stateName() {\n      var state = this.next;\n\n      for (var i in this) {\n        if (this[i] === state && i !== 'next') {\n          return i;\n        }\n      }\n\n      return 'unknown name';\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(packet, connection) {\n      if (!this.next) {\n        this.next = this.start;\n\n        connection._resetSequenceId();\n      }\n\n      if (packet && packet.isError()) {\n        var err = packet.asError(connection.clientEncoding);\n        err.sql = this.sql || this.query;\n\n        if (this.onResult) {\n          this.onResult(err);\n          this.emit('end');\n        } else {\n          this.emit('error', err);\n          this.emit('end');\n        }\n\n        return true;\n      } // TODO: don't return anything from execute, it's ugly and error-prone. Listen for 'end' event in connection\n\n\n      this.next = this.next(packet, connection);\n\n      if (this.next) {\n        return false;\n      }\n\n      this.emit('end');\n      return true;\n    }\n  }]);\n\n  return Command;\n}(EventEmitter);\n\nmodule.exports = Command;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/commands/command.js"],"names":["EventEmitter","require","Command","next","state","i","packet","connection","start","_resetSequenceId","isError","err","asError","clientEncoding","sql","query","onResult","emit","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;;IAEME,O;;;;;AACJ,qBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,IAAL,GAAY,IAAZ;AAFY;AAGb,G,CAED;;;;;WACA,qBAAY;AACV,UAAMC,KAAK,GAAG,KAAKD,IAAnB;;AACA,WAAK,IAAME,CAAX,IAAgB,IAAhB,EAAsB;AACpB,YAAI,KAAKA,CAAL,MAAYD,KAAZ,IAAqBC,CAAC,KAAK,MAA/B,EAAuC;AACrC,iBAAOA,CAAP;AACD;AACF;;AACD,aAAO,cAAP;AACD;;;WAED,iBAAQC,MAAR,EAAgBC,UAAhB,EAA4B;AAC1B,UAAI,CAAC,KAAKJ,IAAV,EAAgB;AACd,aAAKA,IAAL,GAAY,KAAKK,KAAjB;;AACAD,QAAAA,UAAU,CAACE,gBAAX;AACD;;AACD,UAAIH,MAAM,IAAIA,MAAM,CAACI,OAAP,EAAd,EAAgC;AAC9B,YAAMC,GAAG,GAAGL,MAAM,CAACM,OAAP,CAAeL,UAAU,CAACM,cAA1B,CAAZ;AACAF,QAAAA,GAAG,CAACG,GAAJ,GAAU,KAAKA,GAAL,IAAY,KAAKC,KAA3B;;AACA,YAAI,KAAKC,QAAT,EAAmB;AACjB,eAAKA,QAAL,CAAcL,GAAd;AACA,eAAKM,IAAL,CAAU,KAAV;AACD,SAHD,MAGO;AACL,eAAKA,IAAL,CAAU,OAAV,EAAmBN,GAAnB;AACA,eAAKM,IAAL,CAAU,KAAV;AACD;;AACD,eAAO,IAAP;AACD,OAhByB,CAiB1B;;;AACA,WAAKd,IAAL,GAAY,KAAKA,IAAL,CAAUG,MAAV,EAAkBC,UAAlB,CAAZ;;AACA,UAAI,KAAKJ,IAAT,EAAe;AACb,eAAO,KAAP;AACD;;AACD,WAAKc,IAAL,CAAU,KAAV;AACA,aAAO,IAAP;AAED;;;;EA1CmBjB,Y;;AA6CtBkB,MAAM,CAACC,OAAP,GAAiBjB,OAAjB","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nclass Command extends EventEmitter {\n  constructor() {\n    super();\n    this.next = null;\n  }\n\n  // slow. debug only\n  stateName() {\n    const state = this.next;\n    for (const i in this) {\n      if (this[i] === state && i !== 'next') {\n        return i;\n      }\n    }\n    return 'unknown name';\n  }\n\n  execute(packet, connection) {\n    if (!this.next) {\n      this.next = this.start;\n      connection._resetSequenceId();\n    }\n    if (packet && packet.isError()) {\n      const err = packet.asError(connection.clientEncoding);\n      err.sql = this.sql || this.query;\n      if (this.onResult) {\n        this.onResult(err);\n        this.emit('end');\n      } else {\n        this.emit('error', err);\n        this.emit('end');\n      }\n      return true;\n    }\n    // TODO: don't return anything from execute, it's ugly and error-prone. Listen for 'end' event in connection\n    this.next = this.next(packet, connection);\n    if (this.next) {\n      return false;\n    } \n    this.emit('end');\n    return true;\n    \n  }\n}\n\nmodule.exports = Command;\n"]},"metadata":{},"sourceType":"script"}