{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar Command = require('./command');\n\nvar Packets = require('../packets');\n\nvar eventParsers = [];\n\nvar BinlogEventHeader = function BinlogEventHeader(packet) {\n  _classCallCheck(this, BinlogEventHeader);\n\n  this.timestamp = packet.readInt32();\n  this.eventType = packet.readInt8();\n  this.serverId = packet.readInt32();\n  this.eventSize = packet.readInt32();\n  this.logPos = packet.readInt32();\n  this.flags = packet.readInt16();\n};\n\nvar BinlogDump = /*#__PURE__*/function (_Command) {\n  _inherits(BinlogDump, _Command);\n\n  var _super = _createSuper(BinlogDump);\n\n  function BinlogDump(opts) {\n    var _this;\n\n    _classCallCheck(this, BinlogDump);\n\n    _this = _super.call(this); // this.onResult = callback;\n\n    _this.opts = opts;\n    return _this;\n  }\n\n  _createClass(BinlogDump, [{\n    key: \"start\",\n    value: function start(packet, connection) {\n      var newPacket = new Packets.BinlogDump(this.opts);\n      connection.writePacket(newPacket.toPacket(1));\n      return BinlogDump.prototype.binlogData;\n    }\n  }, {\n    key: \"binlogData\",\n    value: function binlogData(packet) {\n      // ok - continue consuming events\n      // error - error\n      // eof - end of binlog\n      if (packet.isEOF()) {\n        this.emit('eof');\n        return null;\n      } // binlog event header\n\n\n      packet.readInt8();\n      var header = new BinlogEventHeader(packet);\n      var EventParser = eventParsers[header.eventType];\n      var event;\n\n      if (EventParser) {\n        event = new EventParser(packet);\n      } else {\n        event = {\n          name: 'UNKNOWN'\n        };\n      }\n\n      event.header = header;\n      this.emit('event', event);\n      return BinlogDump.prototype.binlogData;\n    }\n  }]);\n\n  return BinlogDump;\n}(Command);\n\nvar RotateEvent = function RotateEvent(packet) {\n  _classCallCheck(this, RotateEvent);\n\n  this.pposition = packet.readInt32(); // TODO: read uint64 here\n\n  packet.readInt32(); // positionDword2\n\n  this.nextBinlog = packet.readString();\n  this.name = 'RotateEvent';\n};\n\nvar FormatDescriptionEvent = function FormatDescriptionEvent(packet) {\n  _classCallCheck(this, FormatDescriptionEvent);\n\n  this.binlogVersion = packet.readInt16();\n  this.serverVersion = packet.readString(50).replace(/\\u0000.*/, ''); // eslint-disable-line no-control-regex\n\n  this.createTimestamp = packet.readInt32();\n  this.eventHeaderLength = packet.readInt8(); // should be 19\n\n  this.eventsLength = packet.readBuffer();\n  this.name = 'FormatDescriptionEvent';\n};\n\nvar QueryEvent = function QueryEvent(packet) {\n  _classCallCheck(this, QueryEvent);\n\n  var parseStatusVars = require('../packets/binlog_query_statusvars.js');\n\n  this.slaveProxyId = packet.readInt32();\n  this.executionTime = packet.readInt32();\n  var schemaLength = packet.readInt8();\n  this.errorCode = packet.readInt16();\n  var statusVarsLength = packet.readInt16();\n  var statusVars = packet.readBuffer(statusVarsLength);\n  this.schema = packet.readString(schemaLength);\n  packet.readInt8(); // should be zero\n\n  this.statusVars = parseStatusVars(statusVars);\n  this.query = packet.readString();\n  this.name = 'QueryEvent';\n};\n\nvar XidEvent = function XidEvent(packet) {\n  _classCallCheck(this, XidEvent);\n\n  this.binlogVersion = packet.readInt16();\n  this.xid = packet.readInt64();\n  this.name = 'XidEvent';\n};\n\neventParsers[2] = QueryEvent;\neventParsers[4] = RotateEvent;\neventParsers[15] = FormatDescriptionEvent;\neventParsers[16] = XidEvent;\nmodule.exports = BinlogDump;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/commands/binlog_dump.js"],"names":["Command","require","Packets","eventParsers","BinlogEventHeader","packet","timestamp","readInt32","eventType","readInt8","serverId","eventSize","logPos","flags","readInt16","BinlogDump","opts","connection","newPacket","writePacket","toPacket","prototype","binlogData","isEOF","emit","header","EventParser","event","name","RotateEvent","pposition","nextBinlog","readString","FormatDescriptionEvent","binlogVersion","serverVersion","replace","createTimestamp","eventHeaderLength","eventsLength","readBuffer","QueryEvent","parseStatusVars","slaveProxyId","executionTime","schemaLength","errorCode","statusVarsLength","statusVars","schema","query","XidEvent","xid","readInt64","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Command = require('./command');\nconst Packets = require('../packets');\n\nconst eventParsers = [];\n\nclass BinlogEventHeader {\n  constructor(packet) {\n    this.timestamp = packet.readInt32();\n    this.eventType = packet.readInt8();\n    this.serverId = packet.readInt32();\n    this.eventSize = packet.readInt32();\n    this.logPos = packet.readInt32();\n    this.flags = packet.readInt16();\n  }\n}\n\nclass BinlogDump extends Command {\n  constructor(opts) {\n    super();\n    // this.onResult = callback;\n    this.opts = opts;\n  }\n\n  start(packet, connection) {\n    const newPacket = new Packets.BinlogDump(this.opts);\n    connection.writePacket(newPacket.toPacket(1));\n    return BinlogDump.prototype.binlogData;\n  }\n\n  binlogData(packet) {\n    // ok - continue consuming events\n    // error - error\n    // eof - end of binlog\n    if (packet.isEOF()) {\n      this.emit('eof');\n      return null;\n    }\n    // binlog event header\n    packet.readInt8();\n    const header = new BinlogEventHeader(packet);\n    const EventParser = eventParsers[header.eventType];\n    let event;\n    if (EventParser) {\n      event = new EventParser(packet);\n    } else {\n      event = {\n        name: 'UNKNOWN'\n      };\n    }\n    event.header = header;\n    this.emit('event', event);\n    return BinlogDump.prototype.binlogData;\n  }\n}\n\nclass RotateEvent {\n  constructor(packet) {\n    this.pposition = packet.readInt32();\n    // TODO: read uint64 here\n    packet.readInt32(); // positionDword2\n    this.nextBinlog = packet.readString();\n    this.name = 'RotateEvent';\n  }\n}\n\nclass FormatDescriptionEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.serverVersion = packet.readString(50).replace(/\\u0000.*/, ''); // eslint-disable-line no-control-regex\n    this.createTimestamp = packet.readInt32();\n    this.eventHeaderLength = packet.readInt8(); // should be 19\n    this.eventsLength = packet.readBuffer();\n    this.name = 'FormatDescriptionEvent';\n  }\n}\n\nclass QueryEvent {\n  constructor(packet) {\n    const parseStatusVars = require('../packets/binlog_query_statusvars.js');\n    this.slaveProxyId = packet.readInt32();\n    this.executionTime = packet.readInt32();\n    const schemaLength = packet.readInt8();\n    this.errorCode = packet.readInt16();\n    const statusVarsLength = packet.readInt16();\n    const statusVars = packet.readBuffer(statusVarsLength);\n    this.schema = packet.readString(schemaLength);\n    packet.readInt8(); // should be zero\n    this.statusVars = parseStatusVars(statusVars);\n    this.query = packet.readString();\n    this.name = 'QueryEvent';\n  }\n}\n\nclass XidEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.xid = packet.readInt64();\n    this.name = 'XidEvent';\n  }\n}\n\neventParsers[2] = QueryEvent;\neventParsers[4] = RotateEvent;\neventParsers[15] = FormatDescriptionEvent;\neventParsers[16] = XidEvent;\n\nmodule.exports = BinlogDump;\n"]},"metadata":{},"sourceType":"script"}