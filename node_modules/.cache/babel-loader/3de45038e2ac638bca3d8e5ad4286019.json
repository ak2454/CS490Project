{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Packet = require('../packets/packet.js');\n\nvar CommandCode = require('../constants/commands.js');\n\nvar StringParser = require('../parsers/string.js');\n\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nvar Query = /*#__PURE__*/function () {\n  function Query(sql, charsetNumber) {\n    _classCallCheck(this, Query);\n\n    this.query = sql;\n    this.charsetNumber = charsetNumber;\n    this.encoding = CharsetToEncoding[charsetNumber];\n  }\n\n  _createClass(Query, [{\n    key: \"toPacket\",\n    value: function toPacket() {\n      var buf = StringParser.encode(this.query, this.encoding);\n      var length = 5 + buf.length;\n      var buffer = Buffer.allocUnsafe(length);\n      var packet = new Packet(0, buffer, 0, length);\n      packet.offset = 4;\n      packet.writeInt8(CommandCode.QUERY);\n      packet.writeBuffer(buf);\n      return packet;\n    }\n  }]);\n\n  return Query;\n}();\n\nmodule.exports = Query;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/packets/query.js"],"names":["Packet","require","CommandCode","StringParser","CharsetToEncoding","Query","sql","charsetNumber","query","encoding","buf","encode","length","buffer","Buffer","allocUnsafe","packet","offset","writeInt8","QUERY","writeBuffer","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,0BAAD,CAA3B;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,sBAAD,CAA5B;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,mCAAD,CAAjC;;IAEMI,K;AACJ,iBAAYC,GAAZ,EAAiBC,aAAjB,EAAgC;AAAA;;AAC9B,SAAKC,KAAL,GAAaF,GAAb;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKE,QAAL,GAAgBL,iBAAiB,CAACG,aAAD,CAAjC;AACD;;;;WAED,oBAAW;AACT,UAAMG,GAAG,GAAGP,YAAY,CAACQ,MAAb,CAAoB,KAAKH,KAAzB,EAAgC,KAAKC,QAArC,CAAZ;AACA,UAAMG,MAAM,GAAG,IAAIF,GAAG,CAACE,MAAvB;AACA,UAAMC,MAAM,GAAGC,MAAM,CAACC,WAAP,CAAmBH,MAAnB,CAAf;AACA,UAAMI,MAAM,GAAG,IAAIhB,MAAJ,CAAW,CAAX,EAAca,MAAd,EAAsB,CAAtB,EAAyBD,MAAzB,CAAf;AACAI,MAAAA,MAAM,CAACC,MAAP,GAAgB,CAAhB;AACAD,MAAAA,MAAM,CAACE,SAAP,CAAiBhB,WAAW,CAACiB,KAA7B;AACAH,MAAAA,MAAM,CAACI,WAAP,CAAmBV,GAAnB;AACA,aAAOM,MAAP;AACD;;;;;;AAGHK,MAAM,CAACC,OAAP,GAAiBjB,KAAjB","sourcesContent":["'use strict';\n\nconst Packet = require('../packets/packet.js');\nconst CommandCode = require('../constants/commands.js');\nconst StringParser = require('../parsers/string.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nclass Query {\n  constructor(sql, charsetNumber) {\n    this.query = sql;\n    this.charsetNumber = charsetNumber;\n    this.encoding = CharsetToEncoding[charsetNumber];\n  }\n\n  toPacket() {\n    const buf = StringParser.encode(this.query, this.encoding);\n    const length = 5 + buf.length;\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeInt8(CommandCode.QUERY);\n    packet.writeBuffer(buf);\n    return packet;\n  }\n}\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script"}