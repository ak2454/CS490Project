{"ast":null,"code":"'use strict';\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Packets = require('../packets/index.js');\n\nvar Command = require('./command.js');\n\nvar CloseStatement = require('./close_statement.js');\n\nvar Execute = require('./execute.js');\n\nvar PreparedStatementInfo = /*#__PURE__*/function () {\n  function PreparedStatementInfo(query, id, columns, parameters, connection) {\n    _classCallCheck(this, PreparedStatementInfo);\n\n    this.query = query;\n    this.id = id;\n    this.columns = columns;\n    this.parameters = parameters;\n    this.rowParser = null;\n    this._connection = connection;\n  }\n\n  _createClass(PreparedStatementInfo, [{\n    key: \"close\",\n    value: function close() {\n      return this._connection.addCommand(new CloseStatement(this.id));\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(parameters, callback) {\n      if (typeof parameters === 'function') {\n        callback = parameters;\n        parameters = [];\n      }\n\n      return this._connection.addCommand(new Execute({\n        statement: this,\n        values: parameters\n      }, callback));\n    }\n  }]);\n\n  return PreparedStatementInfo;\n}();\n\nvar Prepare = /*#__PURE__*/function (_Command) {\n  _inherits(Prepare, _Command);\n\n  var _super = _createSuper(Prepare);\n\n  function Prepare(options, callback) {\n    var _this;\n\n    _classCallCheck(this, Prepare);\n\n    _this = _super.call(this);\n    _this.query = options.sql;\n    _this.onResult = callback;\n    _this.id = 0;\n    _this.fieldCount = 0;\n    _this.parameterCount = 0;\n    _this.fields = [];\n    _this.parameterDefinitions = [];\n    _this.options = options;\n    return _this;\n  }\n\n  _createClass(Prepare, [{\n    key: \"start\",\n    value: function start(packet, connection) {\n      var Connection = connection.constructor;\n      this.key = Connection.statementKey(this.options);\n\n      var statement = connection._statements.get(this.key);\n\n      if (statement) {\n        if (this.onResult) {\n          this.onResult(null, statement);\n        }\n\n        return null;\n      }\n\n      var cmdPacket = new Packets.PrepareStatement(this.query, connection.config.charsetNumber);\n      connection.writePacket(cmdPacket.toPacket(1));\n      return Prepare.prototype.prepareHeader;\n    }\n  }, {\n    key: \"prepareHeader\",\n    value: function prepareHeader(packet, connection) {\n      var header = new Packets.PreparedStatementHeader(packet);\n      this.id = header.id;\n      this.fieldCount = header.fieldCount;\n      this.parameterCount = header.parameterCount;\n\n      if (this.parameterCount > 0) {\n        return Prepare.prototype.readParameter;\n      }\n\n      if (this.fieldCount > 0) {\n        return Prepare.prototype.readField;\n      }\n\n      return this.prepareDone(connection);\n    }\n  }, {\n    key: \"readParameter\",\n    value: function readParameter(packet, connection) {\n      var def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n      this.parameterDefinitions.push(def);\n\n      if (this.parameterDefinitions.length === this.parameterCount) {\n        return Prepare.prototype.parametersEOF;\n      }\n\n      return this.readParameter;\n    }\n  }, {\n    key: \"readField\",\n    value: function readField(packet, connection) {\n      var def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n      this.fields.push(def);\n\n      if (this.fields.length === this.fieldCount) {\n        return Prepare.prototype.fieldsEOF;\n      }\n\n      return Prepare.prototype.readField;\n    }\n  }, {\n    key: \"parametersEOF\",\n    value: function parametersEOF(packet, connection) {\n      if (!packet.isEOF()) {\n        return connection.protocolError('Expected EOF packet after parameters');\n      }\n\n      if (this.fieldCount > 0) {\n        return Prepare.prototype.readField;\n      }\n\n      return this.prepareDone(connection);\n    }\n  }, {\n    key: \"fieldsEOF\",\n    value: function fieldsEOF(packet, connection) {\n      if (!packet.isEOF()) {\n        return connection.protocolError('Expected EOF packet after fields');\n      }\n\n      return this.prepareDone(connection);\n    }\n  }, {\n    key: \"prepareDone\",\n    value: function prepareDone(connection) {\n      var statement = new PreparedStatementInfo(this.query, this.id, this.fields, this.parameterDefinitions, connection);\n\n      connection._statements.set(this.key, statement);\n\n      if (this.onResult) {\n        this.onResult(null, statement);\n      }\n\n      return null;\n    }\n  }]);\n\n  return Prepare;\n}(Command);\n\nmodule.exports = Prepare;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/commands/prepare.js"],"names":["Packets","require","Command","CloseStatement","Execute","PreparedStatementInfo","query","id","columns","parameters","connection","rowParser","_connection","addCommand","callback","statement","values","Prepare","options","sql","onResult","fieldCount","parameterCount","fields","parameterDefinitions","packet","Connection","constructor","key","statementKey","_statements","get","cmdPacket","PrepareStatement","config","charsetNumber","writePacket","toPacket","prototype","prepareHeader","header","PreparedStatementHeader","readParameter","readField","prepareDone","def","ColumnDefinition","clientEncoding","push","length","parametersEOF","fieldsEOF","isEOF","protocolError","set","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Packets = require('../packets/index.js');\nconst Command = require('./command.js');\nconst CloseStatement = require('./close_statement.js');\nconst Execute = require('./execute.js');\n\nclass PreparedStatementInfo {\n  constructor(query, id, columns, parameters, connection) {\n    this.query = query;\n    this.id = id;\n    this.columns = columns;\n    this.parameters = parameters;\n    this.rowParser = null;\n    this._connection = connection;\n  }\n\n  close() {\n    return this._connection.addCommand(new CloseStatement(this.id));\n  }\n\n  execute(parameters, callback) {\n    if (typeof parameters === 'function') {\n      callback = parameters;\n      parameters = [];\n    }\n    return this._connection.addCommand(\n      new Execute({ statement: this, values: parameters }, callback)\n    );\n  }\n}\n\nclass Prepare extends Command {\n  constructor(options, callback) {\n    super();\n    this.query = options.sql;\n    this.onResult = callback;\n    this.id = 0;\n    this.fieldCount = 0;\n    this.parameterCount = 0;\n    this.fields = [];\n    this.parameterDefinitions = [];\n    this.options = options;\n  }\n\n  start(packet, connection) {\n    const Connection = connection.constructor;\n    this.key = Connection.statementKey(this.options);\n    const statement = connection._statements.get(this.key);\n    if (statement) {\n      if (this.onResult) {\n        this.onResult(null, statement);\n      }\n      return null;\n    }\n    const cmdPacket = new Packets.PrepareStatement(\n      this.query,\n      connection.config.charsetNumber\n    );\n    connection.writePacket(cmdPacket.toPacket(1));\n    return Prepare.prototype.prepareHeader;\n  }\n\n  prepareHeader(packet, connection) {\n    const header = new Packets.PreparedStatementHeader(packet);\n    this.id = header.id;\n    this.fieldCount = header.fieldCount;\n    this.parameterCount = header.parameterCount;\n    if (this.parameterCount > 0) {\n      return Prepare.prototype.readParameter;\n    } if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    } \n    return this.prepareDone(connection);\n    \n  }\n\n  readParameter(packet, connection) {\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.parameterDefinitions.push(def);\n    if (this.parameterDefinitions.length === this.parameterCount) {\n      return Prepare.prototype.parametersEOF;\n    }\n    return this.readParameter;\n  }\n\n  readField(packet, connection) {\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.fields.push(def);\n    if (this.fields.length === this.fieldCount) {\n      return Prepare.prototype.fieldsEOF;\n    }\n    return Prepare.prototype.readField;\n  }\n\n  parametersEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after parameters');\n    }\n    if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    } \n    return this.prepareDone(connection);\n    \n  }\n\n  fieldsEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after fields');\n    }\n    return this.prepareDone(connection);\n  }\n\n  prepareDone(connection) {\n    const statement = new PreparedStatementInfo(\n      this.query,\n      this.id,\n      this.fields,\n      this.parameterDefinitions,\n      connection\n    );\n    connection._statements.set(this.key, statement);\n    if (this.onResult) {\n      this.onResult(null, statement);\n    }\n    return null;\n  }\n}\n\nmodule.exports = Prepare;\n"]},"metadata":{},"sourceType":"script"}