{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Command = require('./command.js');\n\nvar Query = require('./query.js');\n\nvar Packets = require('../packets/index.js');\n\nvar getBinaryParser = require('../parsers/binary_parser.js');\n\nvar Execute = /*#__PURE__*/function (_Command) {\n  _inherits(Execute, _Command);\n\n  var _super = _createSuper(Execute);\n\n  function Execute(options, callback) {\n    var _this;\n\n    _classCallCheck(this, Execute);\n\n    _this = _super.call(this);\n    _this.statement = options.statement;\n    _this.sql = options.sql;\n    _this.values = options.values;\n    _this.onResult = callback;\n    _this.parameters = options.values;\n    _this.insertId = 0;\n    _this.timeout = options.timeout;\n    _this.queryTimeout = null;\n    _this._rows = [];\n    _this._fields = [];\n    _this._result = [];\n    _this._fieldCount = 0;\n    _this._rowParser = null;\n    _this._executeOptions = options;\n    _this._resultIndex = 0;\n    _this._localStream = null;\n\n    _this._unpipeStream = function () {};\n\n    _this._streamFactory = options.infileStreamFactory;\n    _this._connection = null;\n    return _this;\n  }\n\n  _createClass(Execute, [{\n    key: \"buildParserFromFields\",\n    value: function buildParserFromFields(fields, connection) {\n      return getBinaryParser(fields, this.options, connection.config);\n    }\n  }, {\n    key: \"start\",\n    value: function start(packet, connection) {\n      this._connection = connection;\n      this.options = Object.assign({}, connection.config, this._executeOptions);\n\n      this._setTimeout();\n\n      var executePacket = new Packets.Execute(this.statement.id, this.parameters, connection.config.charsetNumber, connection.config.timezone); //For reasons why this try-catch is here, please see\n      // https://github.com/sidorares/node-mysql2/pull/689\n      //For additional discussion, see\n      // 1. https://github.com/sidorares/node-mysql2/issues/493\n      // 2. https://github.com/sidorares/node-mysql2/issues/187\n      // 3. https://github.com/sidorares/node-mysql2/issues/480\n\n      try {\n        connection.writePacket(executePacket.toPacket(1));\n      } catch (error) {\n        this.onResult(error);\n      }\n\n      return Execute.prototype.resultsetHeader;\n    }\n  }, {\n    key: \"readField\",\n    value: function readField(packet, connection) {\n      var fields; // disabling for now, but would be great to find reliable way to parse fields only once\n      // fields reported by prepare can be empty at all or just incorrect - see #169\n      //\n      // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n      // const field = this.statement.columns.length == this._fieldCount ?\n      //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n\n      var field = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n      this._receivedFieldsCount++;\n\n      this._fields[this._resultIndex].push(field);\n\n      if (this._receivedFieldsCount === this._fieldCount) {\n        fields = this._fields[this._resultIndex];\n        this.emit('fields', fields, this._resultIndex);\n        return Execute.prototype.fieldsEOF;\n      }\n\n      return Execute.prototype.readField;\n    }\n  }, {\n    key: \"fieldsEOF\",\n    value: function fieldsEOF(packet, connection) {\n      // check EOF\n      if (!packet.isEOF()) {\n        return connection.protocolError('Expected EOF packet');\n      }\n\n      this._rowParser = this.buildParserFromFields(this._fields[this._resultIndex], connection);\n      return Execute.prototype.row;\n    }\n  }]);\n\n  return Execute;\n}(Command);\n\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream = Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype._setTimeout = Query.prototype._setTimeout;\nExecute.prototype._handleTimeoutError = Query.prototype._handleTimeoutError;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\nmodule.exports = Execute;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/commands/execute.js"],"names":["Command","require","Query","Packets","getBinaryParser","Execute","options","callback","statement","sql","values","onResult","parameters","insertId","timeout","queryTimeout","_rows","_fields","_result","_fieldCount","_rowParser","_executeOptions","_resultIndex","_localStream","_unpipeStream","_streamFactory","infileStreamFactory","_connection","fields","connection","config","packet","Object","assign","_setTimeout","executePacket","id","charsetNumber","timezone","writePacket","toPacket","error","prototype","resultsetHeader","field","ColumnDefinition","clientEncoding","_receivedFieldsCount","push","emit","fieldsEOF","readField","isEOF","protocolError","buildParserFromFields","row","done","doneInsert","_findOrCreateReadStream","_streamLocalInfile","_handleTimeoutError","stream","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Command = require('./command.js');\nconst Query = require('./query.js');\nconst Packets = require('../packets/index.js');\n\nconst getBinaryParser = require('../parsers/binary_parser.js');\n\nclass Execute extends Command {\n  constructor(options, callback) {\n    super();\n    this.statement = options.statement;\n    this.sql = options.sql;\n    this.values = options.values;\n    this.onResult = callback;\n    this.parameters = options.values;\n    this.insertId = 0;\n    this.timeout = options.timeout;\n    this.queryTimeout = null;\n    this._rows = [];\n    this._fields = [];\n    this._result = [];\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._executeOptions = options;\n    this._resultIndex = 0;\n    this._localStream = null;\n    this._unpipeStream = function() {};\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n\n  buildParserFromFields(fields, connection) {\n    return getBinaryParser(fields, this.options, connection.config);\n  }\n\n  start(packet, connection) {\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._executeOptions);\n    this._setTimeout();\n    const executePacket = new Packets.Execute(\n      this.statement.id,\n      this.parameters,\n      connection.config.charsetNumber,\n      connection.config.timezone\n    );\n    //For reasons why this try-catch is here, please see\n    // https://github.com/sidorares/node-mysql2/pull/689\n    //For additional discussion, see\n    // 1. https://github.com/sidorares/node-mysql2/issues/493\n    // 2. https://github.com/sidorares/node-mysql2/issues/187\n    // 3. https://github.com/sidorares/node-mysql2/issues/480\n    try {\n      connection.writePacket(executePacket.toPacket(1));\n    } catch (error) {\n      this.onResult(error);\n    }\n    return Execute.prototype.resultsetHeader;\n  }\n\n  readField(packet, connection) {\n    let fields;\n    // disabling for now, but would be great to find reliable way to parse fields only once\n    // fields reported by prepare can be empty at all or just incorrect - see #169\n    //\n    // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n    // const field = this.statement.columns.length == this._fieldCount ?\n    //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n    const field = new Packets.ColumnDefinition(\n      packet,\n      connection.clientEncoding\n    );\n    this._receivedFieldsCount++;\n    this._fields[this._resultIndex].push(field);\n    if (this._receivedFieldsCount === this._fieldCount) {\n      fields = this._fields[this._resultIndex];\n      this.emit('fields', fields, this._resultIndex);\n      return Execute.prototype.fieldsEOF;\n    }\n    return Execute.prototype.readField;\n  }\n\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n    this._rowParser = this.buildParserFromFields(\n      this._fields[this._resultIndex],\n      connection\n    );\n    return Execute.prototype.row;\n  }\n}\n\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream =\n  Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype._setTimeout = Query.prototype._setTimeout;\nExecute.prototype._handleTimeoutError = Query.prototype._handleTimeoutError;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\n\nmodule.exports = Execute;\n"]},"metadata":{},"sourceType":"script"}