{"ast":null,"code":"var User=require(\"../models/customer.model.js\");exports.create=function(req,res){// Validate request\nif(!req.body){res.status(400).send({message:\"Content can not be empty!\"});}// Create a Customer\nvar user=new User({email:req.body.email,password:req.body.password});// Save Customer in the database\nUser.create(user,function(err,data){if(err)res.status(500).send({message:err.message||\"Some error occurred while creating the user.\"});else res.send(data);});};// Retrieve all Customers from the database.\nexports.findAll=function(req,res){User.getAll(function(err,data){if(err)res.status(500).send({message:err.message||\"Some error occurred while retrieving users.\"});else res.send(data);});};// Find a single Customer with a customerId\nexports.findOne=function(req,res){User.findById(req.params.userId,function(err,data){if(err){if(err.kind===\"not_found\"){res.status(404).send({message:\"Not found User with id \".concat(req.params.userId,\".\")});}else{res.status(500).send({message:\"Error retrieving user with id \"+req.params.userId});}}else res.send(data);});};// Update a Customer identified by the customerId in the request\nexports.update=function(req,res){// Validate Request\nif(!req.body){res.status(400).send({message:\"Content can not be empty!\"});}User.updateById(req.params.userId,new User(req.body),function(err,data){if(err){if(err.kind===\"not_found\"){res.status(404).send({message:\"Not found User with id \".concat(req.params.userId,\".\")});}else{res.status(500).send({message:\"Error updating user with id \"+req.params.userId});}}else res.send(data);});};// Delete a Customer with the specified customerId in the request\nexports.delete=function(req,res){User.remove(req.params.userId,function(err,data){if(err){if(err.kind===\"not_found\"){res.status(404).send({message:\"Not found User with id \".concat(req.params.userId,\".\")});}else{res.status(500).send({message:\"Could not delete User with id \"+req.params.userId});}}else res.send({message:\"user was deleted successfully!\"});});};// Delete all Customers from the database.\nexports.deleteAll=function(req,res){User.removeAll(function(err,data){if(err)res.status(500).send({message:err.message||\"Some error occurred while removing all Users.\"});else res.send({message:\"All Users were deleted successfully!\"});});};","map":{"version":3,"sources":["/root/Test/src/app/controllers/customer.controller.js"],"names":["User","require","exports","create","req","res","body","status","send","message","user","email","password","err","data","findAll","getAll","findOne","findById","params","userId","kind","update","updateById","delete","remove","deleteAll","removeAll"],"mappings":"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","sourcesContent":["const User = require(\"../models/customer.model.js\");\n\nexports.create = (req, res) => {\n  // Validate request\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Content can not be empty!\"\n    });\n  }\n\n  // Create a Customer\n  const user = new User({\n    email: req.body.email,\n    password: req.body.password\n  });\n\n  // Save Customer in the database\n  User.create(user, (err, data) => {\n    if (err)\n      res.status(500).send({\n        message:\n          err.message || \"Some error occurred while creating the user.\"\n      });\n    else res.send(data);\n  });\n};\n\n// Retrieve all Customers from the database.\nexports.findAll = (req, res) => {\n  User.getAll((err, data) => {\n    if (err)\n      res.status(500).send({\n        message:\n          err.message || \"Some error occurred while retrieving users.\"\n      });\n    else res.send(data);\n  });\n};\n\n// Find a single Customer with a customerId\nexports.findOne = (req, res) => {\n  User.findById(req.params.userId, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Not found User with id ${req.params.userId}.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error retrieving user with id \" + req.params.userId\n        });\n      }\n    } else res.send(data);\n  });\n};\n\n// Update a Customer identified by the customerId in the request\nexports.update = (req, res) => {\n  // Validate Request\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Content can not be empty!\"\n    });\n  }\n\n  User.updateById(\n    req.params.userId,\n    new User(req.body),\n    (err, data) => {\n      if (err) {\n        if (err.kind === \"not_found\") {\n          res.status(404).send({\n            message: `Not found User with id ${req.params.userId}.`\n          });\n        } else {\n          res.status(500).send({\n            message: \"Error updating user with id \" + req.params.userId\n          });\n        }\n      } else res.send(data);\n    }\n  );\n};\n\n// Delete a Customer with the specified customerId in the request\nexports.delete = (req, res) => {\n  User.remove(req.params.userId, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Not found User with id ${req.params.userId}.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Could not delete User with id \" + req.params.userId\n        });\n      }\n    } else res.send({ message: `user was deleted successfully!` });\n  });\n};\n\n// Delete all Customers from the database.\nexports.deleteAll = (req, res) => {\n  User.removeAll((err, data) => {\n    if (err)\n      res.status(500).send({\n        message:\n          err.message || \"Some error occurred while removing all Users.\"\n      });\n    else res.send({ message: `All Users were deleted successfully!` });\n  });\n};\n\n\n"]},"metadata":{},"sourceType":"module"}