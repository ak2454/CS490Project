{"ast":null,"code":"var User = require(\"../models/customer.model.js\");\n\nexports.create = function (req, res) {\n  // Validate request\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Content can not be empty!\"\n    });\n  } // Create a Customer\n\n\n  var user = new User({\n    email: req.body.email,\n    password: req.body.password\n  }); // Save Customer in the database\n\n  User.create(user, function (err, data) {\n    if (err) res.status(500).send({\n      message: err.message || \"Some error occurred while creating the user.\"\n    });else res.send(data);\n  });\n}; // Retrieve all Customers from the database.\n\n\nexports.findAll = function (req, res) {\n  User.getAll(function (err, data) {\n    if (err) res.status(500).send({\n      message: err.message || \"Some error occurred while retrieving users.\"\n    });else res.send(data);\n  });\n}; // Find a single Customer with a customerId\n\n\nexports.findOne = function (req, res) {\n  User.findById(req.params.userId, function (err, data) {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: \"Not found User with id \".concat(req.params.userId, \".\")\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error retrieving user with id \" + req.params.userId\n        });\n      }\n    } else res.send(data);\n  });\n}; // Update a Customer identified by the customerId in the request\n\n\nexports.update = function (req, res) {\n  // Validate Request\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Content can not be empty!\"\n    });\n  }\n\n  User.updateById(req.params.userId, new User(req.body), function (err, data) {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: \"Not found User with id \".concat(req.params.userId, \".\")\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error updating user with id \" + req.params.userId\n        });\n      }\n    } else res.send(data);\n  });\n}; // Delete a Customer with the specified customerId in the request\n\n\nexports.delete = function (req, res) {\n  User.remove(req.params.userId, function (err, data) {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: \"Not found User with id \".concat(req.params.userId, \".\")\n        });\n      } else {\n        res.status(500).send({\n          message: \"Could not delete User with id \" + req.params.userId\n        });\n      }\n    } else res.send({\n      message: \"user was deleted successfully!\"\n    });\n  });\n}; // Delete all Customers from the database.\n\n\nexports.deleteAll = function (req, res) {\n  User.removeAll(function (err, data) {\n    if (err) res.status(500).send({\n      message: err.message || \"Some error occurred while removing all Users.\"\n    });else res.send({\n      message: \"All Users were deleted successfully!\"\n    });\n  });\n};","map":{"version":3,"sources":["/root/Test/app/controllers/customer.controller.js"],"names":["User","require","exports","create","req","res","body","status","send","message","user","email","password","err","data","findAll","getAll","findOne","findById","params","userId","kind","update","updateById","delete","remove","deleteAll","removeAll"],"mappings":"AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,6BAAD,CAApB;;AAEAC,OAAO,CAACC,MAAR,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B;AACA,MAAI,CAACD,GAAG,CAACE,IAAT,EAAe;AACbD,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EAAE;AADU,KAArB;AAGD,GAN4B,CAQ7B;;;AACA,MAAMC,IAAI,GAAG,IAAIV,IAAJ,CAAS;AACpBW,IAAAA,KAAK,EAAEP,GAAG,CAACE,IAAJ,CAASK,KADI;AAEpBC,IAAAA,QAAQ,EAAER,GAAG,CAACE,IAAJ,CAASM;AAFC,GAAT,CAAb,CAT6B,CAc7B;;AACAZ,EAAAA,IAAI,CAACG,MAAL,CAAYO,IAAZ,EAAkB,UAACG,GAAD,EAAMC,IAAN,EAAe;AAC/B,QAAID,GAAJ,EACER,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EACLI,GAAG,CAACJ,OAAJ,IAAe;AAFE,KAArB,EADF,KAKKJ,GAAG,CAACG,IAAJ,CAASM,IAAT;AACN,GAPD;AAQD,CAvBD,C,CAyBA;;;AACAZ,OAAO,CAACa,OAAR,GAAkB,UAACX,GAAD,EAAMC,GAAN,EAAc;AAC9BL,EAAAA,IAAI,CAACgB,MAAL,CAAY,UAACH,GAAD,EAAMC,IAAN,EAAe;AACzB,QAAID,GAAJ,EACER,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EACLI,GAAG,CAACJ,OAAJ,IAAe;AAFE,KAArB,EADF,KAKKJ,GAAG,CAACG,IAAJ,CAASM,IAAT;AACN,GAPD;AAQD,CATD,C,CAWA;;;AACAZ,OAAO,CAACe,OAAR,GAAkB,UAACb,GAAD,EAAMC,GAAN,EAAc;AAC9BL,EAAAA,IAAI,CAACkB,QAAL,CAAcd,GAAG,CAACe,MAAJ,CAAWC,MAAzB,EAAiC,UAACP,GAAD,EAAMC,IAAN,EAAe;AAC9C,QAAID,GAAJ,EAAS;AACP,UAAIA,GAAG,CAACQ,IAAJ,KAAa,WAAjB,EAA8B;AAC5BhB,QAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,UAAAA,OAAO,mCAA4BL,GAAG,CAACe,MAAJ,CAAWC,MAAvC;AADY,SAArB;AAGD,OAJD,MAIO;AACLf,QAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,UAAAA,OAAO,EAAE,mCAAmCL,GAAG,CAACe,MAAJ,CAAWC;AADpC,SAArB;AAGD;AACF,KAVD,MAUOf,GAAG,CAACG,IAAJ,CAASM,IAAT;AACR,GAZD;AAaD,CAdD,C,CAgBA;;;AACAZ,OAAO,CAACoB,MAAR,GAAiB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC7B;AACA,MAAI,CAACD,GAAG,CAACE,IAAT,EAAe;AACbD,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EAAE;AADU,KAArB;AAGD;;AAEDT,EAAAA,IAAI,CAACuB,UAAL,CACEnB,GAAG,CAACe,MAAJ,CAAWC,MADb,EAEE,IAAIpB,IAAJ,CAASI,GAAG,CAACE,IAAb,CAFF,EAGE,UAACO,GAAD,EAAMC,IAAN,EAAe;AACb,QAAID,GAAJ,EAAS;AACP,UAAIA,GAAG,CAACQ,IAAJ,KAAa,WAAjB,EAA8B;AAC5BhB,QAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,UAAAA,OAAO,mCAA4BL,GAAG,CAACe,MAAJ,CAAWC,MAAvC;AADY,SAArB;AAGD,OAJD,MAIO;AACLf,QAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,UAAAA,OAAO,EAAE,iCAAiCL,GAAG,CAACe,MAAJ,CAAWC;AADlC,SAArB;AAGD;AACF,KAVD,MAUOf,GAAG,CAACG,IAAJ,CAASM,IAAT;AACR,GAfH;AAiBD,CAzBD,C,CA2BA;;;AACAZ,OAAO,CAACsB,MAAR,GAAiB,UAACpB,GAAD,EAAMC,GAAN,EAAc;AAC7BL,EAAAA,IAAI,CAACyB,MAAL,CAAYrB,GAAG,CAACe,MAAJ,CAAWC,MAAvB,EAA+B,UAACP,GAAD,EAAMC,IAAN,EAAe;AAC5C,QAAID,GAAJ,EAAS;AACP,UAAIA,GAAG,CAACQ,IAAJ,KAAa,WAAjB,EAA8B;AAC5BhB,QAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,UAAAA,OAAO,mCAA4BL,GAAG,CAACe,MAAJ,CAAWC,MAAvC;AADY,SAArB;AAGD,OAJD,MAIO;AACLf,QAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,UAAAA,OAAO,EAAE,mCAAmCL,GAAG,CAACe,MAAJ,CAAWC;AADpC,SAArB;AAGD;AACF,KAVD,MAUOf,GAAG,CAACG,IAAJ,CAAS;AAAEC,MAAAA,OAAO;AAAT,KAAT;AACR,GAZD;AAaD,CAdD,C,CAgBA;;;AACAP,OAAO,CAACwB,SAAR,GAAoB,UAACtB,GAAD,EAAMC,GAAN,EAAc;AAChCL,EAAAA,IAAI,CAAC2B,SAAL,CAAe,UAACd,GAAD,EAAMC,IAAN,EAAe;AAC5B,QAAID,GAAJ,EACER,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EACLI,GAAG,CAACJ,OAAJ,IAAe;AAFE,KAArB,EADF,KAKKJ,GAAG,CAACG,IAAJ,CAAS;AAAEC,MAAAA,OAAO;AAAT,KAAT;AACN,GAPD;AAQD,CATD","sourcesContent":["const User = require(\"../models/customer.model.js\");\n\nexports.create = (req, res) => {\n  // Validate request\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Content can not be empty!\"\n    });\n  }\n\n  // Create a Customer\n  const user = new User({\n    email: req.body.email,\n    password: req.body.password\n  });\n\n  // Save Customer in the database\n  User.create(user, (err, data) => {\n    if (err)\n      res.status(500).send({\n        message:\n          err.message || \"Some error occurred while creating the user.\"\n      });\n    else res.send(data);\n  });\n};\n\n// Retrieve all Customers from the database.\nexports.findAll = (req, res) => {\n  User.getAll((err, data) => {\n    if (err)\n      res.status(500).send({\n        message:\n          err.message || \"Some error occurred while retrieving users.\"\n      });\n    else res.send(data);\n  });\n};\n\n// Find a single Customer with a customerId\nexports.findOne = (req, res) => {\n  User.findById(req.params.userId, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Not found User with id ${req.params.userId}.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Error retrieving user with id \" + req.params.userId\n        });\n      }\n    } else res.send(data);\n  });\n};\n\n// Update a Customer identified by the customerId in the request\nexports.update = (req, res) => {\n  // Validate Request\n  if (!req.body) {\n    res.status(400).send({\n      message: \"Content can not be empty!\"\n    });\n  }\n\n  User.updateById(\n    req.params.userId,\n    new User(req.body),\n    (err, data) => {\n      if (err) {\n        if (err.kind === \"not_found\") {\n          res.status(404).send({\n            message: `Not found User with id ${req.params.userId}.`\n          });\n        } else {\n          res.status(500).send({\n            message: \"Error updating user with id \" + req.params.userId\n          });\n        }\n      } else res.send(data);\n    }\n  );\n};\n\n// Delete a Customer with the specified customerId in the request\nexports.delete = (req, res) => {\n  User.remove(req.params.userId, (err, data) => {\n    if (err) {\n      if (err.kind === \"not_found\") {\n        res.status(404).send({\n          message: `Not found User with id ${req.params.userId}.`\n        });\n      } else {\n        res.status(500).send({\n          message: \"Could not delete User with id \" + req.params.userId\n        });\n      }\n    } else res.send({ message: `user was deleted successfully!` });\n  });\n};\n\n// Delete all Customers from the database.\nexports.deleteAll = (req, res) => {\n  User.removeAll((err, data) => {\n    if (err)\n      res.status(500).send({\n        message:\n          err.message || \"Some error occurred while removing all Users.\"\n      });\n    else res.send({ message: `All Users were deleted successfully!` });\n  });\n};\n\n\n"]},"metadata":{},"sourceType":"script"}