{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('url'),\n    URL = _require.URL;\n\nvar ClientConstants = require('./constants/client');\n\nvar Charsets = require('./constants/charsets');\n\nvar SSLProfiles = null;\nvar validOptions = {\n  authPlugins: 1,\n  authSwitchHandler: 1,\n  bigNumberStrings: 1,\n  charset: 1,\n  charsetNumber: 1,\n  compress: 1,\n  connectAttributes: 1,\n  connectTimeout: 1,\n  database: 1,\n  dateStrings: 1,\n  debug: 1,\n  decimalNumbers: 1,\n  enableKeepAlive: 1,\n  flags: 1,\n  host: 1,\n  insecureAuth: 1,\n  isServer: 1,\n  keepAliveInitialDelay: 1,\n  localAddress: 1,\n  maxPreparedStatements: 1,\n  multipleStatements: 1,\n  namedPlaceholders: 1,\n  nestTables: 1,\n  password: 1,\n  passwordSha1: 1,\n  pool: 1,\n  port: 1,\n  queryFormat: 1,\n  rowsAsArray: 1,\n  socketPath: 1,\n  ssl: 1,\n  stream: 1,\n  stringifyObjects: 1,\n  supportBigNumbers: 1,\n  timezone: 1,\n  trace: 1,\n  typeCast: 1,\n  uri: 1,\n  user: 1,\n  // These options are used for Pool\n  connectionLimit: 1,\n  Promise: 1,\n  queueLimit: 1,\n  waitForConnections: 1\n};\n\nvar ConnectionConfig = /*#__PURE__*/function () {\n  function ConnectionConfig(options) {\n    _classCallCheck(this, ConnectionConfig);\n\n    if (typeof options === 'string') {\n      options = ConnectionConfig.parseUrl(options);\n    } else if (options && options.uri) {\n      var uriOptions = ConnectionConfig.parseUrl(options.uri);\n\n      for (var key in uriOptions) {\n        if (!Object.prototype.hasOwnProperty.call(uriOptions, key)) continue;\n        if (options[key]) continue;\n        options[key] = uriOptions[key];\n      }\n    }\n\n    for (var _key in options) {\n      if (!Object.prototype.hasOwnProperty.call(options, _key)) continue;\n\n      if (validOptions[_key] !== 1) {\n        // REVIEW: Should this be emitted somehow?\n        // eslint-disable-next-line no-console\n        console.error(\"Ignoring invalid configuration option passed to Connection: \".concat(_key, \". This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection\"));\n      }\n    }\n\n    this.isServer = options.isServer;\n    this.stream = options.stream;\n    this.host = options.host || 'localhost';\n    this.port = options.port || 3306;\n    this.localAddress = options.localAddress;\n    this.socketPath = options.socketPath;\n    this.user = options.user || undefined;\n    this.password = options.password || undefined;\n    this.passwordSha1 = options.passwordSha1 || undefined;\n    this.database = options.database;\n    this.connectTimeout = isNaN(options.connectTimeout) ? 10 * 1000 : options.connectTimeout;\n    this.insecureAuth = options.insecureAuth || false;\n    this.supportBigNumbers = options.supportBigNumbers || false;\n    this.bigNumberStrings = options.bigNumberStrings || false;\n    this.decimalNumbers = options.decimalNumbers || false;\n    this.dateStrings = options.dateStrings || false;\n    this.debug = options.debug;\n    this.trace = options.trace !== false;\n    this.stringifyObjects = options.stringifyObjects || false;\n    this.enableKeepAlive = !!options.enableKeepAlive;\n    this.keepAliveInitialDelay = options.keepAliveInitialDelay || 0;\n\n    if (options.timezone && !/^(?:local|Z|[ +-]\\d\\d:\\d\\d)$/.test(options.timezone)) {\n      // strictly supports timezones specified by mysqljs/mysql:\n      // https://github.com/mysqljs/mysql#user-content-connection-options\n      // eslint-disable-next-line no-console\n      console.error(\"Ignoring invalid timezone passed to Connection: \".concat(options.timezone, \". This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection\")); // SqlStrings falls back to UTC on invalid timezone\n\n      this.timezone = 'Z';\n    } else {\n      this.timezone = options.timezone || 'local';\n    }\n\n    this.queryFormat = options.queryFormat;\n    this.pool = options.pool || undefined;\n    this.ssl = typeof options.ssl === 'string' ? ConnectionConfig.getSSLProfile(options.ssl) : options.ssl || false;\n    this.multipleStatements = options.multipleStatements || false;\n    this.rowsAsArray = options.rowsAsArray || false;\n    this.namedPlaceholders = options.namedPlaceholders || false;\n    this.nestTables = options.nestTables === undefined ? undefined : options.nestTables;\n    this.typeCast = options.typeCast === undefined ? true : options.typeCast;\n\n    if (this.timezone[0] === ' ') {\n      // \"+\" is a url encoded char for space so it\n      // gets translated to space when giving a\n      // connection string..\n      this.timezone = \"+\".concat(this.timezone.substr(1));\n    }\n\n    if (this.ssl) {\n      if (typeof this.ssl !== 'object') {\n        throw new TypeError(\"SSL profile must be an object, instead it's a \".concat(typeof this.ssl));\n      } // Default rejectUnauthorized to true\n\n\n      this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n    }\n\n    this.maxPacketSize = 0;\n    this.charsetNumber = options.charset ? ConnectionConfig.getCharsetNumber(options.charset) : options.charsetNumber || Charsets.UTF8MB4_UNICODE_CI;\n    this.compress = options.compress || false;\n    this.authPlugins = options.authPlugins;\n    this.authSwitchHandler = options.authSwitchHandler;\n    this.clientFlags = ConnectionConfig.mergeFlags(ConnectionConfig.getDefaultFlags(options), options.flags || '');\n    this.connectAttributes = options.connectAttributes;\n    this.maxPreparedStatements = options.maxPreparedStatements || 16000;\n  }\n\n  _createClass(ConnectionConfig, null, [{\n    key: \"mergeFlags\",\n    value: function mergeFlags(default_flags, user_flags) {\n      var flags = 0x0,\n          i;\n\n      if (!Array.isArray(user_flags)) {\n        user_flags = String(user_flags || '').toUpperCase().split(/\\s*,+\\s*/);\n      } // add default flags unless \"blacklisted\"\n\n\n      for (i in default_flags) {\n        if (user_flags.indexOf(\"-\".concat(default_flags[i])) >= 0) {\n          continue;\n        }\n\n        flags |= ClientConstants[default_flags[i]] || 0x0;\n      } // add user flags unless already already added\n\n\n      for (i in user_flags) {\n        if (user_flags[i][0] === '-') {\n          continue;\n        }\n\n        if (default_flags.indexOf(user_flags[i]) >= 0) {\n          continue;\n        }\n\n        flags |= ClientConstants[user_flags[i]] || 0x0;\n      }\n\n      return flags;\n    }\n  }, {\n    key: \"getDefaultFlags\",\n    value: function getDefaultFlags(options) {\n      var defaultFlags = ['LONG_PASSWORD', 'FOUND_ROWS', 'LONG_FLAG', 'CONNECT_WITH_DB', 'ODBC', 'LOCAL_FILES', 'IGNORE_SPACE', 'PROTOCOL_41', 'IGNORE_SIGPIPE', 'TRANSACTIONS', 'RESERVED', 'SECURE_CONNECTION', 'MULTI_RESULTS', 'TRANSACTIONS', 'SESSION_TRACK'];\n\n      if (options && options.multipleStatements) {\n        defaultFlags.push('MULTI_STATEMENTS');\n      }\n\n      defaultFlags.push('PLUGIN_AUTH');\n      defaultFlags.push('PLUGIN_AUTH_LENENC_CLIENT_DATA');\n\n      if (options && options.connectAttributes) {\n        defaultFlags.push('CONNECT_ATTRS');\n      }\n\n      return defaultFlags;\n    }\n  }, {\n    key: \"getCharsetNumber\",\n    value: function getCharsetNumber(charset) {\n      var num = Charsets[charset.toUpperCase()];\n\n      if (num === undefined) {\n        throw new TypeError(\"Unknown charset '\".concat(charset, \"'\"));\n      }\n\n      return num;\n    }\n  }, {\n    key: \"getSSLProfile\",\n    value: function getSSLProfile(name) {\n      if (!SSLProfiles) {\n        SSLProfiles = require('./constants/ssl_profiles.js');\n      }\n\n      var ssl = SSLProfiles[name];\n\n      if (ssl === undefined) {\n        throw new TypeError(\"Unknown SSL profile '\".concat(name, \"'\"));\n      }\n\n      return ssl;\n    }\n  }, {\n    key: \"parseUrl\",\n    value: function parseUrl(url) {\n      var parsedUrl = new URL(url);\n      var options = {\n        host: parsedUrl.hostname,\n        port: parsedUrl.port,\n        database: parsedUrl.pathname.substr(1),\n        user: parsedUrl.username,\n        password: parsedUrl.password\n      };\n      parsedUrl.searchParams.forEach(function (value, key) {\n        try {\n          // Try to parse this as a JSON expression first\n          options[key] = JSON.parse(value);\n        } catch (err) {\n          // Otherwise assume it is a plain string\n          options[key] = value;\n        }\n      });\n      return options;\n    }\n  }]);\n\n  return ConnectionConfig;\n}();\n\nmodule.exports = ConnectionConfig;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/connection_config.js"],"names":["require","URL","ClientConstants","Charsets","SSLProfiles","validOptions","authPlugins","authSwitchHandler","bigNumberStrings","charset","charsetNumber","compress","connectAttributes","connectTimeout","database","dateStrings","debug","decimalNumbers","enableKeepAlive","flags","host","insecureAuth","isServer","keepAliveInitialDelay","localAddress","maxPreparedStatements","multipleStatements","namedPlaceholders","nestTables","password","passwordSha1","pool","port","queryFormat","rowsAsArray","socketPath","ssl","stream","stringifyObjects","supportBigNumbers","timezone","trace","typeCast","uri","user","connectionLimit","Promise","queueLimit","waitForConnections","ConnectionConfig","options","parseUrl","uriOptions","key","Object","prototype","hasOwnProperty","call","console","error","undefined","isNaN","test","getSSLProfile","substr","TypeError","rejectUnauthorized","maxPacketSize","getCharsetNumber","UTF8MB4_UNICODE_CI","clientFlags","mergeFlags","getDefaultFlags","default_flags","user_flags","i","Array","isArray","String","toUpperCase","split","indexOf","defaultFlags","push","num","name","url","parsedUrl","hostname","pathname","username","searchParams","forEach","value","JSON","parse","err","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { URL } = require('url');\nconst ClientConstants = require('./constants/client');\nconst Charsets = require('./constants/charsets');\nlet SSLProfiles = null;\n\nconst validOptions = {\n  authPlugins: 1,\n  authSwitchHandler: 1,\n  bigNumberStrings: 1,\n  charset: 1,\n  charsetNumber: 1,\n  compress: 1,\n  connectAttributes: 1,\n  connectTimeout: 1,\n  database: 1,\n  dateStrings: 1,\n  debug: 1,\n  decimalNumbers: 1,\n  enableKeepAlive: 1,\n  flags: 1,\n  host: 1,\n  insecureAuth: 1,\n  isServer: 1,\n  keepAliveInitialDelay: 1,\n  localAddress: 1,\n  maxPreparedStatements: 1,\n  multipleStatements: 1,\n  namedPlaceholders: 1,\n  nestTables: 1,\n  password: 1,\n  passwordSha1: 1,\n  pool: 1,\n  port: 1,\n  queryFormat: 1,\n  rowsAsArray: 1,\n  socketPath: 1,\n  ssl: 1,\n  stream: 1,\n  stringifyObjects: 1,\n  supportBigNumbers: 1,\n  timezone: 1,\n  trace: 1,\n  typeCast: 1,\n  uri: 1,\n  user: 1,\n  // These options are used for Pool\n  connectionLimit: 1,\n  Promise: 1,\n  queueLimit: 1,\n  waitForConnections: 1\n};\n\nclass ConnectionConfig {\n  constructor(options) {\n    if (typeof options === 'string') {\n      options = ConnectionConfig.parseUrl(options);\n    } else if (options && options.uri) {\n      const uriOptions = ConnectionConfig.parseUrl(options.uri);\n      for (const key in uriOptions) {\n        if (!Object.prototype.hasOwnProperty.call(uriOptions, key)) continue;\n        if (options[key]) continue;\n        options[key] = uriOptions[key];\n      }\n    }\n    for (const key in options) {\n      if (!Object.prototype.hasOwnProperty.call(options, key)) continue;\n      if (validOptions[key] !== 1) {\n        // REVIEW: Should this be emitted somehow?\n        // eslint-disable-next-line no-console\n        console.error(\n          `Ignoring invalid configuration option passed to Connection: ${key}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`\n        );\n      }\n    }\n    this.isServer = options.isServer;\n    this.stream = options.stream;\n    this.host = options.host || 'localhost';\n    this.port = options.port || 3306;\n    this.localAddress = options.localAddress;\n    this.socketPath = options.socketPath;\n    this.user = options.user || undefined;\n    this.password = options.password || undefined;\n    this.passwordSha1 = options.passwordSha1 || undefined;\n    this.database = options.database;\n    this.connectTimeout = isNaN(options.connectTimeout)\n      ? 10 * 1000\n      : options.connectTimeout;\n    this.insecureAuth = options.insecureAuth || false;\n    this.supportBigNumbers = options.supportBigNumbers || false;\n    this.bigNumberStrings = options.bigNumberStrings || false;\n    this.decimalNumbers = options.decimalNumbers || false;\n    this.dateStrings = options.dateStrings || false;\n    this.debug = options.debug;\n    this.trace = options.trace !== false;\n    this.stringifyObjects = options.stringifyObjects || false;\n    this.enableKeepAlive = !!options.enableKeepAlive;\n    this.keepAliveInitialDelay = options.keepAliveInitialDelay || 0;\n    if (\n      options.timezone &&\n      !/^(?:local|Z|[ +-]\\d\\d:\\d\\d)$/.test(options.timezone)\n    ) {\n      // strictly supports timezones specified by mysqljs/mysql:\n      // https://github.com/mysqljs/mysql#user-content-connection-options\n      // eslint-disable-next-line no-console\n      console.error(\n        `Ignoring invalid timezone passed to Connection: ${options.timezone}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`\n      );\n      // SqlStrings falls back to UTC on invalid timezone\n      this.timezone = 'Z';\n    } else {\n      this.timezone = options.timezone || 'local';\n    }\n    this.queryFormat = options.queryFormat;\n    this.pool = options.pool || undefined;\n    this.ssl =\n      typeof options.ssl === 'string'\n        ? ConnectionConfig.getSSLProfile(options.ssl)\n        : options.ssl || false;\n    this.multipleStatements = options.multipleStatements || false;\n    this.rowsAsArray = options.rowsAsArray || false;\n    this.namedPlaceholders = options.namedPlaceholders || false;\n    this.nestTables =\n      options.nestTables === undefined ? undefined : options.nestTables;\n    this.typeCast = options.typeCast === undefined ? true : options.typeCast;\n    if (this.timezone[0] === ' ') {\n      // \"+\" is a url encoded char for space so it\n      // gets translated to space when giving a\n      // connection string..\n      this.timezone = `+${this.timezone.substr(1)}`;\n    }\n    if (this.ssl) {\n      if (typeof this.ssl !== 'object') {\n        throw new TypeError(\n          `SSL profile must be an object, instead it's a ${typeof this.ssl}`\n        );\n      }\n      // Default rejectUnauthorized to true\n      this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n    }\n    this.maxPacketSize = 0;\n    this.charsetNumber = options.charset\n      ? ConnectionConfig.getCharsetNumber(options.charset)\n      : options.charsetNumber || Charsets.UTF8MB4_UNICODE_CI;\n    this.compress = options.compress || false;\n    this.authPlugins = options.authPlugins;\n    this.authSwitchHandler = options.authSwitchHandler;\n    this.clientFlags = ConnectionConfig.mergeFlags(\n      ConnectionConfig.getDefaultFlags(options),\n      options.flags || ''\n    );\n    this.connectAttributes = options.connectAttributes;\n    this.maxPreparedStatements = options.maxPreparedStatements || 16000;\n  }\n\n  static mergeFlags(default_flags, user_flags) {\n    let flags = 0x0,\n      i;\n    if (!Array.isArray(user_flags)) {\n      user_flags = String(user_flags || '')\n        .toUpperCase()\n        .split(/\\s*,+\\s*/);\n    }\n    // add default flags unless \"blacklisted\"\n    for (i in default_flags) {\n      if (user_flags.indexOf(`-${default_flags[i]}`) >= 0) {\n        continue;\n      }\n      flags |= ClientConstants[default_flags[i]] || 0x0;\n    }\n    // add user flags unless already already added\n    for (i in user_flags) {\n      if (user_flags[i][0] === '-') {\n        continue;\n      }\n      if (default_flags.indexOf(user_flags[i]) >= 0) {\n        continue;\n      }\n      flags |= ClientConstants[user_flags[i]] || 0x0;\n    }\n    return flags;\n  }\n\n  static getDefaultFlags(options) {\n    const defaultFlags = [\n      'LONG_PASSWORD',\n      'FOUND_ROWS',\n      'LONG_FLAG',\n      'CONNECT_WITH_DB',\n      'ODBC',\n      'LOCAL_FILES',\n      'IGNORE_SPACE',\n      'PROTOCOL_41',\n      'IGNORE_SIGPIPE',\n      'TRANSACTIONS',\n      'RESERVED',\n      'SECURE_CONNECTION',\n      'MULTI_RESULTS',\n      'TRANSACTIONS',\n      'SESSION_TRACK'\n    ];\n    if (options && options.multipleStatements) {\n      defaultFlags.push('MULTI_STATEMENTS');\n    }\n    defaultFlags.push('PLUGIN_AUTH');\n    defaultFlags.push('PLUGIN_AUTH_LENENC_CLIENT_DATA');\n\n    if (options && options.connectAttributes) {\n      defaultFlags.push('CONNECT_ATTRS');\n    }\n    return defaultFlags;\n  }\n\n  static getCharsetNumber(charset) {\n    const num = Charsets[charset.toUpperCase()];\n    if (num === undefined) {\n      throw new TypeError(`Unknown charset '${charset}'`);\n    }\n    return num;\n  }\n\n  static getSSLProfile(name) {\n    if (!SSLProfiles) {\n      SSLProfiles = require('./constants/ssl_profiles.js');\n    }\n    const ssl = SSLProfiles[name];\n    if (ssl === undefined) {\n      throw new TypeError(`Unknown SSL profile '${name}'`);\n    }\n    return ssl;\n  }\n\n  static parseUrl(url) {\n    const parsedUrl = new URL(url);\n    const options = {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port,\n      database: parsedUrl.pathname.substr(1),\n      user: parsedUrl.username,\n      password: parsedUrl.password\n    };\n    parsedUrl.searchParams.forEach((value, key) => {\n      try {\n        // Try to parse this as a JSON expression first\n        options[key] = JSON.parse(value);\n      } catch (err) {\n        // Otherwise assume it is a plain string\n        options[key] = value;\n      }\n    });\n    return options;\n  }\n}\n\nmodule.exports = ConnectionConfig;\n"]},"metadata":{},"sourceType":"script"}