{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Packet = require('../packets/packet');\n\nvar TextRow = /*#__PURE__*/function () {\n  function TextRow(columns) {\n    _classCallCheck(this, TextRow);\n\n    this.columns = columns || [];\n  }\n\n  _createClass(TextRow, null, [{\n    key: \"fromPacket\",\n    value: function fromPacket(packet) {\n      // packet.reset(); // set offset to starting point?\n      var columns = [];\n\n      while (packet.haveMoreData()) {\n        columns.push(packet.readLengthCodedString());\n      }\n\n      return new TextRow(columns);\n    }\n  }, {\n    key: \"toPacket\",\n    value: function toPacket(columns, encoding) {\n      var sequenceId = 0; // TODO remove, this is calculated now in connecton\n\n      var length = 0;\n      columns.forEach(function (val) {\n        if (val === null || typeof val === 'undefined') {\n          ++length;\n          return;\n        }\n\n        length += Packet.lengthCodedStringLength(val.toString(10), encoding);\n      });\n      var buffer = Buffer.allocUnsafe(length + 4);\n      var packet = new Packet(sequenceId, buffer, 0, length + 4);\n      packet.offset = 4;\n      columns.forEach(function (val) {\n        if (val === null) {\n          packet.writeNull();\n          return;\n        }\n\n        if (typeof val === 'undefined') {\n          packet.writeInt8(0);\n          return;\n        }\n\n        packet.writeLengthCodedString(val.toString(10), encoding);\n      });\n      return packet;\n    }\n  }]);\n\n  return TextRow;\n}();\n\nmodule.exports = TextRow;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/packets/text_row.js"],"names":["Packet","require","TextRow","columns","packet","haveMoreData","push","readLengthCodedString","encoding","sequenceId","length","forEach","val","lengthCodedStringLength","toString","buffer","Buffer","allocUnsafe","offset","writeNull","writeInt8","writeLengthCodedString","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;IAEMC,O;AACJ,mBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACD;;;;WAED,oBAAkBC,MAAlB,EAA0B;AACxB;AACA,UAAMD,OAAO,GAAG,EAAhB;;AACA,aAAOC,MAAM,CAACC,YAAP,EAAP,EAA8B;AAC5BF,QAAAA,OAAO,CAACG,IAAR,CAAaF,MAAM,CAACG,qBAAP,EAAb;AACD;;AACD,aAAO,IAAIL,OAAJ,CAAYC,OAAZ,CAAP;AACD;;;WAED,kBAAgBA,OAAhB,EAAyBK,QAAzB,EAAmC;AACjC,UAAMC,UAAU,GAAG,CAAnB,CADiC,CACX;;AACtB,UAAIC,MAAM,GAAG,CAAb;AACAP,MAAAA,OAAO,CAACQ,OAAR,CAAgB,UAAAC,GAAG,EAAI;AACrB,YAAIA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAnC,EAAgD;AAC9C,YAAEF,MAAF;AACA;AACD;;AACDA,QAAAA,MAAM,IAAIV,MAAM,CAACa,uBAAP,CAA+BD,GAAG,CAACE,QAAJ,CAAa,EAAb,CAA/B,EAAiDN,QAAjD,CAAV;AACD,OAND;AAOA,UAAMO,MAAM,GAAGC,MAAM,CAACC,WAAP,CAAmBP,MAAM,GAAG,CAA5B,CAAf;AACA,UAAMN,MAAM,GAAG,IAAIJ,MAAJ,CAAWS,UAAX,EAAuBM,MAAvB,EAA+B,CAA/B,EAAkCL,MAAM,GAAG,CAA3C,CAAf;AACAN,MAAAA,MAAM,CAACc,MAAP,GAAgB,CAAhB;AACAf,MAAAA,OAAO,CAACQ,OAAR,CAAgB,UAAAC,GAAG,EAAI;AACrB,YAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChBR,UAAAA,MAAM,CAACe,SAAP;AACA;AACD;;AACD,YAAI,OAAOP,GAAP,KAAe,WAAnB,EAAgC;AAC9BR,UAAAA,MAAM,CAACgB,SAAP,CAAiB,CAAjB;AACA;AACD;;AACDhB,QAAAA,MAAM,CAACiB,sBAAP,CAA8BT,GAAG,CAACE,QAAJ,CAAa,EAAb,CAA9B,EAAgDN,QAAhD;AACD,OAVD;AAWA,aAAOJ,MAAP;AACD;;;;;;AAGHkB,MAAM,CAACC,OAAP,GAAiBrB,OAAjB","sourcesContent":["'use strict';\n\nconst Packet = require('../packets/packet');\n\nclass TextRow {\n  constructor(columns) {\n    this.columns = columns || [];\n  }\n\n  static fromPacket(packet) {\n    // packet.reset(); // set offset to starting point?\n    const columns = [];\n    while (packet.haveMoreData()) {\n      columns.push(packet.readLengthCodedString());\n    }\n    return new TextRow(columns);\n  }\n\n  static toPacket(columns, encoding) {\n    const sequenceId = 0; // TODO remove, this is calculated now in connecton\n    let length = 0;\n    columns.forEach(val => {\n      if (val === null || typeof val === 'undefined') {\n        ++length;\n        return;\n      }\n      length += Packet.lengthCodedStringLength(val.toString(10), encoding);\n    });\n    const buffer = Buffer.allocUnsafe(length + 4);\n    const packet = new Packet(sequenceId, buffer, 0, length + 4);\n    packet.offset = 4;\n    columns.forEach(val => {\n      if (val === null) {\n        packet.writeNull();\n        return;\n      }\n      if (typeof val === 'undefined') {\n        packet.writeInt8(0);\n        return;\n      }\n      packet.writeLengthCodedString(val.toString(10), encoding);\n    });\n    return packet;\n  }\n}\n\nmodule.exports = TextRow;\n"]},"metadata":{},"sourceType":"script"}