{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar CommandCode = require('../constants/commands.js');\n\nvar ClientConstants = require('../constants/client.js');\n\nvar Packet = require('../packets/packet.js');\n\nvar auth41 = require('../auth_41.js');\n\nvar CharsetToEncoding = require('../constants/charset_encodings.js'); // https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER\n\n\nvar ChangeUser = /*#__PURE__*/function () {\n  function ChangeUser(opts) {\n    _classCallCheck(this, ChangeUser);\n\n    this.flags = opts.flags;\n    this.user = opts.user || '';\n    this.database = opts.database || '';\n    this.password = opts.password || '';\n    this.passwordSha1 = opts.passwordSha1;\n    this.authPluginData1 = opts.authPluginData1;\n    this.authPluginData2 = opts.authPluginData2;\n    this.connectAttributes = opts.connectAttrinutes || {};\n    var authToken;\n\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, this.authPluginData1, this.authPluginData2);\n    } else {\n      authToken = auth41.calculateToken(this.password, this.authPluginData1, this.authPluginData2);\n    }\n\n    this.authToken = authToken;\n    this.charsetNumber = opts.charsetNumber;\n  } // TODO\n  // ChangeUser.fromPacket = function(packet)\n  // };\n\n\n  _createClass(ChangeUser, [{\n    key: \"serializeToBuffer\",\n    value: function serializeToBuffer(buffer) {\n      var _this = this;\n\n      var isSet = function isSet(flag) {\n        return _this.flags & ClientConstants[flag];\n      };\n\n      var packet = new Packet(0, buffer, 0, buffer.length);\n      packet.offset = 4;\n      var encoding = CharsetToEncoding[this.charsetNumber];\n      packet.writeInt8(CommandCode.CHANGE_USER);\n      packet.writeNullTerminatedString(this.user, encoding);\n\n      if (isSet('SECURE_CONNECTION')) {\n        packet.writeInt8(this.authToken.length);\n        packet.writeBuffer(this.authToken);\n      } else {\n        packet.writeBuffer(this.authToken);\n        packet.writeInt8(0);\n      }\n\n      packet.writeNullTerminatedString(this.database, encoding);\n      packet.writeInt16(this.charsetNumber);\n\n      if (isSet('PLUGIN_AUTH')) {\n        // TODO: read this from parameters\n        packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n      }\n\n      if (isSet('CONNECT_ATTRS')) {\n        var connectAttributes = this.connectAttributes;\n        var attrNames = Object.keys(connectAttributes);\n        var keysLength = 0;\n\n        for (var k = 0; k < attrNames.length; ++k) {\n          keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n          keysLength += Packet.lengthCodedStringLength(connectAttributes[attrNames[k]], encoding);\n        }\n\n        packet.writeLengthCodedNumber(keysLength);\n\n        for (var _k = 0; _k < attrNames.length; ++_k) {\n          packet.writeLengthCodedString(attrNames[_k], encoding);\n          packet.writeLengthCodedString(connectAttributes[attrNames[_k]], encoding);\n        }\n      }\n\n      return packet;\n    }\n  }, {\n    key: \"toPacket\",\n    value: function toPacket() {\n      if (typeof this.user !== 'string') {\n        throw new Error('\"user\" connection config property must be a string');\n      }\n\n      if (typeof this.database !== 'string') {\n        throw new Error('\"database\" connection config property must be a string');\n      } // dry run: calculate resulting packet length\n\n\n      var p = this.serializeToBuffer(Packet.MockBuffer());\n      return this.serializeToBuffer(Buffer.allocUnsafe(p.offset));\n    }\n  }]);\n\n  return ChangeUser;\n}();\n\nmodule.exports = ChangeUser;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/packets/change_user.js"],"names":["CommandCode","require","ClientConstants","Packet","auth41","CharsetToEncoding","ChangeUser","opts","flags","user","database","password","passwordSha1","authPluginData1","authPluginData2","connectAttributes","connectAttrinutes","authToken","calculateTokenFromPasswordSha","calculateToken","charsetNumber","buffer","isSet","flag","packet","length","offset","encoding","writeInt8","CHANGE_USER","writeNullTerminatedString","writeBuffer","writeInt16","attrNames","Object","keys","keysLength","k","lengthCodedStringLength","writeLengthCodedNumber","writeLengthCodedString","Error","p","serializeToBuffer","MockBuffer","Buffer","allocUnsafe","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommandCode = require('../constants/commands.js');\nconst ClientConstants = require('../constants/client.js');\nconst Packet = require('../packets/packet.js');\nconst auth41 = require('../auth_41.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\n// https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER\nclass ChangeUser {\n  constructor(opts) {\n    this.flags = opts.flags;\n    this.user = opts.user || '';\n    this.database = opts.database || '';\n    this.password = opts.password || '';\n    this.passwordSha1 = opts.passwordSha1;\n    this.authPluginData1 = opts.authPluginData1;\n    this.authPluginData2 = opts.authPluginData2;\n    this.connectAttributes = opts.connectAttrinutes || {};\n    let authToken;\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(\n        this.passwordSha1,\n        this.authPluginData1,\n        this.authPluginData2\n      );\n    } else {\n      authToken = auth41.calculateToken(\n        this.password,\n        this.authPluginData1,\n        this.authPluginData2\n      );\n    }\n    this.authToken = authToken;\n    this.charsetNumber = opts.charsetNumber;\n  }\n\n  // TODO\n  // ChangeUser.fromPacket = function(packet)\n  // };\n  serializeToBuffer(buffer) {\n    const isSet = flag => this.flags & ClientConstants[flag];\n    const packet = new Packet(0, buffer, 0, buffer.length);\n    packet.offset = 4;\n    const encoding = CharsetToEncoding[this.charsetNumber];\n    packet.writeInt8(CommandCode.CHANGE_USER);\n    packet.writeNullTerminatedString(this.user, encoding);\n    if (isSet('SECURE_CONNECTION')) {\n      packet.writeInt8(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else {\n      packet.writeBuffer(this.authToken);\n      packet.writeInt8(0);\n    }\n    packet.writeNullTerminatedString(this.database, encoding);\n    packet.writeInt16(this.charsetNumber);\n    if (isSet('PLUGIN_AUTH')) {\n      // TODO: read this from parameters\n      packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n    }\n    if (isSet('CONNECT_ATTRS')) {\n      const connectAttributes = this.connectAttributes;\n      const attrNames = Object.keys(connectAttributes);\n      let keysLength = 0;\n      for (let k = 0; k < attrNames.length; ++k) {\n        keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n        keysLength += Packet.lengthCodedStringLength(\n          connectAttributes[attrNames[k]],\n          encoding\n        );\n      }\n      packet.writeLengthCodedNumber(keysLength);\n      for (let k = 0; k < attrNames.length; ++k) {\n        packet.writeLengthCodedString(attrNames[k], encoding);\n        packet.writeLengthCodedString(\n          connectAttributes[attrNames[k]],\n          encoding\n        );\n      }\n    }\n    return packet;\n  }\n\n  toPacket() {\n    if (typeof this.user !== 'string') {\n      throw new Error('\"user\" connection config property must be a string');\n    }\n    if (typeof this.database !== 'string') {\n      throw new Error('\"database\" connection config property must be a string');\n    }\n    // dry run: calculate resulting packet length\n    const p = this.serializeToBuffer(Packet.MockBuffer());\n    return this.serializeToBuffer(Buffer.allocUnsafe(p.offset));\n  }\n}\n\nmodule.exports = ChangeUser;\n"]},"metadata":{},"sourceType":"script"}