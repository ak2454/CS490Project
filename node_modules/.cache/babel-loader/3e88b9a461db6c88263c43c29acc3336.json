{"ast":null,"code":"'use strict';\n\nvar LRU = require('lru-cache');\n\nvar parserCache = new LRU({\n  max: 15000\n});\n\nfunction keyFromFields(type, fields, options, config) {\n  var res = \"\".concat(type) + \"/\".concat(typeof options.nestTables) + \"/\".concat(options.nestTables) + \"/\".concat(options.rowsAsArray) + \"/\".concat(options.supportBigNumbers || config.supportBigNumbers) + \"/\".concat(options.bigNumberStrings || config.bigNumberStrings) + \"/\".concat(typeof options.typeCast) + \"/\".concat(options.timezone || config.timezone) + \"/\".concat(options.decimalNumbers) + \"/\".concat(options.dateStrings);\n\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i];\n    res += \"/\".concat(field.name, \":\").concat(field.columnType, \":\").concat(field.flags, \":\").concat(field.characterSet);\n\n    if (options.nestTables) {\n      res += \":\".concat(field.table);\n    }\n  }\n\n  return res;\n}\n\nfunction getParser(type, fields, options, config, compiler) {\n  var key = keyFromFields(type, fields, options, config);\n  var parser = parserCache.get(key);\n\n  if (parser) {\n    return parser;\n  }\n\n  parser = compiler(fields, options, config);\n  parserCache.set(key, parser);\n  return parser;\n}\n\nfunction setMaxCache(max) {\n  parserCache.max = max;\n}\n\nfunction clearCache() {\n  parserCache.reset();\n}\n\nmodule.exports = {\n  getParser: getParser,\n  setMaxCache: setMaxCache,\n  clearCache: clearCache\n};","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/parsers/parser_cache.js"],"names":["LRU","require","parserCache","max","keyFromFields","type","fields","options","config","res","nestTables","rowsAsArray","supportBigNumbers","bigNumberStrings","typeCast","timezone","decimalNumbers","dateStrings","i","length","field","name","columnType","flags","characterSet","table","getParser","compiler","key","parser","get","set","setMaxCache","clearCache","reset","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AAEA,IAAMC,WAAW,GAAG,IAAIF,GAAJ,CAAQ;AAC1BG,EAAAA,GAAG,EAAE;AADqB,CAAR,CAApB;;AAIA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,MAA9C,EAAsD;AACpD,MAAIC,GAAG,GACL,UAAGJ,IAAH,eACI,OAAOE,OAAO,CAACG,UADnB,eAEIH,OAAO,CAACG,UAFZ,eAGIH,OAAO,CAACI,WAHZ,eAIIJ,OAAO,CAACK,iBAAR,IAA6BJ,MAAM,CAACI,iBAJxC,eAKIL,OAAO,CAACM,gBAAR,IAA4BL,MAAM,CAACK,gBALvC,eAMI,OAAON,OAAO,CAACO,QANnB,eAOIP,OAAO,CAACQ,QAAR,IAAoBP,MAAM,CAACO,QAP/B,eAQIR,OAAO,CAACS,cARZ,eASIT,OAAO,CAACU,WATZ,CADF;;AAWA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAAM,CAACa,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtC,QAAME,KAAK,GAAGd,MAAM,CAACY,CAAD,CAApB;AACAT,IAAAA,GAAG,eAAQW,KAAK,CAACC,IAAd,cAAsBD,KAAK,CAACE,UAA5B,cAA0CF,KAAK,CAACG,KAAhD,cACDH,KAAK,CAACI,YADL,CAAH;;AAIA,QAAIjB,OAAO,CAACG,UAAZ,EAAwB;AACtBD,MAAAA,GAAG,eAAQW,KAAK,CAACK,KAAd,CAAH;AACD;AACF;;AACD,SAAOhB,GAAP;AACD;;AAED,SAASiB,SAAT,CAAmBrB,IAAnB,EAAyBC,MAAzB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkDmB,QAAlD,EAA4D;AAC1D,MAAMC,GAAG,GAAGxB,aAAa,CAACC,IAAD,EAAOC,MAAP,EAAeC,OAAf,EAAwBC,MAAxB,CAAzB;AACA,MAAIqB,MAAM,GAAG3B,WAAW,CAAC4B,GAAZ,CAAgBF,GAAhB,CAAb;;AAEA,MAAIC,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD;;AAEDA,EAAAA,MAAM,GAAGF,QAAQ,CAACrB,MAAD,EAASC,OAAT,EAAkBC,MAAlB,CAAjB;AACAN,EAAAA,WAAW,CAAC6B,GAAZ,CAAgBH,GAAhB,EAAqBC,MAArB;AACA,SAAOA,MAAP;AACD;;AAED,SAASG,WAAT,CAAqB7B,GAArB,EAA0B;AACxBD,EAAAA,WAAW,CAACC,GAAZ,GAAkBA,GAAlB;AACD;;AAED,SAAS8B,UAAT,GAAsB;AACpB/B,EAAAA,WAAW,CAACgC,KAAZ;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,SAAS,EAAEA,SADI;AAEfM,EAAAA,WAAW,EAAEA,WAFE;AAGfC,EAAAA,UAAU,EAAEA;AAHG,CAAjB","sourcesContent":["'use strict';\n\nconst LRU = require('lru-cache');\n\nconst parserCache = new LRU({\n  max: 15000\n});\n\nfunction keyFromFields(type, fields, options, config) {\n  let res =\n    `${type}` +\n    `/${typeof options.nestTables}` +\n    `/${options.nestTables}` +\n    `/${options.rowsAsArray}` +\n    `/${options.supportBigNumbers || config.supportBigNumbers}` +\n    `/${options.bigNumberStrings || config.bigNumberStrings}` +\n    `/${typeof options.typeCast}` +\n    `/${options.timezone || config.timezone}` +\n    `/${options.decimalNumbers}` +\n    `/${options.dateStrings}`;\n  for (let i = 0; i < fields.length; ++i) {\n    const field = fields[i];\n    res += `/${field.name}:${field.columnType}:${field.flags}:${\n      field.characterSet\n    }`;\n\n    if (options.nestTables) {\n      res += `:${field.table}`\n    }\n  }\n  return res;\n}\n\nfunction getParser(type, fields, options, config, compiler) {\n  const key = keyFromFields(type, fields, options, config);\n  let parser = parserCache.get(key);\n\n  if (parser) {\n    return parser;\n  }\n\n  parser = compiler(fields, options, config);\n  parserCache.set(key, parser);\n  return parser;\n}\n\nfunction setMaxCache(max) {\n  parserCache.max = max;\n}\n\nfunction clearCache() {\n  parserCache.reset();\n}\n\nmodule.exports = {\n  getParser: getParser,\n  setMaxCache: setMaxCache,\n  clearCache: clearCache\n};\n"]},"metadata":{},"sourceType":"script"}