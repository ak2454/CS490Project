{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ClientConstants = require('../constants/client.js');\n\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nvar Packet = require('../packets/packet.js');\n\nvar auth41 = require('../auth_41.js');\n\nvar HandshakeResponse = /*#__PURE__*/function () {\n  function HandshakeResponse(handshake) {\n    _classCallCheck(this, HandshakeResponse);\n\n    this.user = handshake.user || '';\n    this.database = handshake.database || '';\n    this.password = handshake.password || '';\n    this.passwordSha1 = handshake.passwordSha1;\n    this.authPluginData1 = handshake.authPluginData1;\n    this.authPluginData2 = handshake.authPluginData2;\n    this.compress = handshake.compress;\n    this.clientFlags = handshake.flags; // TODO: pre-4.1 auth support\n\n    var authToken;\n\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, this.authPluginData1, this.authPluginData2);\n    } else {\n      authToken = auth41.calculateToken(this.password, this.authPluginData1, this.authPluginData2);\n    }\n\n    this.authToken = authToken;\n    this.charsetNumber = handshake.charsetNumber;\n    this.encoding = CharsetToEncoding[handshake.charsetNumber];\n    this.connectAttributes = handshake.connectAttributes;\n  }\n\n  _createClass(HandshakeResponse, [{\n    key: \"serializeResponse\",\n    value: function serializeResponse(buffer) {\n      var _this = this;\n\n      var isSet = function isSet(flag) {\n        return _this.clientFlags & ClientConstants[flag];\n      };\n\n      var packet = new Packet(0, buffer, 0, buffer.length);\n      packet.offset = 4;\n      packet.writeInt32(this.clientFlags);\n      packet.writeInt32(0); // max packet size. todo: move to config\n\n      packet.writeInt8(this.charsetNumber);\n      packet.skip(23);\n      var encoding = this.encoding;\n      packet.writeNullTerminatedString(this.user, encoding);\n      var k;\n\n      if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n        packet.writeLengthCodedNumber(this.authToken.length);\n        packet.writeBuffer(this.authToken);\n      } else if (isSet('SECURE_CONNECTION')) {\n        packet.writeInt8(this.authToken.length);\n        packet.writeBuffer(this.authToken);\n      } else {\n        packet.writeBuffer(this.authToken);\n        packet.writeInt8(0);\n      }\n\n      if (isSet('CONNECT_WITH_DB')) {\n        packet.writeNullTerminatedString(this.database, encoding);\n      }\n\n      if (isSet('PLUGIN_AUTH')) {\n        // TODO: pass from config\n        packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n      }\n\n      if (isSet('CONNECT_ATTRS')) {\n        var connectAttributes = this.connectAttributes || {};\n        var attrNames = Object.keys(connectAttributes);\n        var keysLength = 0;\n\n        for (k = 0; k < attrNames.length; ++k) {\n          keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n          keysLength += Packet.lengthCodedStringLength(connectAttributes[attrNames[k]], encoding);\n        }\n\n        packet.writeLengthCodedNumber(keysLength);\n\n        for (k = 0; k < attrNames.length; ++k) {\n          packet.writeLengthCodedString(attrNames[k], encoding);\n          packet.writeLengthCodedString(connectAttributes[attrNames[k]], encoding);\n        }\n      }\n\n      return packet;\n    }\n  }, {\n    key: \"toPacket\",\n    value: function toPacket() {\n      if (typeof this.user !== 'string') {\n        throw new Error('\"user\" connection config property must be a string');\n      }\n\n      if (typeof this.database !== 'string') {\n        throw new Error('\"database\" connection config property must be a string');\n      } // dry run: calculate resulting packet length\n\n\n      var p = this.serializeResponse(Packet.MockBuffer());\n      return this.serializeResponse(Buffer.alloc(p.offset));\n    }\n  }], [{\n    key: \"fromPacket\",\n    value: function fromPacket(packet) {\n      var args = {};\n      args.clientFlags = packet.readInt32();\n\n      function isSet(flag) {\n        return args.clientFlags & ClientConstants[flag];\n      }\n\n      args.maxPacketSize = packet.readInt32();\n      args.charsetNumber = packet.readInt8();\n      var encoding = CharsetToEncoding[args.charsetNumber];\n      args.encoding = encoding;\n      packet.skip(23);\n      args.user = packet.readNullTerminatedString(encoding);\n      var authTokenLength;\n\n      if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n        authTokenLength = packet.readLengthCodedNumber(encoding);\n        args.authToken = packet.readBuffer(authTokenLength);\n      } else if (isSet('SECURE_CONNECTION')) {\n        authTokenLength = packet.readInt8();\n        args.authToken = packet.readBuffer(authTokenLength);\n      } else {\n        args.authToken = packet.readNullTerminatedString(encoding);\n      }\n\n      if (isSet('CONNECT_WITH_DB')) {\n        args.database = packet.readNullTerminatedString(encoding);\n      }\n\n      if (isSet('PLUGIN_AUTH')) {\n        args.authPluginName = packet.readNullTerminatedString(encoding);\n      }\n\n      if (isSet('CONNECT_ATTRS')) {\n        var keysLength = packet.readLengthCodedNumber(encoding);\n        var keysEnd = packet.offset + keysLength;\n        var attrs = {};\n\n        while (packet.offset < keysEnd) {\n          attrs[packet.readLengthCodedString(encoding)] = packet.readLengthCodedString(encoding);\n        }\n\n        args.connectAttributes = attrs;\n      }\n\n      return args;\n    }\n  }]);\n\n  return HandshakeResponse;\n}();\n\nmodule.exports = HandshakeResponse;","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/packets/handshake_response.js"],"names":["ClientConstants","require","CharsetToEncoding","Packet","auth41","HandshakeResponse","handshake","user","database","password","passwordSha1","authPluginData1","authPluginData2","compress","clientFlags","flags","authToken","calculateTokenFromPasswordSha","calculateToken","charsetNumber","encoding","connectAttributes","buffer","isSet","flag","packet","length","offset","writeInt32","writeInt8","skip","writeNullTerminatedString","k","writeLengthCodedNumber","writeBuffer","attrNames","Object","keys","keysLength","lengthCodedStringLength","writeLengthCodedString","Error","p","serializeResponse","MockBuffer","Buffer","alloc","args","readInt32","maxPacketSize","readInt8","readNullTerminatedString","authTokenLength","readLengthCodedNumber","readBuffer","authPluginName","keysEnd","attrs","readLengthCodedString","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAC,wBAAD,CAA/B;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,mCAAD,CAAjC;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,sBAAD,CAAtB;;AAEA,IAAMG,MAAM,GAAGH,OAAO,CAAC,eAAD,CAAtB;;IAEMI,iB;AACJ,6BAAYC,SAAZ,EAAuB;AAAA;;AACrB,SAAKC,IAAL,GAAYD,SAAS,CAACC,IAAV,IAAkB,EAA9B;AACA,SAAKC,QAAL,GAAgBF,SAAS,CAACE,QAAV,IAAsB,EAAtC;AACA,SAAKC,QAAL,GAAgBH,SAAS,CAACG,QAAV,IAAsB,EAAtC;AACA,SAAKC,YAAL,GAAoBJ,SAAS,CAACI,YAA9B;AACA,SAAKC,eAAL,GAAuBL,SAAS,CAACK,eAAjC;AACA,SAAKC,eAAL,GAAuBN,SAAS,CAACM,eAAjC;AACA,SAAKC,QAAL,GAAgBP,SAAS,CAACO,QAA1B;AACA,SAAKC,WAAL,GAAmBR,SAAS,CAACS,KAA7B,CARqB,CASrB;;AACA,QAAIC,SAAJ;;AACA,QAAI,KAAKN,YAAT,EAAuB;AACrBM,MAAAA,SAAS,GAAGZ,MAAM,CAACa,6BAAP,CACV,KAAKP,YADK,EAEV,KAAKC,eAFK,EAGV,KAAKC,eAHK,CAAZ;AAKD,KAND,MAMO;AACLI,MAAAA,SAAS,GAAGZ,MAAM,CAACc,cAAP,CACV,KAAKT,QADK,EAEV,KAAKE,eAFK,EAGV,KAAKC,eAHK,CAAZ;AAKD;;AACD,SAAKI,SAAL,GAAiBA,SAAjB;AACA,SAAKG,aAAL,GAAqBb,SAAS,CAACa,aAA/B;AACA,SAAKC,QAAL,GAAgBlB,iBAAiB,CAACI,SAAS,CAACa,aAAX,CAAjC;AACA,SAAKE,iBAAL,GAAyBf,SAAS,CAACe,iBAAnC;AACD;;;;WAED,2BAAkBC,MAAlB,EAA0B;AAAA;;AACxB,UAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,IAAI;AAAA,eAAI,KAAI,CAACV,WAAL,GAAmBd,eAAe,CAACwB,IAAD,CAAtC;AAAA,OAAlB;;AACA,UAAMC,MAAM,GAAG,IAAItB,MAAJ,CAAW,CAAX,EAAcmB,MAAd,EAAsB,CAAtB,EAAyBA,MAAM,CAACI,MAAhC,CAAf;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,CAAhB;AACAF,MAAAA,MAAM,CAACG,UAAP,CAAkB,KAAKd,WAAvB;AACAW,MAAAA,MAAM,CAACG,UAAP,CAAkB,CAAlB,EALwB,CAKF;;AACtBH,MAAAA,MAAM,CAACI,SAAP,CAAiB,KAAKV,aAAtB;AACAM,MAAAA,MAAM,CAACK,IAAP,CAAY,EAAZ;AACA,UAAMV,QAAQ,GAAG,KAAKA,QAAtB;AACAK,MAAAA,MAAM,CAACM,yBAAP,CAAiC,KAAKxB,IAAtC,EAA4Ca,QAA5C;AACA,UAAIY,CAAJ;;AACA,UAAIT,KAAK,CAAC,gCAAD,CAAT,EAA6C;AAC3CE,QAAAA,MAAM,CAACQ,sBAAP,CAA8B,KAAKjB,SAAL,CAAeU,MAA7C;AACAD,QAAAA,MAAM,CAACS,WAAP,CAAmB,KAAKlB,SAAxB;AACD,OAHD,MAGO,IAAIO,KAAK,CAAC,mBAAD,CAAT,EAAgC;AACrCE,QAAAA,MAAM,CAACI,SAAP,CAAiB,KAAKb,SAAL,CAAeU,MAAhC;AACAD,QAAAA,MAAM,CAACS,WAAP,CAAmB,KAAKlB,SAAxB;AACD,OAHM,MAGA;AACLS,QAAAA,MAAM,CAACS,WAAP,CAAmB,KAAKlB,SAAxB;AACAS,QAAAA,MAAM,CAACI,SAAP,CAAiB,CAAjB;AACD;;AACD,UAAIN,KAAK,CAAC,iBAAD,CAAT,EAA8B;AAC5BE,QAAAA,MAAM,CAACM,yBAAP,CAAiC,KAAKvB,QAAtC,EAAgDY,QAAhD;AACD;;AACD,UAAIG,KAAK,CAAC,aAAD,CAAT,EAA0B;AACxB;AACAE,QAAAA,MAAM,CAACM,yBAAP,CAAiC,uBAAjC,EAA0D,QAA1D;AACD;;AACD,UAAIR,KAAK,CAAC,eAAD,CAAT,EAA4B;AAC1B,YAAMF,iBAAiB,GAAG,KAAKA,iBAAL,IAA0B,EAApD;AACA,YAAMc,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYhB,iBAAZ,CAAlB;AACA,YAAIiB,UAAU,GAAG,CAAjB;;AACA,aAAKN,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGG,SAAS,CAACT,MAA1B,EAAkC,EAAEM,CAApC,EAAuC;AACrCM,UAAAA,UAAU,IAAInC,MAAM,CAACoC,uBAAP,CAA+BJ,SAAS,CAACH,CAAD,CAAxC,EAA6CZ,QAA7C,CAAd;AACAkB,UAAAA,UAAU,IAAInC,MAAM,CAACoC,uBAAP,CACZlB,iBAAiB,CAACc,SAAS,CAACH,CAAD,CAAV,CADL,EAEZZ,QAFY,CAAd;AAID;;AACDK,QAAAA,MAAM,CAACQ,sBAAP,CAA8BK,UAA9B;;AACA,aAAKN,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGG,SAAS,CAACT,MAA1B,EAAkC,EAAEM,CAApC,EAAuC;AACrCP,UAAAA,MAAM,CAACe,sBAAP,CAA8BL,SAAS,CAACH,CAAD,CAAvC,EAA4CZ,QAA5C;AACAK,UAAAA,MAAM,CAACe,sBAAP,CACEnB,iBAAiB,CAACc,SAAS,CAACH,CAAD,CAAV,CADnB,EAEEZ,QAFF;AAID;AACF;;AACD,aAAOK,MAAP;AACD;;;WAED,oBAAW;AACT,UAAI,OAAO,KAAKlB,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIkC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD,UAAI,OAAO,KAAKjC,QAAZ,KAAyB,QAA7B,EAAuC;AACrC,cAAM,IAAIiC,KAAJ,CAAU,wDAAV,CAAN;AACD,OANQ,CAOT;;;AACA,UAAMC,CAAC,GAAG,KAAKC,iBAAL,CAAuBxC,MAAM,CAACyC,UAAP,EAAvB,CAAV;AACA,aAAO,KAAKD,iBAAL,CAAuBE,MAAM,CAACC,KAAP,CAAaJ,CAAC,CAACf,MAAf,CAAvB,CAAP;AACD;;;WACD,oBAAkBF,MAAlB,EAA0B;AACxB,UAAMsB,IAAI,GAAG,EAAb;AACAA,MAAAA,IAAI,CAACjC,WAAL,GAAmBW,MAAM,CAACuB,SAAP,EAAnB;;AACA,eAASzB,KAAT,CAAeC,IAAf,EAAqB;AACnB,eAAOuB,IAAI,CAACjC,WAAL,GAAmBd,eAAe,CAACwB,IAAD,CAAzC;AACD;;AACDuB,MAAAA,IAAI,CAACE,aAAL,GAAqBxB,MAAM,CAACuB,SAAP,EAArB;AACAD,MAAAA,IAAI,CAAC5B,aAAL,GAAqBM,MAAM,CAACyB,QAAP,EAArB;AACA,UAAM9B,QAAQ,GAAGlB,iBAAiB,CAAC6C,IAAI,CAAC5B,aAAN,CAAlC;AACA4B,MAAAA,IAAI,CAAC3B,QAAL,GAAgBA,QAAhB;AACAK,MAAAA,MAAM,CAACK,IAAP,CAAY,EAAZ;AACAiB,MAAAA,IAAI,CAACxC,IAAL,GAAYkB,MAAM,CAAC0B,wBAAP,CAAgC/B,QAAhC,CAAZ;AACA,UAAIgC,eAAJ;;AACA,UAAI7B,KAAK,CAAC,gCAAD,CAAT,EAA6C;AAC3C6B,QAAAA,eAAe,GAAG3B,MAAM,CAAC4B,qBAAP,CAA6BjC,QAA7B,CAAlB;AACA2B,QAAAA,IAAI,CAAC/B,SAAL,GAAiBS,MAAM,CAAC6B,UAAP,CAAkBF,eAAlB,CAAjB;AACD,OAHD,MAGO,IAAI7B,KAAK,CAAC,mBAAD,CAAT,EAAgC;AACrC6B,QAAAA,eAAe,GAAG3B,MAAM,CAACyB,QAAP,EAAlB;AACAH,QAAAA,IAAI,CAAC/B,SAAL,GAAiBS,MAAM,CAAC6B,UAAP,CAAkBF,eAAlB,CAAjB;AACD,OAHM,MAGA;AACLL,QAAAA,IAAI,CAAC/B,SAAL,GAAiBS,MAAM,CAAC0B,wBAAP,CAAgC/B,QAAhC,CAAjB;AACD;;AACD,UAAIG,KAAK,CAAC,iBAAD,CAAT,EAA8B;AAC5BwB,QAAAA,IAAI,CAACvC,QAAL,GAAgBiB,MAAM,CAAC0B,wBAAP,CAAgC/B,QAAhC,CAAhB;AACD;;AACD,UAAIG,KAAK,CAAC,aAAD,CAAT,EAA0B;AACxBwB,QAAAA,IAAI,CAACQ,cAAL,GAAsB9B,MAAM,CAAC0B,wBAAP,CAAgC/B,QAAhC,CAAtB;AACD;;AACD,UAAIG,KAAK,CAAC,eAAD,CAAT,EAA4B;AAC1B,YAAMe,UAAU,GAAGb,MAAM,CAAC4B,qBAAP,CAA6BjC,QAA7B,CAAnB;AACA,YAAMoC,OAAO,GAAG/B,MAAM,CAACE,MAAP,GAAgBW,UAAhC;AACA,YAAMmB,KAAK,GAAG,EAAd;;AACA,eAAOhC,MAAM,CAACE,MAAP,GAAgB6B,OAAvB,EAAgC;AAC9BC,UAAAA,KAAK,CACHhC,MAAM,CAACiC,qBAAP,CAA6BtC,QAA7B,CADG,CAAL,GAEIK,MAAM,CAACiC,qBAAP,CAA6BtC,QAA7B,CAFJ;AAGD;;AACD2B,QAAAA,IAAI,CAAC1B,iBAAL,GAAyBoC,KAAzB;AACD;;AACD,aAAOV,IAAP;AACD;;;;;;AAGHY,MAAM,CAACC,OAAP,GAAiBvD,iBAAjB","sourcesContent":["'use strict';\n\nconst ClientConstants = require('../constants/client.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\nconst Packet = require('../packets/packet.js');\n\nconst auth41 = require('../auth_41.js');\n\nclass HandshakeResponse {\n  constructor(handshake) {\n    this.user = handshake.user || '';\n    this.database = handshake.database || '';\n    this.password = handshake.password || '';\n    this.passwordSha1 = handshake.passwordSha1;\n    this.authPluginData1 = handshake.authPluginData1;\n    this.authPluginData2 = handshake.authPluginData2;\n    this.compress = handshake.compress;\n    this.clientFlags = handshake.flags;\n    // TODO: pre-4.1 auth support\n    let authToken;\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(\n        this.passwordSha1,\n        this.authPluginData1,\n        this.authPluginData2\n      );\n    } else {\n      authToken = auth41.calculateToken(\n        this.password,\n        this.authPluginData1,\n        this.authPluginData2\n      );\n    }\n    this.authToken = authToken;\n    this.charsetNumber = handshake.charsetNumber;\n    this.encoding = CharsetToEncoding[handshake.charsetNumber];\n    this.connectAttributes = handshake.connectAttributes;\n  }\n\n  serializeResponse(buffer) {\n    const isSet = flag => this.clientFlags & ClientConstants[flag];\n    const packet = new Packet(0, buffer, 0, buffer.length);\n    packet.offset = 4;\n    packet.writeInt32(this.clientFlags);\n    packet.writeInt32(0); // max packet size. todo: move to config\n    packet.writeInt8(this.charsetNumber);\n    packet.skip(23);\n    const encoding = this.encoding;\n    packet.writeNullTerminatedString(this.user, encoding);\n    let k;\n    if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n      packet.writeLengthCodedNumber(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else if (isSet('SECURE_CONNECTION')) {\n      packet.writeInt8(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else {\n      packet.writeBuffer(this.authToken);\n      packet.writeInt8(0);\n    }\n    if (isSet('CONNECT_WITH_DB')) {\n      packet.writeNullTerminatedString(this.database, encoding);\n    }\n    if (isSet('PLUGIN_AUTH')) {\n      // TODO: pass from config\n      packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n    }\n    if (isSet('CONNECT_ATTRS')) {\n      const connectAttributes = this.connectAttributes || {};\n      const attrNames = Object.keys(connectAttributes);\n      let keysLength = 0;\n      for (k = 0; k < attrNames.length; ++k) {\n        keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n        keysLength += Packet.lengthCodedStringLength(\n          connectAttributes[attrNames[k]],\n          encoding\n        );\n      }\n      packet.writeLengthCodedNumber(keysLength);\n      for (k = 0; k < attrNames.length; ++k) {\n        packet.writeLengthCodedString(attrNames[k], encoding);\n        packet.writeLengthCodedString(\n          connectAttributes[attrNames[k]],\n          encoding\n        );\n      }\n    }\n    return packet;\n  }\n\n  toPacket() {\n    if (typeof this.user !== 'string') {\n      throw new Error('\"user\" connection config property must be a string');\n    }\n    if (typeof this.database !== 'string') {\n      throw new Error('\"database\" connection config property must be a string');\n    }\n    // dry run: calculate resulting packet length\n    const p = this.serializeResponse(Packet.MockBuffer());\n    return this.serializeResponse(Buffer.alloc(p.offset));\n  }\n  static fromPacket(packet) {\n    const args = {};\n    args.clientFlags = packet.readInt32();\n    function isSet(flag) {\n      return args.clientFlags & ClientConstants[flag];\n    }\n    args.maxPacketSize = packet.readInt32();\n    args.charsetNumber = packet.readInt8();\n    const encoding = CharsetToEncoding[args.charsetNumber];\n    args.encoding = encoding;\n    packet.skip(23);\n    args.user = packet.readNullTerminatedString(encoding);\n    let authTokenLength;\n    if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n      authTokenLength = packet.readLengthCodedNumber(encoding);\n      args.authToken = packet.readBuffer(authTokenLength);\n    } else if (isSet('SECURE_CONNECTION')) {\n      authTokenLength = packet.readInt8();\n      args.authToken = packet.readBuffer(authTokenLength);\n    } else {\n      args.authToken = packet.readNullTerminatedString(encoding);\n    }\n    if (isSet('CONNECT_WITH_DB')) {\n      args.database = packet.readNullTerminatedString(encoding);\n    }\n    if (isSet('PLUGIN_AUTH')) {\n      args.authPluginName = packet.readNullTerminatedString(encoding);\n    }\n    if (isSet('CONNECT_ATTRS')) {\n      const keysLength = packet.readLengthCodedNumber(encoding);\n      const keysEnd = packet.offset + keysLength;\n      const attrs = {};\n      while (packet.offset < keysEnd) {\n        attrs[\n          packet.readLengthCodedString(encoding)\n        ] = packet.readLengthCodedString(encoding);\n      }\n      args.connectAttributes = attrs;\n    }\n    return args;\n  }\n}\n\nmodule.exports = HandshakeResponse;\n"]},"metadata":{},"sourceType":"script"}