{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/root/Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar CommandCode = require('../constants/commands.js');\n\nvar Errors = require('../constants/errors.js');\n\nvar Command = require('./command.js');\n\nvar Packets = require('../packets/index.js');\n\nvar ServerHandshake = /*#__PURE__*/function (_Command) {\n  _inherits(ServerHandshake, _Command);\n\n  var _super = _createSuper(ServerHandshake);\n\n  function ServerHandshake(args) {\n    var _this;\n\n    _classCallCheck(this, ServerHandshake);\n\n    _this = _super.call(this);\n    _this.args = args;\n    /*\n    this.protocolVersion = args.protocolVersion || 10;\n    this.serverVersion   = args.serverVersion;\n    this.connectionId    = args.connectionId,\n    this.statusFlags     = args.statusFlags,\n    this.characterSet    = args.characterSet,\n    this.capabilityFlags = args.capabilityFlags || 512;\n    */\n\n    return _this;\n  }\n\n  _createClass(ServerHandshake, [{\n    key: \"start\",\n    value: function start(packet, connection) {\n      var serverHelloPacket = new Packets.Handshake(this.args);\n      this.serverHello = serverHelloPacket;\n      serverHelloPacket.setScrambleData(function (err) {\n        if (err) {\n          connection.emit('error', new Error('Error generating random bytes'));\n          return;\n        }\n\n        connection.writePacket(serverHelloPacket.toPacket(0));\n      });\n      return ServerHandshake.prototype.readClientReply;\n    }\n  }, {\n    key: \"readClientReply\",\n    value: function readClientReply(packet, connection) {\n      // check auth here\n      var clientHelloReply = Packets.HandshakeResponse.fromPacket(packet); // TODO check we don't have something similar already\n\n      connection.clientHelloReply = clientHelloReply;\n\n      if (this.args.authCallback) {\n        this.args.authCallback({\n          user: clientHelloReply.user,\n          database: clientHelloReply.database,\n          address: connection.stream.remoteAddress,\n          authPluginData1: this.serverHello.authPluginData1,\n          authPluginData2: this.serverHello.authPluginData2,\n          authToken: clientHelloReply.authToken\n        }, function (err, mysqlError) {\n          // if (err)\n          if (!mysqlError) {\n            connection.writeOk();\n          } else {\n            // TODO create constants / errorToCode\n            // 1045 = ER_ACCESS_DENIED_ERROR\n            connection.writeError({\n              message: mysqlError.message || '',\n              code: mysqlError.code || 1045\n            });\n            connection.close();\n          }\n        });\n      } else {\n        connection.writeOk();\n      }\n\n      return ServerHandshake.prototype.dispatchCommands;\n    }\n  }, {\n    key: \"dispatchCommands\",\n    value: function dispatchCommands(packet, connection) {\n      // command from client to server\n      var knownCommand = true;\n      var encoding = connection.clientHelloReply.encoding;\n      var commandCode = packet.readInt8();\n\n      switch (commandCode) {\n        case CommandCode.QUIT:\n          if (connection.listeners('quit').length) {\n            connection.emit('quit');\n          } else {\n            connection.stream.end();\n          }\n\n          break;\n\n        case CommandCode.INIT_DB:\n          if (connection.listeners('init_db').length) {\n            var schemaName = packet.readString(undefined, encoding);\n            connection.emit('init_db', schemaName);\n          } else {\n            connection.writeOk();\n          }\n\n          break;\n\n        case CommandCode.QUERY:\n          if (connection.listeners('query').length) {\n            var query = packet.readString(undefined, encoding);\n            connection.emit('query', query);\n          } else {\n            connection.writeError({\n              code: Errors.HA_ERR_INTERNAL_ERROR,\n              message: 'No query handler'\n            });\n          }\n\n          break;\n\n        case CommandCode.FIELD_LIST:\n          if (connection.listeners('field_list').length) {\n            var table = packet.readNullTerminatedString();\n            var fields = packet.readString(undefined, encoding);\n            connection.emit('field_list', table, fields);\n          } else {\n            connection.writeError({\n              code: Errors.ER_WARN_DEPRECATED_SYNTAX,\n              message: 'As of MySQL 5.7.11, COM_FIELD_LIST is deprecated and will be removed in a future version of MySQL.'\n            });\n          }\n\n          break;\n\n        case CommandCode.PING:\n          if (connection.listeners('ping').length) {\n            connection.emit('ping');\n          } else {\n            connection.writeOk();\n          }\n\n          break;\n\n        default:\n          knownCommand = false;\n      }\n\n      if (connection.listeners('packet').length) {\n        connection.emit('packet', packet.clone(), knownCommand, commandCode);\n      } else if (!knownCommand) {\n        // eslint-disable-next-line no-console\n        console.log('Unknown command:', commandCode);\n      }\n\n      return ServerHandshake.prototype.dispatchCommands;\n    }\n  }]);\n\n  return ServerHandshake;\n}(Command);\n\nmodule.exports = ServerHandshake; // TODO: implement server-side 4.1 authentication\n\n/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/","map":{"version":3,"sources":["/root/Test/node_modules/mysql2/lib/commands/server_handshake.js"],"names":["CommandCode","require","Errors","Command","Packets","ServerHandshake","args","packet","connection","serverHelloPacket","Handshake","serverHello","setScrambleData","err","emit","Error","writePacket","toPacket","prototype","readClientReply","clientHelloReply","HandshakeResponse","fromPacket","authCallback","user","database","address","stream","remoteAddress","authPluginData1","authPluginData2","authToken","mysqlError","writeOk","writeError","message","code","close","dispatchCommands","knownCommand","encoding","commandCode","readInt8","QUIT","listeners","length","end","INIT_DB","schemaName","readString","undefined","QUERY","query","HA_ERR_INTERNAL_ERROR","FIELD_LIST","table","readNullTerminatedString","fields","ER_WARN_DEPRECATED_SYNTAX","PING","clone","console","log","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommandCode = require('../constants/commands.js');\nconst Errors = require('../constants/errors.js');\n\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\n\nclass ServerHandshake extends Command {\n  constructor(args) {\n    super();\n    this.args = args;\n    /*\n    this.protocolVersion = args.protocolVersion || 10;\n    this.serverVersion   = args.serverVersion;\n    this.connectionId    = args.connectionId,\n    this.statusFlags     = args.statusFlags,\n    this.characterSet    = args.characterSet,\n    this.capabilityFlags = args.capabilityFlags || 512;\n    */\n  }\n\n  start(packet, connection) {\n    const serverHelloPacket = new Packets.Handshake(this.args);\n    this.serverHello = serverHelloPacket;\n    serverHelloPacket.setScrambleData(err => {\n      if (err) {\n        connection.emit('error', new Error('Error generating random bytes'));\n        return;\n      }\n      connection.writePacket(serverHelloPacket.toPacket(0));\n    });\n    return ServerHandshake.prototype.readClientReply;\n  }\n\n  readClientReply(packet, connection) {\n    // check auth here\n    const clientHelloReply = Packets.HandshakeResponse.fromPacket(packet);\n    // TODO check we don't have something similar already\n    connection.clientHelloReply = clientHelloReply;\n    if (this.args.authCallback) {\n      this.args.authCallback(\n        {\n          user: clientHelloReply.user,\n          database: clientHelloReply.database,\n          address: connection.stream.remoteAddress,\n          authPluginData1: this.serverHello.authPluginData1,\n          authPluginData2: this.serverHello.authPluginData2,\n          authToken: clientHelloReply.authToken\n        },\n        (err, mysqlError) => {\n          // if (err)\n          if (!mysqlError) {\n            connection.writeOk();\n          } else {\n            // TODO create constants / errorToCode\n            // 1045 = ER_ACCESS_DENIED_ERROR\n            connection.writeError({\n              message: mysqlError.message || '',\n              code: mysqlError.code || 1045\n            });\n            connection.close();\n          }\n        }\n      );\n    } else {\n      connection.writeOk();\n    }\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n\n  dispatchCommands(packet, connection) {\n    // command from client to server\n    let knownCommand = true;\n    const encoding = connection.clientHelloReply.encoding;\n    const commandCode = packet.readInt8();\n    switch (commandCode) {\n      case CommandCode.QUIT:\n        if (connection.listeners('quit').length) {\n          connection.emit('quit');\n        } else {\n          connection.stream.end();\n        }\n        break;\n      case CommandCode.INIT_DB:\n        if (connection.listeners('init_db').length) {\n          const schemaName = packet.readString(undefined, encoding);\n          connection.emit('init_db', schemaName);\n        } else {\n          connection.writeOk();\n        }\n        break;\n      case CommandCode.QUERY:\n        if (connection.listeners('query').length) {\n          const query = packet.readString(undefined, encoding);\n          connection.emit('query', query);\n        } else {\n          connection.writeError({\n            code: Errors.HA_ERR_INTERNAL_ERROR,\n            message: 'No query handler'\n          });\n        }\n        break;\n      case CommandCode.FIELD_LIST:\n        if (connection.listeners('field_list').length) {\n          const table = packet.readNullTerminatedString();\n          const fields = packet.readString(undefined, encoding);\n          connection.emit('field_list', table, fields);\n        } else {\n          connection.writeError({\n            code: Errors.ER_WARN_DEPRECATED_SYNTAX,\n            message:\n              'As of MySQL 5.7.11, COM_FIELD_LIST is deprecated and will be removed in a future version of MySQL.'\n          });\n        }\n        break;\n      case CommandCode.PING:\n        if (connection.listeners('ping').length) {\n          connection.emit('ping');\n        } else {\n          connection.writeOk();\n        }\n        break;\n      default:\n        knownCommand = false;\n    }\n    if (connection.listeners('packet').length) {\n      connection.emit('packet', packet.clone(), knownCommand, commandCode);\n    } else if (!knownCommand) {\n      // eslint-disable-next-line no-console\n      console.log('Unknown command:', commandCode);\n    }\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n}\n\nmodule.exports = ServerHandshake;\n\n// TODO: implement server-side 4.1 authentication\n/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/\n"]},"metadata":{},"sourceType":"script"}